
Test_1602.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b08c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800b19c  0800b19c  0001b19c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b380  0800b380  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800b380  0800b380  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b380  0800b380  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b380  0800b380  0001b380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b384  0800b384  0001b384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b388  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001424  20000078  0800b400  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000149c  0800b400  0002149c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c65d  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003afb  00000000  00000000  0003c6fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  00040200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001618  00000000  00000000  000419a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018188  00000000  00000000  00042fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011d02  00000000  00000000  0005b140  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007f1fe  00000000  00000000  0006ce42  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ec040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067ac  00000000  00000000  000ec0bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b184 	.word	0x0800b184

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800b184 	.word	0x0800b184

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	; 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a58:	f1a2 0201 	sub.w	r2, r2, #1
 8000a5c:	d1ed      	bne.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_fmul>:
 8000bb8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bbc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc0:	bf1e      	ittt	ne
 8000bc2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bc6:	ea92 0f0c 	teqne	r2, ip
 8000bca:	ea93 0f0c 	teqne	r3, ip
 8000bce:	d06f      	beq.n	8000cb0 <__aeabi_fmul+0xf8>
 8000bd0:	441a      	add	r2, r3
 8000bd2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bd6:	0240      	lsls	r0, r0, #9
 8000bd8:	bf18      	it	ne
 8000bda:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bde:	d01e      	beq.n	8000c1e <__aeabi_fmul+0x66>
 8000be0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000be4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000be8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bec:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bf4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bf8:	bf3e      	ittt	cc
 8000bfa:	0049      	lslcc	r1, r1, #1
 8000bfc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c00:	005b      	lslcc	r3, r3, #1
 8000c02:	ea40 0001 	orr.w	r0, r0, r1
 8000c06:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c0a:	2afd      	cmp	r2, #253	; 0xfd
 8000c0c:	d81d      	bhi.n	8000c4a <__aeabi_fmul+0x92>
 8000c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c12:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c16:	bf08      	it	eq
 8000c18:	f020 0001 	biceq.w	r0, r0, #1
 8000c1c:	4770      	bx	lr
 8000c1e:	f090 0f00 	teq	r0, #0
 8000c22:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c26:	bf08      	it	eq
 8000c28:	0249      	lsleq	r1, r1, #9
 8000c2a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c2e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c32:	3a7f      	subs	r2, #127	; 0x7f
 8000c34:	bfc2      	ittt	gt
 8000c36:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c3a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c3e:	4770      	bxgt	lr
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	dc5d      	bgt.n	8000d08 <__aeabi_fmul+0x150>
 8000c4c:	f112 0f19 	cmn.w	r2, #25
 8000c50:	bfdc      	itt	le
 8000c52:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c56:	4770      	bxle	lr
 8000c58:	f1c2 0200 	rsb	r2, r2, #0
 8000c5c:	0041      	lsls	r1, r0, #1
 8000c5e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c62:	f1c2 0220 	rsb	r2, r2, #32
 8000c66:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c6e:	f140 0000 	adc.w	r0, r0, #0
 8000c72:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c76:	bf08      	it	eq
 8000c78:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c7c:	4770      	bx	lr
 8000c7e:	f092 0f00 	teq	r2, #0
 8000c82:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c86:	bf02      	ittt	eq
 8000c88:	0040      	lsleq	r0, r0, #1
 8000c8a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c8e:	3a01      	subeq	r2, #1
 8000c90:	d0f9      	beq.n	8000c86 <__aeabi_fmul+0xce>
 8000c92:	ea40 000c 	orr.w	r0, r0, ip
 8000c96:	f093 0f00 	teq	r3, #0
 8000c9a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c9e:	bf02      	ittt	eq
 8000ca0:	0049      	lsleq	r1, r1, #1
 8000ca2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ca6:	3b01      	subeq	r3, #1
 8000ca8:	d0f9      	beq.n	8000c9e <__aeabi_fmul+0xe6>
 8000caa:	ea41 010c 	orr.w	r1, r1, ip
 8000cae:	e78f      	b.n	8000bd0 <__aeabi_fmul+0x18>
 8000cb0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cb4:	ea92 0f0c 	teq	r2, ip
 8000cb8:	bf18      	it	ne
 8000cba:	ea93 0f0c 	teqne	r3, ip
 8000cbe:	d00a      	beq.n	8000cd6 <__aeabi_fmul+0x11e>
 8000cc0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cc4:	bf18      	it	ne
 8000cc6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cca:	d1d8      	bne.n	8000c7e <__aeabi_fmul+0xc6>
 8000ccc:	ea80 0001 	eor.w	r0, r0, r1
 8000cd0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd4:	4770      	bx	lr
 8000cd6:	f090 0f00 	teq	r0, #0
 8000cda:	bf17      	itett	ne
 8000cdc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce0:	4608      	moveq	r0, r1
 8000ce2:	f091 0f00 	teqne	r1, #0
 8000ce6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cea:	d014      	beq.n	8000d16 <__aeabi_fmul+0x15e>
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	d101      	bne.n	8000cf6 <__aeabi_fmul+0x13e>
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	d10f      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000cf6:	ea93 0f0c 	teq	r3, ip
 8000cfa:	d103      	bne.n	8000d04 <__aeabi_fmul+0x14c>
 8000cfc:	024b      	lsls	r3, r1, #9
 8000cfe:	bf18      	it	ne
 8000d00:	4608      	movne	r0, r1
 8000d02:	d108      	bne.n	8000d16 <__aeabi_fmul+0x15e>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d10:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d14:	4770      	bx	lr
 8000d16:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d1a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d1e:	4770      	bx	lr

08000d20 <__aeabi_fdiv>:
 8000d20:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d24:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d28:	bf1e      	ittt	ne
 8000d2a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d2e:	ea92 0f0c 	teqne	r2, ip
 8000d32:	ea93 0f0c 	teqne	r3, ip
 8000d36:	d069      	beq.n	8000e0c <__aeabi_fdiv+0xec>
 8000d38:	eba2 0203 	sub.w	r2, r2, r3
 8000d3c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d40:	0249      	lsls	r1, r1, #9
 8000d42:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d46:	d037      	beq.n	8000db8 <__aeabi_fdiv+0x98>
 8000d48:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d4c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d50:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d54:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	bf38      	it	cc
 8000d5c:	005b      	lslcc	r3, r3, #1
 8000d5e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d62:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf24      	itt	cs
 8000d6a:	1a5b      	subcs	r3, r3, r1
 8000d6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d70:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d74:	bf24      	itt	cs
 8000d76:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d7a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d7e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d82:	bf24      	itt	cs
 8000d84:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d88:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d8c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d90:	bf24      	itt	cs
 8000d92:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d96:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d9a:	011b      	lsls	r3, r3, #4
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000da2:	d1e0      	bne.n	8000d66 <__aeabi_fdiv+0x46>
 8000da4:	2afd      	cmp	r2, #253	; 0xfd
 8000da6:	f63f af50 	bhi.w	8000c4a <__aeabi_fmul+0x92>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db0:	bf08      	it	eq
 8000db2:	f020 0001 	biceq.w	r0, r0, #1
 8000db6:	4770      	bx	lr
 8000db8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dbc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc0:	327f      	adds	r2, #127	; 0x7f
 8000dc2:	bfc2      	ittt	gt
 8000dc4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dcc:	4770      	bxgt	lr
 8000dce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd2:	f04f 0300 	mov.w	r3, #0
 8000dd6:	3a01      	subs	r2, #1
 8000dd8:	e737      	b.n	8000c4a <__aeabi_fmul+0x92>
 8000dda:	f092 0f00 	teq	r2, #0
 8000dde:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000de2:	bf02      	ittt	eq
 8000de4:	0040      	lsleq	r0, r0, #1
 8000de6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dea:	3a01      	subeq	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <__aeabi_fdiv+0xc2>
 8000dee:	ea40 000c 	orr.w	r0, r0, ip
 8000df2:	f093 0f00 	teq	r3, #0
 8000df6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dfa:	bf02      	ittt	eq
 8000dfc:	0049      	lsleq	r1, r1, #1
 8000dfe:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e02:	3b01      	subeq	r3, #1
 8000e04:	d0f9      	beq.n	8000dfa <__aeabi_fdiv+0xda>
 8000e06:	ea41 010c 	orr.w	r1, r1, ip
 8000e0a:	e795      	b.n	8000d38 <__aeabi_fdiv+0x18>
 8000e0c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e10:	ea92 0f0c 	teq	r2, ip
 8000e14:	d108      	bne.n	8000e28 <__aeabi_fdiv+0x108>
 8000e16:	0242      	lsls	r2, r0, #9
 8000e18:	f47f af7d 	bne.w	8000d16 <__aeabi_fmul+0x15e>
 8000e1c:	ea93 0f0c 	teq	r3, ip
 8000e20:	f47f af70 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e776      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e28:	ea93 0f0c 	teq	r3, ip
 8000e2c:	d104      	bne.n	8000e38 <__aeabi_fdiv+0x118>
 8000e2e:	024b      	lsls	r3, r1, #9
 8000e30:	f43f af4c 	beq.w	8000ccc <__aeabi_fmul+0x114>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e76e      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e38:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e3c:	bf18      	it	ne
 8000e3e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e42:	d1ca      	bne.n	8000dda <__aeabi_fdiv+0xba>
 8000e44:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e48:	f47f af5c 	bne.w	8000d04 <__aeabi_fmul+0x14c>
 8000e4c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e50:	f47f af3c 	bne.w	8000ccc <__aeabi_fmul+0x114>
 8000e54:	e75f      	b.n	8000d16 <__aeabi_fmul+0x15e>
 8000e56:	bf00      	nop

08000e58 <__aeabi_f2iz>:
 8000e58:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e5c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e60:	d30f      	bcc.n	8000e82 <__aeabi_f2iz+0x2a>
 8000e62:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e66:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e6a:	d90d      	bls.n	8000e88 <__aeabi_f2iz+0x30>
 8000e6c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e74:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e78:	fa23 f002 	lsr.w	r0, r3, r2
 8000e7c:	bf18      	it	ne
 8000e7e:	4240      	negne	r0, r0
 8000e80:	4770      	bx	lr
 8000e82:	f04f 0000 	mov.w	r0, #0
 8000e86:	4770      	bx	lr
 8000e88:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e8c:	d101      	bne.n	8000e92 <__aeabi_f2iz+0x3a>
 8000e8e:	0242      	lsls	r2, r0, #9
 8000e90:	d105      	bne.n	8000e9e <__aeabi_f2iz+0x46>
 8000e92:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e96:	bf08      	it	eq
 8000e98:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e9c:	4770      	bx	lr
 8000e9e:	f04f 0000 	mov.w	r0, #0
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_f2uiz>:
 8000ea4:	0042      	lsls	r2, r0, #1
 8000ea6:	d20e      	bcs.n	8000ec6 <__aeabi_f2uiz+0x22>
 8000ea8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000eac:	d30b      	bcc.n	8000ec6 <__aeabi_f2uiz+0x22>
 8000eae:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000eb2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000eb6:	d409      	bmi.n	8000ecc <__aeabi_f2uiz+0x28>
 8000eb8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec0:	fa23 f002 	lsr.w	r0, r3, r2
 8000ec4:	4770      	bx	lr
 8000ec6:	f04f 0000 	mov.w	r0, #0
 8000eca:	4770      	bx	lr
 8000ecc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000ed0:	d101      	bne.n	8000ed6 <__aeabi_f2uiz+0x32>
 8000ed2:	0242      	lsls	r2, r0, #9
 8000ed4:	d102      	bne.n	8000edc <__aeabi_f2uiz+0x38>
 8000ed6:	f04f 30ff 	mov.w	r0, #4294967295
 8000eda:	4770      	bx	lr
 8000edc:	f04f 0000 	mov.w	r0, #0
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <BMP_i2c_init>:

/////////////////////////////////////////////////////////////
static I2C_HandleTypeDef *BMP_hi2c;

void BMP_i2c_init(I2C_HandleTypeDef *hi2c)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	6078      	str	r0, [r7, #4]
	BMP_hi2c = hi2c;
 8000eec:	4a44      	ldr	r2, [pc, #272]	; (8001000 <BMP_i2c_init+0x11c>)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6013      	str	r3, [r2, #0]

    uint8_t buf2[22];
    BMP_readBytes(devAddr, BMP_RA_AC1_H, 22, buf2, 1000);
 8000ef2:	4b44      	ldr	r3, [pc, #272]	; (8001004 <BMP_i2c_init+0x120>)
 8000ef4:	7818      	ldrb	r0, [r3, #0]
 8000ef6:	f107 0208 	add.w	r2, r7, #8
 8000efa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	4613      	mov	r3, r2
 8000f02:	2216      	movs	r2, #22
 8000f04:	21aa      	movs	r1, #170	; 0xaa
 8000f06:	f000 f895 	bl	8001034 <BMP_readBytes>
    ac1 = ((int16_t)buf2[0] << 8) + buf2[1];
 8000f0a:	7a3b      	ldrb	r3, [r7, #8]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	7a7b      	ldrb	r3, [r7, #9]
 8000f14:	b29b      	uxth	r3, r3
 8000f16:	4413      	add	r3, r2
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	b21a      	sxth	r2, r3
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	; (8001008 <BMP_i2c_init+0x124>)
 8000f1e:	801a      	strh	r2, [r3, #0]
    ac2 = ((int16_t)buf2[2] << 8) + buf2[3];
 8000f20:	7abb      	ldrb	r3, [r7, #10]
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	7afb      	ldrb	r3, [r7, #11]
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	b21a      	sxth	r2, r3
 8000f32:	4b36      	ldr	r3, [pc, #216]	; (800100c <BMP_i2c_init+0x128>)
 8000f34:	801a      	strh	r2, [r3, #0]
    ac3 = ((int16_t)buf2[4] << 8) + buf2[5];
 8000f36:	7b3b      	ldrb	r3, [r7, #12]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	4413      	add	r3, r2
 8000f44:	b29b      	uxth	r3, r3
 8000f46:	b21a      	sxth	r2, r3
 8000f48:	4b31      	ldr	r3, [pc, #196]	; (8001010 <BMP_i2c_init+0x12c>)
 8000f4a:	801a      	strh	r2, [r3, #0]
    ac4 = ((uint16_t)buf2[6] << 8) + buf2[7];
 8000f4c:	7bbb      	ldrb	r3, [r7, #14]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	4413      	add	r3, r2
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b2d      	ldr	r3, [pc, #180]	; (8001014 <BMP_i2c_init+0x130>)
 8000f5e:	801a      	strh	r2, [r3, #0]
    ac5 = ((uint16_t)buf2[8] << 8) + buf2[9];
 8000f60:	7c3b      	ldrb	r3, [r7, #16]
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	021b      	lsls	r3, r3, #8
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	7c7b      	ldrb	r3, [r7, #17]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	4413      	add	r3, r2
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b29      	ldr	r3, [pc, #164]	; (8001018 <BMP_i2c_init+0x134>)
 8000f72:	801a      	strh	r2, [r3, #0]
    ac6 = ((uint16_t)buf2[10] << 8) + buf2[11];
 8000f74:	7cbb      	ldrb	r3, [r7, #18]
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	021b      	lsls	r3, r3, #8
 8000f7a:	b29a      	uxth	r2, r3
 8000f7c:	7cfb      	ldrb	r3, [r7, #19]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	4413      	add	r3, r2
 8000f82:	b29a      	uxth	r2, r3
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <BMP_i2c_init+0x138>)
 8000f86:	801a      	strh	r2, [r3, #0]
    b1 = ((int16_t)buf2[12] << 8) + buf2[13];
 8000f88:	7d3b      	ldrb	r3, [r7, #20]
 8000f8a:	b29b      	uxth	r3, r3
 8000f8c:	021b      	lsls	r3, r3, #8
 8000f8e:	b29a      	uxth	r2, r3
 8000f90:	7d7b      	ldrb	r3, [r7, #21]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	b21a      	sxth	r2, r3
 8000f9a:	4b21      	ldr	r3, [pc, #132]	; (8001020 <BMP_i2c_init+0x13c>)
 8000f9c:	801a      	strh	r2, [r3, #0]
    b2 = ((int16_t)buf2[14] << 8) + buf2[15];
 8000f9e:	7dbb      	ldrb	r3, [r7, #22]
 8000fa0:	b29b      	uxth	r3, r3
 8000fa2:	021b      	lsls	r3, r3, #8
 8000fa4:	b29a      	uxth	r2, r3
 8000fa6:	7dfb      	ldrb	r3, [r7, #23]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	4413      	add	r3, r2
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	4b1c      	ldr	r3, [pc, #112]	; (8001024 <BMP_i2c_init+0x140>)
 8000fb2:	801a      	strh	r2, [r3, #0]
    mb = ((int16_t)buf2[16] << 8) + buf2[17];
 8000fb4:	7e3b      	ldrb	r3, [r7, #24]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	021b      	lsls	r3, r3, #8
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	7e7b      	ldrb	r3, [r7, #25]
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	b29b      	uxth	r3, r3
 8000fc4:	b21a      	sxth	r2, r3
 8000fc6:	4b18      	ldr	r3, [pc, #96]	; (8001028 <BMP_i2c_init+0x144>)
 8000fc8:	801a      	strh	r2, [r3, #0]
    mc = ((int16_t)buf2[18] << 8) + buf2[19];
 8000fca:	7ebb      	ldrb	r3, [r7, #26]
 8000fcc:	b29b      	uxth	r3, r3
 8000fce:	021b      	lsls	r3, r3, #8
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	7efb      	ldrb	r3, [r7, #27]
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	b21a      	sxth	r2, r3
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <BMP_i2c_init+0x148>)
 8000fde:	801a      	strh	r2, [r3, #0]
    md = ((int16_t)buf2[20] << 8) + buf2[21];
 8000fe0:	7f3b      	ldrb	r3, [r7, #28]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	021b      	lsls	r3, r3, #8
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	7f7b      	ldrb	r3, [r7, #29]
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	4413      	add	r3, r2
 8000fee:	b29b      	uxth	r3, r3
 8000ff0:	b21a      	sxth	r2, r3
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <BMP_i2c_init+0x14c>)
 8000ff4:	801a      	strh	r2, [r3, #0]
}
 8000ff6:	bf00      	nop
 8000ff8:	3720      	adds	r7, #32
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000b8 	.word	0x200000b8
 8001004:	20000000 	.word	0x20000000
 8001008:	20000098 	.word	0x20000098
 800100c:	2000009a 	.word	0x2000009a
 8001010:	2000009c 	.word	0x2000009c
 8001014:	200000a8 	.word	0x200000a8
 8001018:	200000aa 	.word	0x200000aa
 800101c:	200000ac 	.word	0x200000ac
 8001020:	2000009e 	.word	0x2000009e
 8001024:	200000a0 	.word	0x200000a0
 8001028:	200000a2 	.word	0x200000a2
 800102c:	200000a4 	.word	0x200000a4
 8001030:	200000a6 	.word	0x200000a6

08001034 <BMP_readBytes>:

void BMP_readBytes(uint8_t devAddr, uint8_t regAddr, uint8_t length, uint8_t *data, uint16_t timeout)
{
 8001034:	b5b0      	push	{r4, r5, r7, lr}
 8001036:	b08e      	sub	sp, #56	; 0x38
 8001038:	af02      	add	r7, sp, #8
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
 8001040:	460b      	mov	r3, r1
 8001042:	71bb      	strb	r3, [r7, #6]
 8001044:	4613      	mov	r3, r2
 8001046:	717b      	strb	r3, [r7, #5]
	uint32_t status = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t tout = timeout > 0 ? timeout : I2CDEV_DEFAULT_READ_TIMEOUT;
 800104c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <BMP_readBytes+0x26>
 8001054:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001058:	e001      	b.n	800105e <BMP_readBytes+0x2a>
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	857b      	strh	r3, [r7, #42]	; 0x2a
    status = HAL_I2C_Master_Transmit(BMP_hi2c, devAddr, &regAddr, 1, tout);
 8001060:	4b2c      	ldr	r3, [pc, #176]	; (8001114 <BMP_readBytes+0xe0>)
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	79fb      	ldrb	r3, [r7, #7]
 8001066:	b299      	uxth	r1, r3
 8001068:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800106a:	1dba      	adds	r2, r7, #6
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2301      	movs	r3, #1
 8001070:	f002 fc72 	bl	8003958 <HAL_I2C_Master_Transmit>
 8001074:	4603      	mov	r3, r0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(status != HAL_OK)
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	2b00      	cmp	r3, #0
 800107c:	d019      	beq.n	80010b2 <BMP_readBytes+0x7e>
	{
		char str[32] = {0,};
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	2220      	movs	r2, #32
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f009 fbf5 	bl	800a876 <memset>
		snprintf(str, 32, "HAL_I2C_Master_Transmit");
 800108c:	f107 0308 	add.w	r3, r7, #8
 8001090:	4a21      	ldr	r2, [pc, #132]	; (8001118 <BMP_readBytes+0xe4>)
 8001092:	461c      	mov	r4, r3
 8001094:	4615      	mov	r5, r2
 8001096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800109a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800109e:	e884 0003 	stmia.w	r4, {r0, r1}
		I2C_Error(str, status);
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010a8:	4618      	mov	r0, r3
 80010aa:	f000 fec3 	bl	8001e34 <I2C_Error>
		return;
 80010ae:	bf00      	nop
 80010b0:	e02c      	b.n	800110c <BMP_readBytes+0xd8>
	}

	status = HAL_I2C_Master_Receive(BMP_hi2c, devAddr, data, length, tout);
 80010b2:	4b18      	ldr	r3, [pc, #96]	; (8001114 <BMP_readBytes+0xe0>)
 80010b4:	6818      	ldr	r0, [r3, #0]
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	b299      	uxth	r1, r3
 80010ba:	797b      	ldrb	r3, [r7, #5]
 80010bc:	b29a      	uxth	r2, r3
 80010be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80010c0:	9300      	str	r3, [sp, #0]
 80010c2:	4613      	mov	r3, r2
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	f002 fd45 	bl	8003b54 <HAL_I2C_Master_Receive>
 80010ca:	4603      	mov	r3, r0
 80010cc:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(status != HAL_OK)
 80010ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d01b      	beq.n	800110c <BMP_readBytes+0xd8>
	{
		char str[32] = {0,};
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	2220      	movs	r2, #32
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f009 fbca 	bl	800a876 <memset>
		snprintf(str, 32, "HAL_I2C_Master_Receive");
 80010e2:	f107 0308 	add.w	r3, r7, #8
 80010e6:	4a0d      	ldr	r2, [pc, #52]	; (800111c <BMP_readBytes+0xe8>)
 80010e8:	461c      	mov	r4, r3
 80010ea:	4615      	mov	r5, r2
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010f4:	6020      	str	r0, [r4, #0]
 80010f6:	3404      	adds	r4, #4
 80010f8:	8021      	strh	r1, [r4, #0]
 80010fa:	3402      	adds	r4, #2
 80010fc:	0c0b      	lsrs	r3, r1, #16
 80010fe:	7023      	strb	r3, [r4, #0]
		I2C_Error(str, status);
 8001100:	f107 0308 	add.w	r3, r7, #8
 8001104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001106:	4618      	mov	r0, r3
 8001108:	f000 fe94 	bl	8001e34 <I2C_Error>
	}
}
 800110c:	3730      	adds	r7, #48	; 0x30
 800110e:	46bd      	mov	sp, r7
 8001110:	bdb0      	pop	{r4, r5, r7, pc}
 8001112:	bf00      	nop
 8001114:	200000b8 	.word	0x200000b8
 8001118:	0800b19c 	.word	0x0800b19c
 800111c:	0800b1b4 	.word	0x0800b1b4

08001120 <BMP_setControl>:

void BMP_setControl(uint8_t value)
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af04      	add	r7, sp, #16
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
	uint32_t status = HAL_I2C_Mem_Write(BMP_hi2c, devAddr, BMP_RA_CONTROL, I2C_MEMADD_SIZE_8BIT, &value, 1, 1000);
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <BMP_setControl+0x70>)
 800112c:	6818      	ldr	r0, [r3, #0]
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <BMP_setControl+0x74>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b299      	uxth	r1, r3
 8001134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001138:	9302      	str	r3, [sp, #8]
 800113a:	2301      	movs	r3, #1
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2301      	movs	r3, #1
 8001144:	22f4      	movs	r2, #244	; 0xf4
 8001146:	f003 f841 	bl	80041cc <HAL_I2C_Mem_Write>
 800114a:	4603      	mov	r3, r0
 800114c:	62fb      	str	r3, [r7, #44]	; 0x2c

	if(status == HAL_OK)
 800114e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001150:	2b00      	cmp	r3, #0
 8001152:	d103      	bne.n	800115c <BMP_setControl+0x3c>
	{
		measureMode = value;
 8001154:	79fa      	ldrb	r2, [r7, #7]
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <BMP_setControl+0x78>)
 8001158:	701a      	strb	r2, [r3, #0]
	{
		char str[32] = {0,};
		snprintf(str, 32, "HAL_I2C_Mem_Write");
		I2C_Error(str, status);
	}
}
 800115a:	e015      	b.n	8001188 <BMP_setControl+0x68>
		char str[32] = {0,};
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	2220      	movs	r2, #32
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f009 fb86 	bl	800a876 <memset>
		snprintf(str, 32, "HAL_I2C_Mem_Write");
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4a0b      	ldr	r2, [pc, #44]	; (800119c <BMP_setControl+0x7c>)
 8001170:	461c      	mov	r4, r3
 8001172:	4615      	mov	r5, r2
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	8023      	strh	r3, [r4, #0]
		I2C_Error(str, status);
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001182:	4618      	mov	r0, r3
 8001184:	f000 fe56 	bl	8001e34 <I2C_Error>
}
 8001188:	bf00      	nop
 800118a:	3730      	adds	r7, #48	; 0x30
 800118c:	46bd      	mov	sp, r7
 800118e:	bdb0      	pop	{r4, r5, r7, pc}
 8001190:	200000b8 	.word	0x200000b8
 8001194:	20000000 	.word	0x20000000
 8001198:	200000b4 	.word	0x200000b4
 800119c:	0800b1cc 	.word	0x0800b1cc

080011a0 <BMP_getMeasurement2>:

uint16_t BMP_getMeasurement2()
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af02      	add	r7, sp, #8
	BMP_readBytes(devAddr, BMP_RA_MSB, 2, buffer, 1000);
 80011a6:	4b0b      	ldr	r3, [pc, #44]	; (80011d4 <BMP_getMeasurement2+0x34>)
 80011a8:	7818      	ldrb	r0, [r3, #0]
 80011aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <BMP_getMeasurement2+0x38>)
 80011b2:	2202      	movs	r2, #2
 80011b4:	21f6      	movs	r1, #246	; 0xf6
 80011b6:	f7ff ff3d 	bl	8001034 <BMP_readBytes>
    return ((uint16_t) buffer[0] << 8) + buffer[1];
 80011ba:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <BMP_getMeasurement2+0x38>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	b29b      	uxth	r3, r3
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	b29a      	uxth	r2, r3
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <BMP_getMeasurement2+0x38>)
 80011c6:	785b      	ldrb	r3, [r3, #1]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4413      	add	r3, r2
 80011cc:	b29b      	uxth	r3, r3
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	20000094 	.word	0x20000094

080011dc <BMP_getMeasurement3>:

uint32_t BMP_getMeasurement3()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af02      	add	r7, sp, #8
	BMP_readBytes(devAddr, BMP_RA_MSB, 3, buffer, 1000);
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <BMP_getMeasurement3+0x34>)
 80011e4:	7818      	ldrb	r0, [r3, #0]
 80011e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	4b09      	ldr	r3, [pc, #36]	; (8001214 <BMP_getMeasurement3+0x38>)
 80011ee:	2203      	movs	r2, #3
 80011f0:	21f6      	movs	r1, #246	; 0xf6
 80011f2:	f7ff ff1f 	bl	8001034 <BMP_readBytes>
    return ((uint32_t)buffer[0] << 16) + ((uint16_t)buffer[1] << 8) + buffer[2];
 80011f6:	4b07      	ldr	r3, [pc, #28]	; (8001214 <BMP_getMeasurement3+0x38>)
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	041b      	lsls	r3, r3, #16
 80011fc:	4a05      	ldr	r2, [pc, #20]	; (8001214 <BMP_getMeasurement3+0x38>)
 80011fe:	7852      	ldrb	r2, [r2, #1]
 8001200:	0212      	lsls	r2, r2, #8
 8001202:	4413      	add	r3, r2
 8001204:	4a03      	ldr	r2, [pc, #12]	; (8001214 <BMP_getMeasurement3+0x38>)
 8001206:	7892      	ldrb	r2, [r2, #2]
 8001208:	4413      	add	r3, r2
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000
 8001214:	20000094 	.word	0x20000094

08001218 <BMP_getMeasureDelayMilliseconds>:

uint8_t BMP_getMeasureDelayMilliseconds(uint8_t mode)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	71fb      	strb	r3, [r7, #7]
    if (mode == 0) mode = measureMode;
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d102      	bne.n	800122e <BMP_getMeasureDelayMilliseconds+0x16>
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <BMP_getMeasureDelayMilliseconds+0x60>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	71fb      	strb	r3, [r7, #7]
    if (measureMode == 0x2E) return 5;
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <BMP_getMeasureDelayMilliseconds+0x60>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2b2e      	cmp	r3, #46	; 0x2e
 8001234:	d101      	bne.n	800123a <BMP_getMeasureDelayMilliseconds+0x22>
 8001236:	2305      	movs	r3, #5
 8001238:	e018      	b.n	800126c <BMP_getMeasureDelayMilliseconds+0x54>
    else if (measureMode == 0x34) return 5;
 800123a:	4b0f      	ldr	r3, [pc, #60]	; (8001278 <BMP_getMeasureDelayMilliseconds+0x60>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	2b34      	cmp	r3, #52	; 0x34
 8001240:	d101      	bne.n	8001246 <BMP_getMeasureDelayMilliseconds+0x2e>
 8001242:	2305      	movs	r3, #5
 8001244:	e012      	b.n	800126c <BMP_getMeasureDelayMilliseconds+0x54>
    else if (measureMode == 0x74) return 8;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <BMP_getMeasureDelayMilliseconds+0x60>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b74      	cmp	r3, #116	; 0x74
 800124c:	d101      	bne.n	8001252 <BMP_getMeasureDelayMilliseconds+0x3a>
 800124e:	2308      	movs	r3, #8
 8001250:	e00c      	b.n	800126c <BMP_getMeasureDelayMilliseconds+0x54>
    else if (measureMode == 0xB4) return 14;
 8001252:	4b09      	ldr	r3, [pc, #36]	; (8001278 <BMP_getMeasureDelayMilliseconds+0x60>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2bb4      	cmp	r3, #180	; 0xb4
 8001258:	d101      	bne.n	800125e <BMP_getMeasureDelayMilliseconds+0x46>
 800125a:	230e      	movs	r3, #14
 800125c:	e006      	b.n	800126c <BMP_getMeasureDelayMilliseconds+0x54>
    else if (measureMode == 0xF4) return 26;
 800125e:	4b06      	ldr	r3, [pc, #24]	; (8001278 <BMP_getMeasureDelayMilliseconds+0x60>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2bf4      	cmp	r3, #244	; 0xf4
 8001264:	d101      	bne.n	800126a <BMP_getMeasureDelayMilliseconds+0x52>
 8001266:	231a      	movs	r3, #26
 8001268:	e000      	b.n	800126c <BMP_getMeasureDelayMilliseconds+0x54>
    return 0;
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	bc80      	pop	{r7}
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	200000b4 	.word	0x200000b4

0800127c <BMP_getRawTemperature>:

uint16_t BMP_getRawTemperature()
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
    if (measureMode == 0x2E) return BMP_getMeasurement2();
 8001280:	4b05      	ldr	r3, [pc, #20]	; (8001298 <BMP_getRawTemperature+0x1c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b2e      	cmp	r3, #46	; 0x2e
 8001286:	d103      	bne.n	8001290 <BMP_getRawTemperature+0x14>
 8001288:	f7ff ff8a 	bl	80011a0 <BMP_getMeasurement2>
 800128c:	4603      	mov	r3, r0
 800128e:	e000      	b.n	8001292 <BMP_getRawTemperature+0x16>
    return 0;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200000b4 	.word	0x200000b4

0800129c <BMP_getTemperatureC>:

float BMP_getTemperatureC()
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
    int32_t ut = BMP_getRawTemperature();
 80012a2:	f7ff ffeb 	bl	800127c <BMP_getRawTemperature>
 80012a6:	4603      	mov	r3, r0
 80012a8:	60fb      	str	r3, [r7, #12]
    int32_t x1 = ((ut - (int32_t)ac6) * (int32_t)ac5) >> 15;
 80012aa:	4b17      	ldr	r3, [pc, #92]	; (8001308 <BMP_getTemperatureC+0x6c>)
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	461a      	mov	r2, r3
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	1a9b      	subs	r3, r3, r2
 80012b4:	4a15      	ldr	r2, [pc, #84]	; (800130c <BMP_getTemperatureC+0x70>)
 80012b6:	8812      	ldrh	r2, [r2, #0]
 80012b8:	fb02 f303 	mul.w	r3, r2, r3
 80012bc:	13db      	asrs	r3, r3, #15
 80012be:	60bb      	str	r3, [r7, #8]
    int32_t x2 = ((int32_t)mc << 11) / (x1 + md);
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <BMP_getTemperatureC+0x74>)
 80012c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c6:	02da      	lsls	r2, r3, #11
 80012c8:	4b12      	ldr	r3, [pc, #72]	; (8001314 <BMP_getTemperatureC+0x78>)
 80012ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ce:	4619      	mov	r1, r3
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	440b      	add	r3, r1
 80012d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80012d8:	607b      	str	r3, [r7, #4]
    b5 = x1 + x2;
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4413      	add	r3, r2
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <BMP_getTemperatureC+0x7c>)
 80012e2:	6013      	str	r3, [r2, #0]
    return (float)((b5 + 8) >> 4) / 10.0f;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <BMP_getTemperatureC+0x7c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	3308      	adds	r3, #8
 80012ea:	111b      	asrs	r3, r3, #4
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fc0f 	bl	8000b10 <__aeabi_i2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4909      	ldr	r1, [pc, #36]	; (800131c <BMP_getTemperatureC+0x80>)
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fd12 	bl	8000d20 <__aeabi_fdiv>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	200000ac 	.word	0x200000ac
 800130c:	200000aa 	.word	0x200000aa
 8001310:	200000a4 	.word	0x200000a4
 8001314:	200000a6 	.word	0x200000a6
 8001318:	200000b0 	.word	0x200000b0
 800131c:	41200000 	.word	0x41200000

08001320 <BMP_getRawPressure>:


uint32_t BMP_getRawPressure()
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
    if (measureMode & 0x34) return BMP_getMeasurement3() >> (8 - ((measureMode & 0xC0) >> 6));
 8001324:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <BMP_getRawPressure+0x30>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	f003 0334 	and.w	r3, r3, #52	; 0x34
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <BMP_getRawPressure+0x28>
 8001330:	f7ff ff54 	bl	80011dc <BMP_getMeasurement3>
 8001334:	4602      	mov	r2, r0
 8001336:	4b06      	ldr	r3, [pc, #24]	; (8001350 <BMP_getRawPressure+0x30>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	099b      	lsrs	r3, r3, #6
 800133c:	b2db      	uxtb	r3, r3
 800133e:	f1c3 0308 	rsb	r3, r3, #8
 8001342:	fa22 f303 	lsr.w	r3, r2, r3
 8001346:	e000      	b.n	800134a <BMP_getRawPressure+0x2a>
    return 0;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200000b4 	.word	0x200000b4

08001354 <BMP_getPressure>:

float BMP_getPressure()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
    uint32_t up = BMP_getRawPressure();
 800135a:	f7ff ffe1 	bl	8001320 <BMP_getRawPressure>
 800135e:	6238      	str	r0, [r7, #32]
    uint8_t oss = (measureMode & 0xC0) >> 6;
 8001360:	4b49      	ldr	r3, [pc, #292]	; (8001488 <BMP_getPressure+0x134>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	099b      	lsrs	r3, r3, #6
 8001366:	77fb      	strb	r3, [r7, #31]
    int32_t p;
    int32_t b6 = b5 - 4000;
 8001368:	4b48      	ldr	r3, [pc, #288]	; (800148c <BMP_getPressure+0x138>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 8001370:	61bb      	str	r3, [r7, #24]
    int32_t x1 = ((int32_t)b2 * ((b6 * b6) >> 12)) >> 11;
 8001372:	4b47      	ldr	r3, [pc, #284]	; (8001490 <BMP_getPressure+0x13c>)
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	4619      	mov	r1, r3
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	131b      	asrs	r3, r3, #12
 8001384:	fb03 f301 	mul.w	r3, r3, r1
 8001388:	12db      	asrs	r3, r3, #11
 800138a:	617b      	str	r3, [r7, #20]
    int32_t x2 = ((int32_t)ac2 * b6) >> 11;
 800138c:	4b41      	ldr	r3, [pc, #260]	; (8001494 <BMP_getPressure+0x140>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	461a      	mov	r2, r3
 8001394:	69bb      	ldr	r3, [r7, #24]
 8001396:	fb03 f302 	mul.w	r3, r3, r2
 800139a:	12db      	asrs	r3, r3, #11
 800139c:	613b      	str	r3, [r7, #16]
    int32_t x3 = x1 + x2;
 800139e:	697a      	ldr	r2, [r7, #20]
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
    int32_t b3 = ((((int32_t)ac1 * 4 + x3) << oss) + 2) >> 2;
 80013a6:	4b3c      	ldr	r3, [pc, #240]	; (8001498 <BMP_getPressure+0x144>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	009a      	lsls	r2, r3, #2
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	441a      	add	r2, r3
 80013b2:	7ffb      	ldrb	r3, [r7, #31]
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	3302      	adds	r3, #2
 80013ba:	109b      	asrs	r3, r3, #2
 80013bc:	60bb      	str	r3, [r7, #8]
    x1 = ((int32_t)ac3 * b6) >> 13;
 80013be:	4b37      	ldr	r3, [pc, #220]	; (800149c <BMP_getPressure+0x148>)
 80013c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c4:	461a      	mov	r2, r3
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	fb03 f302 	mul.w	r3, r3, r2
 80013cc:	135b      	asrs	r3, r3, #13
 80013ce:	617b      	str	r3, [r7, #20]
    x2 = ((int32_t)b1 * ((b6 * b6) >> 12)) >> 16;
 80013d0:	4b33      	ldr	r3, [pc, #204]	; (80014a0 <BMP_getPressure+0x14c>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	4619      	mov	r1, r3
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	fb02 f303 	mul.w	r3, r2, r3
 80013e0:	131b      	asrs	r3, r3, #12
 80013e2:	fb03 f301 	mul.w	r3, r3, r1
 80013e6:	141b      	asrs	r3, r3, #16
 80013e8:	613b      	str	r3, [r7, #16]
    x3 = ((x1 + x2) + 2) >> 2;
 80013ea:	697a      	ldr	r2, [r7, #20]
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	4413      	add	r3, r2
 80013f0:	3302      	adds	r3, #2
 80013f2:	109b      	asrs	r3, r3, #2
 80013f4:	60fb      	str	r3, [r7, #12]
    uint32_t b4 = ((uint32_t)ac4 * (uint32_t)(x3 + 32768)) >> 15;
 80013f6:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <BMP_getPressure+0x150>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	461a      	mov	r2, r3
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001402:	fb03 f302 	mul.w	r3, r3, r2
 8001406:	0bdb      	lsrs	r3, r3, #15
 8001408:	607b      	str	r3, [r7, #4]
    uint32_t b7 = ((uint32_t)up - b3) * (uint32_t)(50000UL >> oss);
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	6a3a      	ldr	r2, [r7, #32]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	7ffa      	ldrb	r2, [r7, #31]
 8001412:	f24c 3150 	movw	r1, #50000	; 0xc350
 8001416:	fa21 f202 	lsr.w	r2, r1, r2
 800141a:	fb02 f303 	mul.w	r3, r2, r3
 800141e:	603b      	str	r3, [r7, #0]

    if (b7 < 0x80000000)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	2b00      	cmp	r3, #0
 8001424:	db06      	blt.n	8001434 <BMP_getPressure+0xe0>
    {
        p = (b7 << 1) / b4;
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	005a      	lsls	r2, r3, #1
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
 8001432:	e005      	b.n	8001440 <BMP_getPressure+0xec>
    }
    else
    {
        p = (b7 / b4) << 1;
 8001434:	683a      	ldr	r2, [r7, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    x1 = (p >> 8) * (p >> 8);
 8001440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001442:	121b      	asrs	r3, r3, #8
 8001444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001446:	1212      	asrs	r2, r2, #8
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	617b      	str	r3, [r7, #20]
    x1 = (x1 * 3038) >> 16;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f640 32de 	movw	r2, #3038	; 0xbde
 8001454:	fb02 f303 	mul.w	r3, r2, r3
 8001458:	141b      	asrs	r3, r3, #16
 800145a:	617b      	str	r3, [r7, #20]
    x2 = (-7357 * p) >> 16;
 800145c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <BMP_getPressure+0x154>)
 8001460:	fb02 f303 	mul.w	r3, r2, r3
 8001464:	141b      	asrs	r3, r3, #16
 8001466:	613b      	str	r3, [r7, #16]
    return p + ((x1 + x2 + (int32_t)3791) >> 4);
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4413      	add	r3, r2
 800146e:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 8001472:	111a      	asrs	r2, r3, #4
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	4413      	add	r3, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fb49 	bl	8000b10 <__aeabi_i2f>
 800147e:	4603      	mov	r3, r0
}
 8001480:	4618      	mov	r0, r3
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200000b4 	.word	0x200000b4
 800148c:	200000b0 	.word	0x200000b0
 8001490:	200000a0 	.word	0x200000a0
 8001494:	2000009a 	.word	0x2000009a
 8001498:	20000098 	.word	0x20000098
 800149c:	2000009c 	.word	0x2000009c
 80014a0:	2000009e 	.word	0x2000009e
 80014a4:	200000a8 	.word	0x200000a8
 80014a8:	ffffe343 	.word	0xffffe343

080014ac <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bc80      	pop	{r7}
 80014be:	4770      	bx	lr

080014c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4a06      	ldr	r2, [pc, #24]	; (80014e8 <vApplicationGetIdleTaskMemory+0x28>)
 80014d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80014d2:	68bb      	ldr	r3, [r7, #8]
 80014d4:	4a05      	ldr	r2, [pc, #20]	; (80014ec <vApplicationGetIdleTaskMemory+0x2c>)
 80014d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2240      	movs	r2, #64	; 0x40
 80014dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	200000bc 	.word	0x200000bc
 80014ec:	20000110 	.word	0x20000110

080014f0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];
  
void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )  
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	60f8      	str	r0, [r7, #12]
 80014f8:	60b9      	str	r1, [r7, #8]
 80014fa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a06      	ldr	r2, [pc, #24]	; (8001518 <vApplicationGetTimerTaskMemory+0x28>)
 8001500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001502:	68bb      	ldr	r3, [r7, #8]
 8001504:	4a05      	ldr	r2, [pc, #20]	; (800151c <vApplicationGetTimerTaskMemory+0x2c>)
 8001506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2240      	movs	r2, #64	; 0x40
 800150c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	bc80      	pop	{r7}
 8001516:	4770      	bx	lr
 8001518:	20000210 	.word	0x20000210
 800151c:	20000264 	.word	0x20000264

08001520 <lcdInit>:
 * @param  address Display I2C 7-bit address
 * @param  lines   Number of lines of display
 * @param  columns Number of colums
 * @return         true if success
 */
bool lcdInit(I2C_HandleTypeDef *hi2c, uint8_t address, uint8_t lines, uint8_t columns) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b086      	sub	sp, #24
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4603      	mov	r3, r0
 8001530:	70fb      	strb	r3, [r7, #3]
 8001532:	460b      	mov	r3, r1
 8001534:	70bb      	strb	r3, [r7, #2]
 8001536:	4613      	mov	r3, r2
 8001538:	707b      	strb	r3, [r7, #1]

    TickType_t xLastWakeTime;

    uint8_t lcdData = LCD_BIT_5x8DOTS;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]

    lcdParams.hi2c      = hi2c;
 800153e:	4a4f      	ldr	r2, [pc, #316]	; (800167c <lcdInit+0x15c>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6013      	str	r3, [r2, #0]
    lcdParams.address   = address << 1;
 8001544:	78fb      	ldrb	r3, [r7, #3]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b4c      	ldr	r3, [pc, #304]	; (800167c <lcdInit+0x15c>)
 800154c:	719a      	strb	r2, [r3, #6]
    lcdParams.lines     = lines;
 800154e:	4a4b      	ldr	r2, [pc, #300]	; (800167c <lcdInit+0x15c>)
 8001550:	78bb      	ldrb	r3, [r7, #2]
 8001552:	7113      	strb	r3, [r2, #4]
    lcdParams.columns   = columns;
 8001554:	4a49      	ldr	r2, [pc, #292]	; (800167c <lcdInit+0x15c>)
 8001556:	787b      	ldrb	r3, [r7, #1]
 8001558:	7153      	strb	r3, [r2, #5]
    lcdParams.backlight = LCD_BIT_BACKIGHT_ON;
 800155a:	4b48      	ldr	r3, [pc, #288]	; (800167c <lcdInit+0x15c>)
 800155c:	2208      	movs	r2, #8
 800155e:	71da      	strb	r2, [r3, #7]

    lcdCommandBuffer[0] = LCD_BIT_E | (0x03 << 4);
 8001560:	4b47      	ldr	r3, [pc, #284]	; (8001680 <lcdInit+0x160>)
 8001562:	2234      	movs	r2, #52	; 0x34
 8001564:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 8001566:	4b46      	ldr	r3, [pc, #280]	; (8001680 <lcdInit+0x160>)
 8001568:	781a      	ldrb	r2, [r3, #0]
 800156a:	4b45      	ldr	r3, [pc, #276]	; (8001680 <lcdInit+0x160>)
 800156c:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = (0x03 << 4);
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <lcdInit+0x160>)
 8001570:	2230      	movs	r2, #48	; 0x30
 8001572:	709a      	strb	r2, [r3, #2]

    /* First 3 steps of init cycles. They are the same. */
    for (uint8_t i = 0; i < 3; ++i) {
 8001574:	2300      	movs	r3, #0
 8001576:	75fb      	strb	r3, [r7, #23]
 8001578:	e030      	b.n	80015dc <lcdInit+0xbc>
        if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 800157a:	4b40      	ldr	r3, [pc, #256]	; (800167c <lcdInit+0x15c>)
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	4b3f      	ldr	r3, [pc, #252]	; (800167c <lcdInit+0x15c>)
 8001580:	799b      	ldrb	r3, [r3, #6]
 8001582:	b299      	uxth	r1, r3
 8001584:	2303      	movs	r3, #3
 8001586:	4a3e      	ldr	r2, [pc, #248]	; (8001680 <lcdInit+0x160>)
 8001588:	f002 fd12 	bl	8003fb0 <HAL_I2C_Master_Transmit_DMA>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <lcdInit+0x76>
            return false;
 8001592:	2300      	movs	r3, #0
 8001594:	e06d      	b.n	8001672 <lcdInit+0x152>
        }

        xLastWakeTime = xTaskGetTickCount();
 8001596:	f007 fdbf 	bl	8009118 <xTaskGetTickCount>
 800159a:	4603      	mov	r3, r0
 800159c:	613b      	str	r3, [r7, #16]

        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 800159e:	e002      	b.n	80015a6 <lcdInit+0x86>
            vTaskDelay(1);
 80015a0:	2001      	movs	r0, #1
 80015a2:	f007 fc77 	bl	8008e94 <vTaskDelay>
        while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80015a6:	4b35      	ldr	r3, [pc, #212]	; (800167c <lcdInit+0x15c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f003 f979 	bl	80048a2 <HAL_I2C_GetState>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b20      	cmp	r3, #32
 80015b4:	d1f4      	bne.n	80015a0 <lcdInit+0x80>
        }

        if (i == 2) {
 80015b6:	7dfb      	ldrb	r3, [r7, #23]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d106      	bne.n	80015ca <lcdInit+0xaa>
            // For the last cycle delay is less then 1 ms (100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)1);
 80015bc:	f107 0310 	add.w	r3, r7, #16
 80015c0:	2101      	movs	r1, #1
 80015c2:	4618      	mov	r0, r3
 80015c4:	f007 fbec 	bl	8008da0 <vTaskDelayUntil>
 80015c8:	e005      	b.n	80015d6 <lcdInit+0xb6>
        } else {
            // For first 2 cycles delay is less then 5ms (4100us by datasheet)
            vTaskDelayUntil(&xLastWakeTime, (TickType_t)5);
 80015ca:	f107 0310 	add.w	r3, r7, #16
 80015ce:	2105      	movs	r1, #5
 80015d0:	4618      	mov	r0, r3
 80015d2:	f007 fbe5 	bl	8008da0 <vTaskDelayUntil>
    for (uint8_t i = 0; i < 3; ++i) {
 80015d6:	7dfb      	ldrb	r3, [r7, #23]
 80015d8:	3301      	adds	r3, #1
 80015da:	75fb      	strb	r3, [r7, #23]
 80015dc:	7dfb      	ldrb	r3, [r7, #23]
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d9cb      	bls.n	800157a <lcdInit+0x5a>
        }
    }

    /* Lets turn to 4-bit at least */
    lcdCommandBuffer[0] = LCD_BIT_BACKIGHT_ON | LCD_BIT_E | (LCD_MODE_4BITS << 4);
 80015e2:	4b27      	ldr	r3, [pc, #156]	; (8001680 <lcdInit+0x160>)
 80015e4:	222c      	movs	r2, #44	; 0x2c
 80015e6:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];
 80015e8:	4b25      	ldr	r3, [pc, #148]	; (8001680 <lcdInit+0x160>)
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	4b24      	ldr	r3, [pc, #144]	; (8001680 <lcdInit+0x160>)
 80015ee:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = LCD_BIT_BACKIGHT_ON | (LCD_MODE_4BITS << 4);
 80015f0:	4b23      	ldr	r3, [pc, #140]	; (8001680 <lcdInit+0x160>)
 80015f2:	2228      	movs	r2, #40	; 0x28
 80015f4:	709a      	strb	r2, [r3, #2]

    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 3) != HAL_OK) {
 80015f6:	4b21      	ldr	r3, [pc, #132]	; (800167c <lcdInit+0x15c>)
 80015f8:	6818      	ldr	r0, [r3, #0]
 80015fa:	4b20      	ldr	r3, [pc, #128]	; (800167c <lcdInit+0x15c>)
 80015fc:	799b      	ldrb	r3, [r3, #6]
 80015fe:	b299      	uxth	r1, r3
 8001600:	2303      	movs	r3, #3
 8001602:	4a1f      	ldr	r2, [pc, #124]	; (8001680 <lcdInit+0x160>)
 8001604:	f002 fcd4 	bl	8003fb0 <HAL_I2C_Master_Transmit_DMA>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d004      	beq.n	8001618 <lcdInit+0xf8>
        return false;
 800160e:	2300      	movs	r3, #0
 8001610:	e02f      	b.n	8001672 <lcdInit+0x152>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 8001612:	2001      	movs	r0, #1
 8001614:	f007 fc3e 	bl	8008e94 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <lcdInit+0x15c>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f003 f940 	bl	80048a2 <HAL_I2C_GetState>
 8001622:	4603      	mov	r3, r0
 8001624:	2b20      	cmp	r3, #32
 8001626:	d1f4      	bne.n	8001612 <lcdInit+0xf2>
    }

    /* Lets set display params */
    /* First of all lets set display size */
    lcdData |= LCD_MODE_4BITS;
 8001628:	7bfb      	ldrb	r3, [r7, #15]
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	b2db      	uxtb	r3, r3
 8001630:	73fb      	strb	r3, [r7, #15]

    if (lcdParams.lines > 1) {
 8001632:	4b12      	ldr	r3, [pc, #72]	; (800167c <lcdInit+0x15c>)
 8001634:	791b      	ldrb	r3, [r3, #4]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d904      	bls.n	8001644 <lcdInit+0x124>
        lcdData |= LCD_BIT_2LINE;
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	b2db      	uxtb	r3, r3
 8001642:	73fb      	strb	r3, [r7, #15]
    }

    lcdWriteByte((uint8_t)0x00, &lcdData);  // TODO: Make 5x10 dots font usable for some 1-line display
 8001644:	f107 030f 	add.w	r3, r7, #15
 8001648:	4619      	mov	r1, r3
 800164a:	2000      	movs	r0, #0
 800164c:	f000 f962 	bl	8001914 <lcdWriteByte>

    /* Now lets set display, cursor and blink all on */
    lcdDisplayOn();
 8001650:	2101      	movs	r1, #1
 8001652:	2001      	movs	r0, #1
 8001654:	f000 f816 	bl	8001684 <lcdCommand>

    /* Set cursor moving to the right */
    lcdCursorDirToRight();
 8001658:	2101      	movs	r1, #1
 800165a:	2007      	movs	r0, #7
 800165c:	f000 f812 	bl	8001684 <lcdCommand>

    /* Clear display and Set cursor at Home */
    lcdDisplayClear();
 8001660:	2101      	movs	r1, #1
 8001662:	2002      	movs	r0, #2
 8001664:	f000 f80e 	bl	8001684 <lcdCommand>
    lcdCursorHome();
 8001668:	2101      	movs	r1, #1
 800166a:	2005      	movs	r0, #5
 800166c:	f000 f80a 	bl	8001684 <lcdCommand>

    return true;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000036c 	.word	0x2000036c
 8001680:	20000364 	.word	0x20000364

08001684 <lcdCommand>:
 * @brief  Send command to display
 * @param  command  One of listed in LCDCommands enum
 * @param  action   LCD_PARAM_SET or LCD_PARAM_UNSET
 * @return          true if success
 */
bool lcdCommand(LCDCommands command, LCDParamsActions action) {
 8001684:	b580      	push	{r7, lr}
 8001686:	b084      	sub	sp, #16
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	460a      	mov	r2, r1
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	4613      	mov	r3, r2
 8001692:	71bb      	strb	r3, [r7, #6]
    uint8_t lcdData = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

    /* First of all lest store the command */
    switch (action) {
 8001698:	79bb      	ldrb	r3, [r7, #6]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d06e      	beq.n	800177c <lcdCommand+0xf8>
 800169e:	2b01      	cmp	r3, #1
 80016a0:	f040 80b4 	bne.w	800180c <lcdCommand+0x188>
        case LCD_PARAM_SET:
            switch (command) {
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	2b07      	cmp	r3, #7
 80016aa:	d864      	bhi.n	8001776 <lcdCommand+0xf2>
 80016ac:	a201      	add	r2, pc, #4	; (adr r2, 80016b4 <lcdCommand+0x30>)
 80016ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b2:	bf00      	nop
 80016b4:	080016d5 	.word	0x080016d5
 80016b8:	08001705 	.word	0x08001705
 80016bc:	080016e5 	.word	0x080016e5
 80016c0:	080016f5 	.word	0x080016f5
 80016c4:	08001729 	.word	0x08001729
 80016c8:	0800175d 	.word	0x0800175d
 80016cc:	0800174d 	.word	0x0800174d
 80016d0:	08001767 	.word	0x08001767
                case LCD_DISPLAY:
                    lcdParams.modeBits |=  LCD_BIT_DISPLAY_ON;
 80016d4:	4b67      	ldr	r3, [pc, #412]	; (8001874 <lcdCommand+0x1f0>)
 80016d6:	7a1b      	ldrb	r3, [r3, #8]
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	4b65      	ldr	r3, [pc, #404]	; (8001874 <lcdCommand+0x1f0>)
 80016e0:	721a      	strb	r2, [r3, #8]
                    break;
 80016e2:	e04a      	b.n	800177a <lcdCommand+0xf6>

                case LCD_CURSOR:
                    lcdParams.modeBits |= LCD_BIT_CURSOR_ON;
 80016e4:	4b63      	ldr	r3, [pc, #396]	; (8001874 <lcdCommand+0x1f0>)
 80016e6:	7a1b      	ldrb	r3, [r3, #8]
 80016e8:	f043 0302 	orr.w	r3, r3, #2
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4b61      	ldr	r3, [pc, #388]	; (8001874 <lcdCommand+0x1f0>)
 80016f0:	721a      	strb	r2, [r3, #8]
                    break;
 80016f2:	e042      	b.n	800177a <lcdCommand+0xf6>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits |= LCD_BIT_BLINK_ON;
 80016f4:	4b5f      	ldr	r3, [pc, #380]	; (8001874 <lcdCommand+0x1f0>)
 80016f6:	7a1b      	ldrb	r3, [r3, #8]
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b5d      	ldr	r3, [pc, #372]	; (8001874 <lcdCommand+0x1f0>)
 8001700:	721a      	strb	r2, [r3, #8]
                    break;
 8001702:	e03a      	b.n	800177a <lcdCommand+0xf6>

                case LCD_CLEAR:
                    lcdData = LCD_BIT_DISP_CLEAR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 8001708:	f107 030f 	add.w	r3, r7, #15
 800170c:	4619      	mov	r1, r3
 800170e:	2000      	movs	r0, #0
 8001710:	f000 f900 	bl	8001914 <lcdWriteByte>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <lcdCommand+0x9a>
                        return false;
 800171a:	2300      	movs	r3, #0
 800171c:	e0a6      	b.n	800186c <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 800171e:	2002      	movs	r0, #2
 8001720:	f007 fbb8 	bl	8008e94 <vTaskDelay>
                        return true;
 8001724:	2301      	movs	r3, #1
 8001726:	e0a1      	b.n	800186c <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_HOME:
                    lcdData = LCD_BIT_CURSOR_HOME;
 8001728:	2302      	movs	r3, #2
 800172a:	73fb      	strb	r3, [r7, #15]

                    if (lcdWriteByte((uint8_t)0x00, &lcdData) == false) {
 800172c:	f107 030f 	add.w	r3, r7, #15
 8001730:	4619      	mov	r1, r3
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f8ee 	bl	8001914 <lcdWriteByte>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <lcdCommand+0xbe>
                        return false;
 800173e:	2300      	movs	r3, #0
 8001740:	e094      	b.n	800186c <lcdCommand+0x1e8>
                    } else {
                        vTaskDelay(2);
 8001742:	2002      	movs	r0, #2
 8001744:	f007 fba6 	bl	8008e94 <vTaskDelay>
                        return true;
 8001748:	2301      	movs	r3, #1
 800174a:	e08f      	b.n	800186c <lcdCommand+0x1e8>
                    }

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_RIGHT;
 800174c:	4b49      	ldr	r3, [pc, #292]	; (8001874 <lcdCommand+0x1f0>)
 800174e:	7a5b      	ldrb	r3, [r3, #9]
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b47      	ldr	r3, [pc, #284]	; (8001874 <lcdCommand+0x1f0>)
 8001758:	725a      	strb	r2, [r3, #9]
                    break;
 800175a:	e00e      	b.n	800177a <lcdCommand+0xf6>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits |= LCD_BIT_CURSOR_DIR_LEFT;
 800175c:	4b45      	ldr	r3, [pc, #276]	; (8001874 <lcdCommand+0x1f0>)
 800175e:	7a5a      	ldrb	r2, [r3, #9]
 8001760:	4b44      	ldr	r3, [pc, #272]	; (8001874 <lcdCommand+0x1f0>)
 8001762:	725a      	strb	r2, [r3, #9]
                    break;
 8001764:	e009      	b.n	800177a <lcdCommand+0xf6>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits |= LCD_BIT_DISPLAY_SHIFT;
 8001766:	4b43      	ldr	r3, [pc, #268]	; (8001874 <lcdCommand+0x1f0>)
 8001768:	7a5b      	ldrb	r3, [r3, #9]
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	b2da      	uxtb	r2, r3
 8001770:	4b40      	ldr	r3, [pc, #256]	; (8001874 <lcdCommand+0x1f0>)
 8001772:	725a      	strb	r2, [r3, #9]
                    break;
 8001774:	e001      	b.n	800177a <lcdCommand+0xf6>

                default:
                    return false;
 8001776:	2300      	movs	r3, #0
 8001778:	e078      	b.n	800186c <lcdCommand+0x1e8>
            }

            break;
 800177a:	e049      	b.n	8001810 <lcdCommand+0x18c>

        case LCD_PARAM_UNSET:
            switch (command) {
 800177c:	79fb      	ldrb	r3, [r7, #7]
 800177e:	3b01      	subs	r3, #1
 8001780:	2b07      	cmp	r3, #7
 8001782:	d840      	bhi.n	8001806 <lcdCommand+0x182>
 8001784:	a201      	add	r2, pc, #4	; (adr r2, 800178c <lcdCommand+0x108>)
 8001786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178a:	bf00      	nop
 800178c:	080017ad 	.word	0x080017ad
 8001790:	08001807 	.word	0x08001807
 8001794:	080017bd 	.word	0x080017bd
 8001798:	080017cd 	.word	0x080017cd
 800179c:	08001807 	.word	0x08001807
 80017a0:	080017ed 	.word	0x080017ed
 80017a4:	080017dd 	.word	0x080017dd
 80017a8:	080017f7 	.word	0x080017f7
                case LCD_DISPLAY:
                    lcdParams.modeBits &= ~LCD_BIT_DISPLAY_ON;
 80017ac:	4b31      	ldr	r3, [pc, #196]	; (8001874 <lcdCommand+0x1f0>)
 80017ae:	7a1b      	ldrb	r3, [r3, #8]
 80017b0:	f023 0304 	bic.w	r3, r3, #4
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b2f      	ldr	r3, [pc, #188]	; (8001874 <lcdCommand+0x1f0>)
 80017b8:	721a      	strb	r2, [r3, #8]
                    break;
 80017ba:	e026      	b.n	800180a <lcdCommand+0x186>

                case LCD_CURSOR:
                    lcdParams.modeBits &= ~LCD_BIT_CURSOR_ON;
 80017bc:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <lcdCommand+0x1f0>)
 80017be:	7a1b      	ldrb	r3, [r3, #8]
 80017c0:	f023 0302 	bic.w	r3, r3, #2
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <lcdCommand+0x1f0>)
 80017c8:	721a      	strb	r2, [r3, #8]
                    break;
 80017ca:	e01e      	b.n	800180a <lcdCommand+0x186>

                case LCD_CURSOR_BLINK:
                    lcdParams.modeBits &= ~LCD_BIT_BLINK_ON;
 80017cc:	4b29      	ldr	r3, [pc, #164]	; (8001874 <lcdCommand+0x1f0>)
 80017ce:	7a1b      	ldrb	r3, [r3, #8]
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b27      	ldr	r3, [pc, #156]	; (8001874 <lcdCommand+0x1f0>)
 80017d8:	721a      	strb	r2, [r3, #8]
                    break;
 80017da:	e016      	b.n	800180a <lcdCommand+0x186>

                case LCD_CURSOR_DIR_RIGHT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_RIGHT;
 80017dc:	4b25      	ldr	r3, [pc, #148]	; (8001874 <lcdCommand+0x1f0>)
 80017de:	7a5b      	ldrb	r3, [r3, #9]
 80017e0:	f023 0302 	bic.w	r3, r3, #2
 80017e4:	b2da      	uxtb	r2, r3
 80017e6:	4b23      	ldr	r3, [pc, #140]	; (8001874 <lcdCommand+0x1f0>)
 80017e8:	725a      	strb	r2, [r3, #9]
                    break;
 80017ea:	e00e      	b.n	800180a <lcdCommand+0x186>

                case LCD_CURSOR_DIR_LEFT:
                    lcdParams.entryBits &= ~LCD_BIT_CURSOR_DIR_LEFT;
 80017ec:	4b21      	ldr	r3, [pc, #132]	; (8001874 <lcdCommand+0x1f0>)
 80017ee:	7a5a      	ldrb	r2, [r3, #9]
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <lcdCommand+0x1f0>)
 80017f2:	725a      	strb	r2, [r3, #9]
                    break;
 80017f4:	e009      	b.n	800180a <lcdCommand+0x186>

                case LCD_DISPLAY_SHIFT:
                    lcdParams.entryBits &= ~LCD_BIT_DISPLAY_SHIFT;
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <lcdCommand+0x1f0>)
 80017f8:	7a5b      	ldrb	r3, [r3, #9]
 80017fa:	f023 0301 	bic.w	r3, r3, #1
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <lcdCommand+0x1f0>)
 8001802:	725a      	strb	r2, [r3, #9]
                    break;
 8001804:	e001      	b.n	800180a <lcdCommand+0x186>

                default:
                    return false;
 8001806:	2300      	movs	r3, #0
 8001808:	e030      	b.n	800186c <lcdCommand+0x1e8>
            }

            break;
 800180a:	e001      	b.n	8001810 <lcdCommand+0x18c>

        default:
            return false;
 800180c:	2300      	movs	r3, #0
 800180e:	e02d      	b.n	800186c <lcdCommand+0x1e8>
    }

    /* Now lets send the command */
    switch (command) {
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	3b01      	subs	r3, #1
 8001814:	2b07      	cmp	r3, #7
 8001816:	d821      	bhi.n	800185c <lcdCommand+0x1d8>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <lcdCommand+0x19c>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001841 	.word	0x08001841
 8001824:	0800185d 	.word	0x0800185d
 8001828:	08001841 	.word	0x08001841
 800182c:	08001841 	.word	0x08001841
 8001830:	0800185d 	.word	0x0800185d
 8001834:	0800184f 	.word	0x0800184f
 8001838:	0800184f 	.word	0x0800184f
 800183c:	0800184f 	.word	0x0800184f
        case LCD_DISPLAY:
        case LCD_CURSOR:
        case LCD_CURSOR_BLINK:
            lcdData = LCD_BIT_DISPLAY_CONTROL | lcdParams.modeBits;
 8001840:	4b0c      	ldr	r3, [pc, #48]	; (8001874 <lcdCommand+0x1f0>)
 8001842:	7a1b      	ldrb	r3, [r3, #8]
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	b2db      	uxtb	r3, r3
 800184a:	73fb      	strb	r3, [r7, #15]
            break;
 800184c:	e007      	b.n	800185e <lcdCommand+0x1da>

        case LCD_CURSOR_DIR_RIGHT:
        case LCD_CURSOR_DIR_LEFT:
        case LCD_DISPLAY_SHIFT:
            lcdData = LCD_BIT_ENTRY_MODE | lcdParams.entryBits;
 800184e:	4b09      	ldr	r3, [pc, #36]	; (8001874 <lcdCommand+0x1f0>)
 8001850:	7a5b      	ldrb	r3, [r3, #9]
 8001852:	f043 0304 	orr.w	r3, r3, #4
 8001856:	b2db      	uxtb	r3, r3
 8001858:	73fb      	strb	r3, [r7, #15]
            break;
 800185a:	e000      	b.n	800185e <lcdCommand+0x1da>

        default:
            break;
 800185c:	bf00      	nop
    }

    return lcdWriteByte((uint8_t)0x00, &lcdData);
 800185e:	f107 030f 	add.w	r3, r7, #15
 8001862:	4619      	mov	r1, r3
 8001864:	2000      	movs	r0, #0
 8001866:	f000 f855 	bl	8001914 <lcdWriteByte>
 800186a:	4603      	mov	r3, r0
}
 800186c:	4618      	mov	r0, r3
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	2000036c 	.word	0x2000036c

08001878 <lcdSetCursorPosition>:
 * @brief  Set cursor position on the display
 * @param  column counting from 0
 * @param  line   counting from 0
 * @return        true if success
 */
bool lcdSetCursorPosition(uint8_t column, uint8_t line) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b084      	sub	sp, #16
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	460a      	mov	r2, r1
 8001882:	71fb      	strb	r3, [r7, #7]
 8001884:	4613      	mov	r3, r2
 8001886:	71bb      	strb	r3, [r7, #6]
    // We will setup offsets for 4 lines maximum
    static const uint8_t lineOffsets[4] = { 0x00, 0x40, 0x14, 0x54 };

    if ( line >= lcdParams.lines ) {
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <lcdSetCursorPosition+0x50>)
 800188a:	791b      	ldrb	r3, [r3, #4]
 800188c:	79ba      	ldrb	r2, [r7, #6]
 800188e:	429a      	cmp	r2, r3
 8001890:	d303      	bcc.n	800189a <lcdSetCursorPosition+0x22>
        line = lcdParams.lines - 1;
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <lcdSetCursorPosition+0x50>)
 8001894:	791b      	ldrb	r3, [r3, #4]
 8001896:	3b01      	subs	r3, #1
 8001898:	71bb      	strb	r3, [r7, #6]
    }

    uint8_t lcdCommand = LCD_BIT_SETDDRAMADDR | (column + lineOffsets[line]);
 800189a:	79bb      	ldrb	r3, [r7, #6]
 800189c:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <lcdSetCursorPosition+0x54>)
 800189e:	5cd2      	ldrb	r2, [r2, r3]
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	4413      	add	r3, r2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	b25b      	sxtb	r3, r3
 80018a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80018ac:	b25b      	sxtb	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	73fb      	strb	r3, [r7, #15]

    return lcdWriteByte(0x00, &lcdCommand);
 80018b2:	f107 030f 	add.w	r3, r7, #15
 80018b6:	4619      	mov	r1, r3
 80018b8:	2000      	movs	r0, #0
 80018ba:	f000 f82b 	bl	8001914 <lcdWriteByte>
 80018be:	4603      	mov	r3, r0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	2000036c 	.word	0x2000036c
 80018cc:	0800b304 	.word	0x0800b304

080018d0 <lcdPrintStr>:
 * @brief  Print string from cursor position
 * @param  data   Pointer to string
 * @param  length Number of symbols to print
 * @return        true if success
 */
bool lcdPrintStr(uint8_t * data, uint8_t length) {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
    for (uint8_t i = 0; i < length; ++i) {
 80018dc:	2300      	movs	r3, #0
 80018de:	73fb      	strb	r3, [r7, #15]
 80018e0:	e00e      	b.n	8001900 <lcdPrintStr+0x30>
        if (lcdWriteByte(LCD_BIT_RS, &data[i]) == false) {
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	4413      	add	r3, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	2001      	movs	r0, #1
 80018ec:	f000 f812 	bl	8001914 <lcdWriteByte>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <lcdPrintStr+0x2a>
            return false;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e007      	b.n	800190a <lcdPrintStr+0x3a>
    for (uint8_t i = 0; i < length; ++i) {
 80018fa:	7bfb      	ldrb	r3, [r7, #15]
 80018fc:	3301      	adds	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	7bfa      	ldrb	r2, [r7, #15]
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3ec      	bcc.n	80018e2 <lcdPrintStr+0x12>
        }
    }

    return true;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	3710      	adds	r7, #16
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <lcdWriteByte>:
 * @brief  Local function to send data to display
 * @param  rsRwBits State of RS and R/W bits
 * @param  data     Pointer to byte to send
 * @return          true if success
 */
static bool lcdWriteByte(uint8_t rsRwBits, uint8_t * data) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]

    /* Higher 4 bits*/
    lcdCommandBuffer[0] = rsRwBits | LCD_BIT_E | lcdParams.backlight | (*data & 0xF0);  // Send data and set strobe
 8001920:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <lcdWriteByte+0xdc>)
 8001922:	79da      	ldrb	r2, [r3, #7]
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	4313      	orrs	r3, r2
 8001928:	b2da      	uxtb	r2, r3
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	f023 030f 	bic.w	r3, r3, #15
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4313      	orrs	r3, r2
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	b2da      	uxtb	r2, r3
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <lcdWriteByte+0xe0>)
 8001940:	701a      	strb	r2, [r3, #0]
    lcdCommandBuffer[1] = lcdCommandBuffer[0];                                          // Strobe turned on
 8001942:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <lcdWriteByte+0xe0>)
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	4b2b      	ldr	r3, [pc, #172]	; (80019f4 <lcdWriteByte+0xe0>)
 8001948:	705a      	strb	r2, [r3, #1]
    lcdCommandBuffer[2] = rsRwBits | lcdParams.backlight | (*data & 0xF0);              // Turning strobe off
 800194a:	4b29      	ldr	r3, [pc, #164]	; (80019f0 <lcdWriteByte+0xdc>)
 800194c:	79da      	ldrb	r2, [r3, #7]
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	4313      	orrs	r3, r2
 8001952:	b2db      	uxtb	r3, r3
 8001954:	b25a      	sxtb	r2, r3
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b25b      	sxtb	r3, r3
 800195c:	f023 030f 	bic.w	r3, r3, #15
 8001960:	b25b      	sxtb	r3, r3
 8001962:	4313      	orrs	r3, r2
 8001964:	b25b      	sxtb	r3, r3
 8001966:	b2da      	uxtb	r2, r3
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <lcdWriteByte+0xe0>)
 800196a:	709a      	strb	r2, [r3, #2]

    /* Lower 4 bits*/
    lcdCommandBuffer[3] = rsRwBits | LCD_BIT_E | lcdParams.backlight | ((*data << 4) & 0xF0);  // Send data and set strobe
 800196c:	4b20      	ldr	r3, [pc, #128]	; (80019f0 <lcdWriteByte+0xdc>)
 800196e:	79da      	ldrb	r2, [r3, #7]
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	4313      	orrs	r3, r2
 8001974:	b2da      	uxtb	r2, r3
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	b2db      	uxtb	r3, r3
 800197e:	4313      	orrs	r3, r2
 8001980:	b2db      	uxtb	r3, r3
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	b2da      	uxtb	r2, r3
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <lcdWriteByte+0xe0>)
 800198a:	70da      	strb	r2, [r3, #3]
    lcdCommandBuffer[4] = lcdCommandBuffer[3];                                                 // Strobe turned on
 800198c:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <lcdWriteByte+0xe0>)
 800198e:	78da      	ldrb	r2, [r3, #3]
 8001990:	4b18      	ldr	r3, [pc, #96]	; (80019f4 <lcdWriteByte+0xe0>)
 8001992:	711a      	strb	r2, [r3, #4]
    lcdCommandBuffer[5] = rsRwBits | lcdParams.backlight | ((*data << 4) & 0xF0);              // Turning strobe off
 8001994:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <lcdWriteByte+0xdc>)
 8001996:	79da      	ldrb	r2, [r3, #7]
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	4313      	orrs	r3, r2
 800199c:	b2db      	uxtb	r3, r3
 800199e:	b25a      	sxtb	r2, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	011b      	lsls	r3, r3, #4
 80019a6:	b25b      	sxtb	r3, r3
 80019a8:	4313      	orrs	r3, r2
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	4b11      	ldr	r3, [pc, #68]	; (80019f4 <lcdWriteByte+0xe0>)
 80019b0:	715a      	strb	r2, [r3, #5]


    if (HAL_I2C_Master_Transmit_DMA(lcdParams.hi2c, lcdParams.address, (uint8_t*)lcdCommandBuffer, 6) != HAL_OK) {
 80019b2:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <lcdWriteByte+0xdc>)
 80019b4:	6818      	ldr	r0, [r3, #0]
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <lcdWriteByte+0xdc>)
 80019b8:	799b      	ldrb	r3, [r3, #6]
 80019ba:	b299      	uxth	r1, r3
 80019bc:	2306      	movs	r3, #6
 80019be:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <lcdWriteByte+0xe0>)
 80019c0:	f002 faf6 	bl	8003fb0 <HAL_I2C_Master_Transmit_DMA>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <lcdWriteByte+0xc0>
        return false;
 80019ca:	2300      	movs	r3, #0
 80019cc:	e00b      	b.n	80019e6 <lcdWriteByte+0xd2>
    }

    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
        vTaskDelay(1);
 80019ce:	2001      	movs	r0, #1
 80019d0:	f007 fa60 	bl	8008e94 <vTaskDelay>
    while (HAL_I2C_GetState(lcdParams.hi2c) != HAL_I2C_STATE_READY) {
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <lcdWriteByte+0xdc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4618      	mov	r0, r3
 80019da:	f002 ff62 	bl	80048a2 <HAL_I2C_GetState>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	d1f4      	bne.n	80019ce <lcdWriteByte+0xba>
    }

    return true;
 80019e4:	2301      	movs	r3, #1
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	2000036c 	.word	0x2000036c
 80019f4:	20000364 	.word	0x20000364

080019f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f8:	b5b0      	push	{r4, r5, r7, lr}
 80019fa:	b0aa      	sub	sp, #168	; 0xa8
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019fe:	f001 f955 	bl	8002cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a02:	f000 f8c7 	bl	8001b94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a06:	f000 f995 	bl	8001d34 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a0a:	f000 f96d 	bl	8001ce8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001a0e:	f000 f907 	bl	8001c20 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001a12:	f000 f933 	bl	8001c7c <MX_SPI1_Init>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of realTimeClock */
  osTimerDef(realTimeClock, CallbackTimerClock);
 8001a16:	4b4b      	ldr	r3, [pc, #300]	; (8001b44 <main+0x14c>)
 8001a18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  realTimeClockHandle = osTimerCreate(osTimer(realTimeClock), osTimerPeriodic, NULL);
 8001a22:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001a26:	2200      	movs	r2, #0
 8001a28:	2101      	movs	r1, #1
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f005 ffa2 	bl	8007974 <osTimerCreate>
 8001a30:	4602      	mov	r2, r0
 8001a32:	4b45      	ldr	r3, [pc, #276]	; (8001b48 <main+0x150>)
 8001a34:	601a      	str	r2, [r3, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of sensorTemp */
  osMessageQDef(sensorTemp, 2, double);
 8001a36:	4b45      	ldr	r3, [pc, #276]	; (8001b4c <main+0x154>)
 8001a38:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8001a3c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a3e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  sensorTempHandle = osMessageCreate(osMessageQ(sensorTemp), NULL);
 8001a42:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f006 f90c 	bl	8007c66 <osMessageCreate>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b3f      	ldr	r3, [pc, #252]	; (8001b50 <main+0x158>)
 8001a52:	601a      	str	r2, [r3, #0]

  /* definition and creation of msgClockTick */
  osMessageQDef(msgClockTick, 2, uint32_t);
 8001a54:	4b3f      	ldr	r3, [pc, #252]	; (8001b54 <main+0x15c>)
 8001a56:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8001a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgClockTickHandle = osMessageCreate(osMessageQ(msgClockTick), NULL);
 8001a60:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a64:	2100      	movs	r1, #0
 8001a66:	4618      	mov	r0, r3
 8001a68:	f006 f8fd 	bl	8007c66 <osMessageCreate>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <main+0x160>)
 8001a70:	601a      	str	r2, [r3, #0]

  /* definition and creation of msgRadioTransmit */
  osMessageQDef(msgRadioTransmit, 8, uint16_t);
 8001a72:	4b3a      	ldr	r3, [pc, #232]	; (8001b5c <main+0x164>)
 8001a74:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8001a78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001a7a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  msgRadioTransmitHandle = osMessageCreate(osMessageQ(msgRadioTransmit), NULL);
 8001a7e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f006 f8ee 	bl	8007c66 <osMessageCreate>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	4b34      	ldr	r3, [pc, #208]	; (8001b60 <main+0x168>)
 8001a8e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  bmp_pool = osPoolCreate(osPool(bmp_pool));                 // create memory pool
 8001a90:	4834      	ldr	r0, [pc, #208]	; (8001b64 <main+0x16c>)
 8001a92:	f005 ffe9 	bl	8007a68 <osPoolCreate>
 8001a96:	4602      	mov	r2, r0
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <main+0x170>)
 8001a9a:	601a      	str	r2, [r3, #0]
  bmp180MailTempHandler = osMessageCreate(osMessageQ(bmp180MailTempHandler), NULL);  // create msg queue
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4833      	ldr	r0, [pc, #204]	; (8001b6c <main+0x174>)
 8001aa0:	f006 f8e1 	bl	8007c66 <osMessageCreate>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <main+0x178>)
 8001aa8:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityLow, 0, 64);
 8001aaa:	4b32      	ldr	r3, [pc, #200]	; (8001b74 <main+0x17c>)
 8001aac:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ab6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001abe:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f005 ff08 	bl	80078da <osThreadCreate>
 8001aca:	4602      	mov	r2, r0
 8001acc:	4b2a      	ldr	r3, [pc, #168]	; (8001b78 <main+0x180>)
 8001ace:	601a      	str	r2, [r3, #0]

  /* definition and creation of lcd1602 */
  osThreadDef(lcd1602, StartLcd1602, osPriorityBelowNormal, 0, 128);
 8001ad0:	4b2a      	ldr	r3, [pc, #168]	; (8001b7c <main+0x184>)
 8001ad2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001ad6:	461d      	mov	r5, r3
 8001ad8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ada:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001adc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001ae0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  lcd1602Handle = osThreadCreate(osThread(lcd1602), NULL);
 8001ae4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f005 fef5 	bl	80078da <osThreadCreate>
 8001af0:	4602      	mov	r2, r0
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <main+0x188>)
 8001af4:	601a      	str	r2, [r3, #0]

  /* definition and creation of bmp180Sensor */
  osThreadDef(bmp180Sensor, StartBmp180Sensor, osPriorityIdle, 0, 128);
 8001af6:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <main+0x18c>)
 8001af8:	f107 041c 	add.w	r4, r7, #28
 8001afc:	461d      	mov	r5, r3
 8001afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b02:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  bmp180SensorHandle = osThreadCreate(osThread(bmp180Sensor), NULL);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	2100      	movs	r1, #0
 8001b10:	4618      	mov	r0, r3
 8001b12:	f005 fee2 	bl	80078da <osThreadCreate>
 8001b16:	4602      	mov	r2, r0
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <main+0x190>)
 8001b1a:	601a      	str	r2, [r3, #0]

  /* definition and creation of myRadio */
  osThreadDef(myRadio, StartRadio, osPriorityNormal, 0, 128);
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <main+0x194>)
 8001b1e:	463c      	mov	r4, r7
 8001b20:	461d      	mov	r5, r3
 8001b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b26:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001b2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myRadioHandle = osThreadCreate(osThread(myRadio), NULL);
 8001b2e:	463b      	mov	r3, r7
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f005 fed1 	bl	80078da <osThreadCreate>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <main+0x198>)
 8001b3c:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001b3e:	f005 fec5 	bl	80078cc <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b42:	e7fe      	b.n	8001b42 <main+0x14a>
 8001b44:	08002211 	.word	0x08002211
 8001b48:	20001314 	.word	0x20001314
 8001b4c:	0800b1e0 	.word	0x0800b1e0
 8001b50:	2000125c 	.word	0x2000125c
 8001b54:	0800b1f0 	.word	0x0800b1f0
 8001b58:	2000137c 	.word	0x2000137c
 8001b5c:	0800b200 	.word	0x0800b200
 8001b60:	20001308 	.word	0x20001308
 8001b64:	0800b308 	.word	0x0800b308
 8001b68:	20001268 	.word	0x20001268
 8001b6c:	0800b314 	.word	0x0800b314
 8001b70:	20001334 	.word	0x20001334
 8001b74:	0800b21c 	.word	0x0800b21c
 8001b78:	20001260 	.word	0x20001260
 8001b7c:	0800b240 	.word	0x0800b240
 8001b80:	20001320 	.word	0x20001320
 8001b84:	0800b26c 	.word	0x0800b26c
 8001b88:	200013dc 	.word	0x200013dc
 8001b8c:	0800b290 	.word	0x0800b290
 8001b90:	2000131c 	.word	0x2000131c

08001b94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b090      	sub	sp, #64	; 0x40
 8001b98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9a:	f107 0318 	add.w	r3, r7, #24
 8001b9e:	2228      	movs	r2, #40	; 0x28
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f008 fe67 	bl	800a876 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ba8:	1d3b      	adds	r3, r7, #4
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
 8001bb4:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bc8:	2302      	movs	r3, #2
 8001bca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bcc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bd8:	f107 0318 	add.w	r3, r7, #24
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f004 fc5f 	bl	80064a0 <HAL_RCC_OscConfig>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001be8:	f000 fb3e 	bl	8002268 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bec:	230f      	movs	r3, #15
 8001bee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c02:	1d3b      	adds	r3, r7, #4
 8001c04:	2102      	movs	r1, #2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f004 feca 	bl	80069a0 <HAL_RCC_ClockConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c12:	f000 fb29 	bl	8002268 <Error_Handler>
  }
}
 8001c16:	bf00      	nop
 8001c18:	3740      	adds	r7, #64	; 0x40
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c26:	4a13      	ldr	r2, [pc, #76]	; (8001c74 <MX_I2C1_Init+0x54>)
 8001c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001c2a:	4b11      	ldr	r3, [pc, #68]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c2c:	4a12      	ldr	r2, [pc, #72]	; (8001c78 <MX_I2C1_Init+0x58>)
 8001c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c36:	4b0e      	ldr	r3, [pc, #56]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c44:	4b0a      	ldr	r3, [pc, #40]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c4a:	4b09      	ldr	r3, [pc, #36]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c56:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c5c:	4804      	ldr	r0, [pc, #16]	; (8001c70 <MX_I2C1_Init+0x50>)
 8001c5e:	f001 fd53 	bl	8003708 <HAL_I2C_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c68:	f000 fafe 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c6c:	bf00      	nop
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	200012b4 	.word	0x200012b4
 8001c74:	40005400 	.word	0x40005400
 8001c78:	000186a0 	.word	0x000186a0

08001c7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c80:	4b17      	ldr	r3, [pc, #92]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c82:	4a18      	ldr	r2, [pc, #96]	; (8001ce4 <MX_SPI1_Init+0x68>)
 8001c84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c86:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c88:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c8e:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c9a:	4b11      	ldr	r3, [pc, #68]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001ca6:	4b0e      	ldr	r3, [pc, #56]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001cae:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cb0:	2218      	movs	r2, #24
 8001cb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cc8:	220a      	movs	r2, #10
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ccc:	4804      	ldr	r0, [pc, #16]	; (8001ce0 <MX_SPI1_Init+0x64>)
 8001cce:	f005 f81f 	bl	8006d10 <HAL_SPI_Init>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cd8:	f000 fac6 	bl	8002268 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20001380 	.word	0x20001380
 8001ce4:	40013000 	.word	0x40013000

08001ce8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <MX_DMA_Init+0x48>)
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <MX_DMA_Init+0x48>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	6153      	str	r3, [r2, #20]
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <MX_DMA_Init+0x48>)
 8001cfc:	695b      	ldr	r3, [r3, #20]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 5, 0);
 8001d06:	2200      	movs	r2, #0
 8001d08:	2105      	movs	r1, #5
 8001d0a:	2010      	movs	r0, #16
 8001d0c:	f001 f8d7 	bl	8002ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001d10:	2010      	movs	r0, #16
 8001d12:	f001 f8f0 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 5, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2105      	movs	r1, #5
 8001d1a:	2011      	movs	r0, #17
 8001d1c:	f001 f8cf 	bl	8002ebe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001d20:	2011      	movs	r0, #17
 8001d22:	f001 f8e8 	bl	8002ef6 <HAL_NVIC_EnableIRQ>

}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40021000 	.word	0x40021000

08001d34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d4a:	699b      	ldr	r3, [r3, #24]
 8001d4c:	4a36      	ldr	r2, [pc, #216]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d4e:	f043 0310 	orr.w	r3, r3, #16
 8001d52:	6193      	str	r3, [r2, #24]
 8001d54:	4b34      	ldr	r3, [pc, #208]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d60:	4b31      	ldr	r3, [pc, #196]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	4a30      	ldr	r2, [pc, #192]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d66:	f043 0320 	orr.w	r3, r3, #32
 8001d6a:	6193      	str	r3, [r2, #24]
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d6e:	699b      	ldr	r3, [r3, #24]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6193      	str	r3, [r2, #24]
 8001d84:	4b28      	ldr	r3, [pc, #160]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d86:	699b      	ldr	r3, [r3, #24]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	607b      	str	r3, [r7, #4]
 8001d8e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d90:	4b25      	ldr	r3, [pc, #148]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	4a24      	ldr	r2, [pc, #144]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d96:	f043 0308 	orr.w	r3, r3, #8
 8001d9a:	6193      	str	r3, [r2, #24]
 8001d9c:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <MX_GPIO_Init+0xf4>)
 8001d9e:	699b      	ldr	r3, [r3, #24]
 8001da0:	f003 0308 	and.w	r3, r3, #8
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IND_GPIO_Port, IND_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dae:	481f      	ldr	r0, [pc, #124]	; (8001e2c <MX_GPIO_Init+0xf8>)
 8001db0:	f001 fc7a 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, GPIO_PIN_SET);
 8001db4:	2201      	movs	r2, #1
 8001db6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001dba:	481d      	ldr	r0, [pc, #116]	; (8001e30 <MX_GPIO_Init+0xfc>)
 8001dbc:	f001 fc74 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001dc6:	481a      	ldr	r0, [pc, #104]	; (8001e30 <MX_GPIO_Init+0xfc>)
 8001dc8:	f001 fc6e 	bl	80036a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : IND_Pin */
  GPIO_InitStruct.Pin = IND_Pin;
 8001dcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IND_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0310 	add.w	r3, r7, #16
 8001de2:	4619      	mov	r1, r3
 8001de4:	4811      	ldr	r0, [pc, #68]	; (8001e2c <MX_GPIO_Init+0xf8>)
 8001de6:	f001 fb05 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF24_IRQ_Pin */
  GPIO_InitStruct.Pin = RF24_IRQ_Pin;
 8001dea:	2301      	movs	r3, #1
 8001dec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RF24_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001df6:	f107 0310 	add.w	r3, r7, #16
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	480c      	ldr	r0, [pc, #48]	; (8001e30 <MX_GPIO_Init+0xfc>)
 8001dfe:	f001 faf9 	bl	80033f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001e02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2302      	movs	r3, #2
 8001e12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4805      	ldr	r0, [pc, #20]	; (8001e30 <MX_GPIO_Init+0xfc>)
 8001e1c:	f001 faea 	bl	80033f4 <HAL_GPIO_Init>

}
 8001e20:	bf00      	nop
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40011000 	.word	0x40011000
 8001e30:	40010c00 	.word	0x40010c00

08001e34 <I2C_Error>:
        }
    }
    return k;
}
void I2C_Error(char *er, uint32_t status) // ошибки i2c
{}
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001e48:	b590      	push	{r4, r7, lr}
 8001e4a:	b08b      	sub	sp, #44	; 0x2c
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	static osEvent event;
	transmit_query q;
	uint16_t iq;
	osTimerStart(realTimeClockHandle, 1000);
 8001e50:	4b2b      	ldr	r3, [pc, #172]	; (8001f00 <StartDefaultTask+0xb8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f005 fdbf 	bl	80079dc <osTimerStart>
  /* Infinite loop */
  for(;;)
  {
	 event = osMessageGet(msgClockTickHandle, osWaitForever);
 8001e5e:	4b29      	ldr	r3, [pc, #164]	; (8001f04 <StartDefaultTask+0xbc>)
 8001e60:	6819      	ldr	r1, [r3, #0]
 8001e62:	4c29      	ldr	r4, [pc, #164]	; (8001f08 <StartDefaultTask+0xc0>)
 8001e64:	463b      	mov	r3, r7
 8001e66:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f005 ff64 	bl	8007d38 <osMessageGet>
 8001e70:	463b      	mov	r3, r7
 8001e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	 if(event.status == osEventMessage)
 8001e7a:	4b23      	ldr	r3, [pc, #140]	; (8001f08 <StartDefaultTask+0xc0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d1ed      	bne.n	8001e5e <StartDefaultTask+0x16>
	 {
		 unixtime++;
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <StartDefaultTask+0xc4>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	3301      	adds	r3, #1
 8001e88:	4a20      	ldr	r2, [pc, #128]	; (8001f0c <StartDefaultTask+0xc4>)
 8001e8a:	6013      	str	r3, [r2, #0]
		 if ((transmit_state ==start_state) ||
 8001e8c:	4b20      	ldr	r3, [pc, #128]	; (8001f10 <StartDefaultTask+0xc8>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d002      	beq.n	8001e9a <StartDefaultTask+0x52>
				 (transmit_state=connecting_state)||
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <StartDefaultTask+0xc8>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	701a      	strb	r2, [r3, #0]
				 (transmit_state==lost_connectState)||
				 (transmit_state==test_state))
		 {
			 q.type = data_null;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	773b      	strb	r3, [r7, #28]
			 q.query = none_q;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	777b      	strb	r3, [r7, #29]
			 iq = (q.type<< 8) +q.query;;
 8001ea2:	7f3b      	ldrb	r3, [r7, #28]
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	021b      	lsls	r3, r3, #8
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	7f7b      	ldrb	r3, [r7, #29]
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	4413      	add	r3, r2
 8001eb0:	84fb      	strh	r3, [r7, #38]	; 0x26
			 osStatus st =osMessagePut(msgRadioTransmitHandle, iq, 100);
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <StartDefaultTask+0xcc>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8001eb8:	2264      	movs	r2, #100	; 0x64
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f005 fefc 	bl	8007cb8 <osMessagePut>
 8001ec0:	6238      	str	r0, [r7, #32]
			 st = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	623b      	str	r3, [r7, #32]
		 }
		 HAL_GPIO_TogglePin(IND_GPIO_Port, IND_Pin);
 8001ec6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eca:	4813      	ldr	r0, [pc, #76]	; (8001f18 <StartDefaultTask+0xd0>)
 8001ecc:	f001 fc04 	bl	80036d8 <HAL_GPIO_TogglePin>
		 if (unixtime % 60 ==0)
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <StartDefaultTask+0xc4>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <StartDefaultTask+0xd4>)
 8001ed6:	fb83 1302 	smull	r1, r3, r3, r2
 8001eda:	4413      	add	r3, r2
 8001edc:	1159      	asrs	r1, r3, #5
 8001ede:	17d3      	asrs	r3, r2, #31
 8001ee0:	1ac9      	subs	r1, r1, r3
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	011b      	lsls	r3, r3, #4
 8001ee6:	1a5b      	subs	r3, r3, r1
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	1ad1      	subs	r1, r2, r3
 8001eec:	2900      	cmp	r1, #0
 8001eee:	d1b6      	bne.n	8001e5e <StartDefaultTask+0x16>
		 {
			if ((transmit_state ==connected_state) ||(transmit_state=disconnected_state))
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <StartDefaultTask+0xc8>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d0b2      	beq.n	8001e5e <StartDefaultTask+0x16>
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <StartDefaultTask+0xc8>)
 8001efa:	2204      	movs	r2, #4
 8001efc:	701a      	strb	r2, [r3, #0]
	 event = osMessageGet(msgClockTickHandle, osWaitForever);
 8001efe:	e7ae      	b.n	8001e5e <StartDefaultTask+0x16>
 8001f00:	20001314 	.word	0x20001314
 8001f04:	2000137c 	.word	0x2000137c
 8001f08:	20000378 	.word	0x20000378
 8001f0c:	20001310 	.word	0x20001310
 8001f10:	20001264 	.word	0x20001264
 8001f14:	20001308 	.word	0x20001308
 8001f18:	40011000 	.word	0x40011000
 8001f1c:	88888889 	.word	0x88888889

08001f20 <StartLcd1602>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcd1602 */
void StartLcd1602(void const * argument)
{
 8001f20:	b5b0      	push	{r4, r5, r7, lr}
 8001f22:	b090      	sub	sp, #64	; 0x40
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartLcd1602 */
	static char buffer[21];
	static osEvent event;
	lcdInit(&hi2c1, (uint8_t)0x27, (uint8_t)2, (uint8_t)16);
 8001f28:	2310      	movs	r3, #16
 8001f2a:	2202      	movs	r2, #2
 8001f2c:	2127      	movs	r1, #39	; 0x27
 8001f2e:	4855      	ldr	r0, [pc, #340]	; (8002084 <StartLcd1602+0x164>)
 8001f30:	f7ff faf6 	bl	8001520 <lcdInit>
	static const char helloWorld[] = "Meteostation #1";
	lcdSetCursorPosition(0, 0);
 8001f34:	2100      	movs	r1, #0
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7ff fc9e 	bl	8001878 <lcdSetCursorPosition>
	lcdPrintStr((uint8_t*)helloWorld, strlen(helloWorld));
 8001f3c:	4852      	ldr	r0, [pc, #328]	; (8002088 <StartLcd1602+0x168>)
 8001f3e:	f7fe f907 	bl	8000150 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	4619      	mov	r1, r3
 8001f48:	484f      	ldr	r0, [pc, #316]	; (8002088 <StartLcd1602+0x168>)
 8001f4a:	f7ff fcc1 	bl	80018d0 <lcdPrintStr>
	lcdDisplayClear();
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7ff fb97 	bl	8001684 <lcdCommand>
	  /* Infinite loop */
	  for(;;)
	  {
  	      BMP180_DATA *qstruct;

  	      event = osMessageGet(bmp180MailTempHandler, osWaitForever);
 8001f56:	4b4d      	ldr	r3, [pc, #308]	; (800208c <StartLcd1602+0x16c>)
 8001f58:	6819      	ldr	r1, [r3, #0]
 8001f5a:	4c4d      	ldr	r4, [pc, #308]	; (8002090 <StartLcd1602+0x170>)
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f62:	4618      	mov	r0, r3
 8001f64:	f005 fee8 	bl	8007d38 <osMessageGet>
 8001f68:	463b      	mov	r3, r7
 8001f6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001f6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  	      if (event.status == osEventMessage)
 8001f72:	4b47      	ldr	r3, [pc, #284]	; (8002090 <StartLcd1602+0x170>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d1ed      	bne.n	8001f56 <StartLcd1602+0x36>
  	      {
			  qstruct = event.value.p;
 8001f7a:	4b45      	ldr	r3, [pc, #276]	; (8002090 <StartLcd1602+0x170>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	637b      	str	r3, [r7, #52]	; 0x34

			  double fractpart, intpart;
			  fractpart = modf(qstruct->temp, &intpart);
 8001f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f82:	cb18      	ldmia	r3, {r3, r4}
 8001f84:	f107 0218 	add.w	r2, r7, #24
 8001f88:	4618      	mov	r0, r3
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	f008 fc7c 	bl	800a888 <modf>
 8001f90:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
			  uint8_t pos = (uint8_t)qstruct->from;
 8001f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f96:	7b1b      	ldrb	r3, [r3, #12]
 8001f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			  sprintf(buffer,"T=%li.%li", lroundf(intpart), lroundf(fractpart * 10));
 8001f9c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	4621      	mov	r1, r4
 8001fa4:	f7fe fcaa 	bl	80008fc <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4618      	mov	r0, r3
 8001fac:	f009 f8be 	bl	800b12c <lroundf>
 8001fb0:	4605      	mov	r5, r0
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b37      	ldr	r3, [pc, #220]	; (8002094 <StartLcd1602+0x174>)
 8001fb8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001fbc:	f7fe fa8c 	bl	80004d8 <__aeabi_dmul>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	f7fe fc98 	bl	80008fc <__aeabi_d2f>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f009 f8ac 	bl	800b12c <lroundf>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	462a      	mov	r2, r5
 8001fd8:	492f      	ldr	r1, [pc, #188]	; (8002098 <StartLcd1602+0x178>)
 8001fda:	4830      	ldr	r0, [pc, #192]	; (800209c <StartLcd1602+0x17c>)
 8001fdc:	f008 fc9e 	bl	800a91c <siprintf>
			  lcdSetCursorPosition(0, pos);
 8001fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	2000      	movs	r0, #0
 8001fe8:	f7ff fc46 	bl	8001878 <lcdSetCursorPosition>
			  lcdPrintStr((uint8_t*)buffer, strlen(buffer));
 8001fec:	482b      	ldr	r0, [pc, #172]	; (800209c <StartLcd1602+0x17c>)
 8001fee:	f7fe f8af 	bl	8000150 <strlen>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	4828      	ldr	r0, [pc, #160]	; (800209c <StartLcd1602+0x17c>)
 8001ffa:	f7ff fc69 	bl	80018d0 <lcdPrintStr>
			  sprintf(buffer,"P=%li", qstruct->press);
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	461a      	mov	r2, r3
 8002004:	4926      	ldr	r1, [pc, #152]	; (80020a0 <StartLcd1602+0x180>)
 8002006:	4825      	ldr	r0, [pc, #148]	; (800209c <StartLcd1602+0x17c>)
 8002008:	f008 fc88 	bl	800a91c <siprintf>
			  lcdSetCursorPosition(10, pos);
 800200c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002010:	4619      	mov	r1, r3
 8002012:	200a      	movs	r0, #10
 8002014:	f7ff fc30 	bl	8001878 <lcdSetCursorPosition>
			  lcdPrintStr((uint8_t*)buffer, strlen(buffer));
 8002018:	4820      	ldr	r0, [pc, #128]	; (800209c <StartLcd1602+0x17c>)
 800201a:	f7fe f899 	bl	8000150 <strlen>
 800201e:	4603      	mov	r3, r0
 8002020:	b2db      	uxtb	r3, r3
 8002022:	4619      	mov	r1, r3
 8002024:	481d      	ldr	r0, [pc, #116]	; (800209c <StartLcd1602+0x17c>)
 8002026:	f7ff fc53 	bl	80018d0 <lcdPrintStr>
			  sprintf(buffer,"T=%li.%li  P=%li\r\n", lroundf(intpart), lroundf(fractpart * 10),qstruct->press);
 800202a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800202e:	4618      	mov	r0, r3
 8002030:	4621      	mov	r1, r4
 8002032:	f7fe fc63 	bl	80008fc <__aeabi_d2f>
 8002036:	4603      	mov	r3, r0
 8002038:	4618      	mov	r0, r3
 800203a:	f009 f877 	bl	800b12c <lroundf>
 800203e:	4605      	mov	r5, r0
 8002040:	f04f 0200 	mov.w	r2, #0
 8002044:	4b13      	ldr	r3, [pc, #76]	; (8002094 <StartLcd1602+0x174>)
 8002046:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800204a:	f7fe fa45 	bl	80004d8 <__aeabi_dmul>
 800204e:	4603      	mov	r3, r0
 8002050:	460c      	mov	r4, r1
 8002052:	4618      	mov	r0, r3
 8002054:	4621      	mov	r1, r4
 8002056:	f7fe fc51 	bl	80008fc <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
 800205c:	4618      	mov	r0, r3
 800205e:	f009 f865 	bl	800b12c <lroundf>
 8002062:	4602      	mov	r2, r0
 8002064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	462a      	mov	r2, r5
 800206e:	490d      	ldr	r1, [pc, #52]	; (80020a4 <StartLcd1602+0x184>)
 8002070:	480a      	ldr	r0, [pc, #40]	; (800209c <StartLcd1602+0x17c>)
 8002072:	f008 fc53 	bl	800a91c <siprintf>
			  osPoolFree(bmp_pool,qstruct);
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <StartLcd1602+0x188>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800207c:	4618      	mov	r0, r3
 800207e:	f005 fdb2 	bl	8007be6 <osPoolFree>
	  {
 8002082:	e768      	b.n	8001f56 <StartLcd1602+0x36>
 8002084:	200012b4 	.word	0x200012b4
 8002088:	0800b324 	.word	0x0800b324
 800208c:	20001334 	.word	0x20001334
 8002090:	20000384 	.word	0x20000384
 8002094:	40240000 	.word	0x40240000
 8002098:	0800b2ac 	.word	0x0800b2ac
 800209c:	20000390 	.word	0x20000390
 80020a0:	0800b2b8 	.word	0x0800b2b8
 80020a4:	0800b2c0 	.word	0x0800b2c0
 80020a8:	20001268 	.word	0x20001268
 80020ac:	00000000 	.word	0x00000000

080020b0 <StartBmp180Sensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBmp180Sensor */
void StartBmp180Sensor(void const * argument)
{
 80020b0:	b590      	push	{r4, r7, lr}
 80020b2:	b097      	sub	sp, #92	; 0x5c
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBmp180Sensor */
  /* Infinite loop */
	BMP180_DATA *qstruct;
	// I2C_Scan(&hi2c1); // НОМЕР I2C
	BMP_i2c_init(&hi2c1); // НОМЕР I2C
 80020b8:	482d      	ldr	r0, [pc, #180]	; (8002170 <StartBmp180Sensor+0xc0>)
 80020ba:	f7fe ff13 	bl	8000ee4 <BMP_i2c_init>
  for(;;)
  {

	  char trans_str[64] = {0,};
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	2240      	movs	r2, #64	; 0x40
 80020c4:	2100      	movs	r1, #0
 80020c6:	4618      	mov	r0, r3
 80020c8:	f008 fbd5 	bl	800a876 <memset>
	  qstruct = osPoolAlloc(bmp_pool);
 80020cc:	4b29      	ldr	r3, [pc, #164]	; (8002174 <StartBmp180Sensor+0xc4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f005 fd26 	bl	8007b22 <osPoolAlloc>
 80020d6:	6578      	str	r0, [r7, #84]	; 0x54
	  BMP_setControl(BMP_MODE_TEMPERATURE);
 80020d8:	202e      	movs	r0, #46	; 0x2e
 80020da:	f7ff f821 	bl	8001120 <BMP_setControl>
	  HAL_Delay(BMP_getMeasureDelayMilliseconds(BMP_MODE_TEMPERATURE));
 80020de:	202e      	movs	r0, #46	; 0x2e
 80020e0:	f7ff f89a 	bl	8001218 <BMP_getMeasureDelayMilliseconds>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 fe12 	bl	8002d10 <HAL_Delay>
	  float t = BMP_getTemperatureC();
 80020ec:	f7ff f8d6 	bl	800129c <BMP_getTemperatureC>
 80020f0:	6538      	str	r0, [r7, #80]	; 0x50

	  BMP_setControl(BMP_MODE_PRESSURE_3);
 80020f2:	20f4      	movs	r0, #244	; 0xf4
 80020f4:	f7ff f814 	bl	8001120 <BMP_setControl>
	  HAL_Delay(BMP_getMeasureDelayMilliseconds(BMP_MODE_PRESSURE_3));
 80020f8:	20f4      	movs	r0, #244	; 0xf4
 80020fa:	f7ff f88d 	bl	8001218 <BMP_getMeasureDelayMilliseconds>
 80020fe:	4603      	mov	r3, r0
 8002100:	4618      	mov	r0, r3
 8002102:	f000 fe05 	bl	8002d10 <HAL_Delay>
	  float p = BMP_getPressure() * 0.00750062;
 8002106:	f7ff f925 	bl	8001354 <BMP_getPressure>
 800210a:	4603      	mov	r3, r0
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f98b 	bl	8000428 <__aeabi_f2d>
 8002112:	a315      	add	r3, pc, #84	; (adr r3, 8002168 <StartBmp180Sensor+0xb8>)
 8002114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002118:	f7fe f9de 	bl	80004d8 <__aeabi_dmul>
 800211c:	4603      	mov	r3, r0
 800211e:	460c      	mov	r4, r1
 8002120:	4618      	mov	r0, r3
 8002122:	4621      	mov	r1, r4
 8002124:	f7fe fbea 	bl	80008fc <__aeabi_d2f>
 8002128:	4603      	mov	r3, r0
 800212a:	64fb      	str	r3, [r7, #76]	; 0x4c

	  //snprintf(trans_str, 64, "Temp: %.1f  Pressure: %.2f\n", t , p);
	  //HAL_UART_Transmit(&huart1, (uint8_t*)trans_str, strlen(trans_str), 1000);

	  qstruct->temp = t;
 800212c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800212e:	f7fe f97b 	bl	8000428 <__aeabi_f2d>
 8002132:	4603      	mov	r3, r0
 8002134:	460c      	mov	r4, r1
 8002136:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002138:	e9c2 3400 	strd	r3, r4, [r2]
	  qstruct->press = p;
 800213c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800213e:	f7fe feb1 	bl	8000ea4 <__aeabi_f2uiz>
 8002142:	4602      	mov	r2, r0
 8002144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002146:	609a      	str	r2, [r3, #8]
	  qstruct->from = meteoIndoor;
 8002148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800214a:	2200      	movs	r2, #0
 800214c:	731a      	strb	r2, [r3, #12]
	  osMessagePut(bmp180MailTempHandler,(uint32_t)qstruct, 100);
 800214e:	4b0a      	ldr	r3, [pc, #40]	; (8002178 <StartBmp180Sensor+0xc8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002154:	2264      	movs	r2, #100	; 0x64
 8002156:	4618      	mov	r0, r3
 8002158:	f005 fdae 	bl	8007cb8 <osMessagePut>
	  vTaskDelay(2000);
 800215c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002160:	f006 fe98 	bl	8008e94 <vTaskDelay>
  {
 8002164:	e7ab      	b.n	80020be <StartBmp180Sensor+0xe>
 8002166:	bf00      	nop
 8002168:	599877b1 	.word	0x599877b1
 800216c:	3f7eb8f8 	.word	0x3f7eb8f8
 8002170:	200012b4 	.word	0x200012b4
 8002174:	20001268 	.word	0x20001268
 8002178:	20001334 	.word	0x20001334
 800217c:	00000000 	.word	0x00000000

08002180 <StartRadio>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRadio */
void StartRadio(void const * argument)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b089      	sub	sp, #36	; 0x24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN StartRadio */

	uint8_t res = isChipConnected(); // проверяет подключён ли модуль к SPI
 8002188:	f000 fa12 	bl	80025b0 <isChipConnected>
 800218c:	4603      	mov	r3, r0
 800218e:	77fb      	strb	r3, [r7, #31]


	res = NRF_Init(); // инициализация
 8002190:	f000 f998 	bl	80024c4 <NRF_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	77fb      	strb	r3, [r7, #31]
	////////////// SET ////////////////

	setPALevel(RF24_PA_LOW);
 8002198:	2001      	movs	r0, #1
 800219a:	f000 fabd 	bl	8002718 <setPALevel>
	//uint8_t status = getPALevel();
	//setAutoAck(false);
	setPayloadSize(sizeof(struct meteo_data_struct));
 800219e:	2018      	movs	r0, #24
 80021a0:	f000 f97c 	bl	800249c <setPayloadSize>
	enableDynamicPayloads();
 80021a4:	f000 fa78 	bl	8002698 <enableDynamicPayloads>
	enableAckPayload();
 80021a8:	f000 fa96 	bl	80026d8 <enableAckPayload>
	setChannel(106);
 80021ac:	206a      	movs	r0, #106	; 0x6a
 80021ae:	f000 f967 	bl	8002480 <setChannel>
	openWritingPipe(pipe_addresses[2]);
 80021b2:	a415      	add	r4, pc, #84	; (adr r4, 8002208 <StartRadio+0x88>)
 80021b4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80021b8:	4618      	mov	r0, r3
 80021ba:	4621      	mov	r1, r4
 80021bc:	f000 fa2a 	bl	8002614 <openWritingPipe>
	transmit_query q;
	uint16_t iq;
  /* Infinite loop */
	for(;;)
	{
	      event = osMessageGet(msgRadioTransmitHandle, osWaitForever);
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <StartRadio+0x80>)
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	4c0f      	ldr	r4, [pc, #60]	; (8002204 <StartRadio+0x84>)
 80021c6:	463b      	mov	r3, r7
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	4618      	mov	r0, r3
 80021ce:	f005 fdb3 	bl	8007d38 <osMessageGet>
 80021d2:	463b      	mov	r3, r7
 80021d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80021d8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	      if (event.status == osEventMessage)
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <StartRadio+0x84>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b10      	cmp	r3, #16
 80021e2:	d1ed      	bne.n	80021c0 <StartRadio+0x40>
	      {
			  iq = event.value.v;
 80021e4:	4b07      	ldr	r3, [pc, #28]	; (8002204 <StartRadio+0x84>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	83bb      	strh	r3, [r7, #28]
			  q.query = iq *0xFF;
 80021ea:	8bbb      	ldrh	r3, [r7, #28]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	425b      	negs	r3, r3
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	767b      	strb	r3, [r7, #25]
			  q.type = iq >> 8;
 80021f4:	8bbb      	ldrh	r3, [r7, #28]
 80021f6:	0a1b      	lsrs	r3, r3, #8
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	763b      	strb	r3, [r7, #24]
	      event = osMessageGet(msgRadioTransmitHandle, osWaitForever);
 80021fe:	e7df      	b.n	80021c0 <StartRadio+0x40>
 8002200:	20001308 	.word	0x20001308
 8002204:	200003a8 	.word	0x200003a8
 8002208:	f0f0f0e2 	.word	0xf0f0f0e2
 800220c:	000000f0 	.word	0x000000f0

08002210 <CallbackTimerClock>:
  /* USER CODE END StartRadio */
}

/* CallbackTimerClock function */
void CallbackTimerClock(void const * argument)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CallbackTimerClock */
	  static uint32_t tim = 0;
	  tim++;
 8002218:	4b08      	ldr	r3, [pc, #32]	; (800223c <CallbackTimerClock+0x2c>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	3301      	adds	r3, #1
 800221e:	4a07      	ldr	r2, [pc, #28]	; (800223c <CallbackTimerClock+0x2c>)
 8002220:	6013      	str	r3, [r2, #0]

	  osMessagePut(msgClockTickHandle, tim, 0);
 8002222:	4b07      	ldr	r3, [pc, #28]	; (8002240 <CallbackTimerClock+0x30>)
 8002224:	6818      	ldr	r0, [r3, #0]
 8002226:	4b05      	ldr	r3, [pc, #20]	; (800223c <CallbackTimerClock+0x2c>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2200      	movs	r2, #0
 800222c:	4619      	mov	r1, r3
 800222e:	f005 fd43 	bl	8007cb8 <osMessagePut>
  /* USER CODE END CallbackTimerClock */
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200003b4 	.word	0x200003b4
 8002240:	2000137c 	.word	0x2000137c

08002244 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a04      	ldr	r2, [pc, #16]	; (8002264 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d101      	bne.n	800225a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002256:	f000 fd3f 	bl	8002cd8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40000800 	.word	0x40000800

08002268 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <delay_us>:
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // разрешаем использовать счётчик
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // запускаем счётчик
}

void delay_us(uint32_t us) // DelayMicro
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    uint32_t us_count_tic =  us * (SystemCoreClock / 1000000);
 800227c:	4b0b      	ldr	r3, [pc, #44]	; (80022ac <delay_us+0x38>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a0b      	ldr	r2, [pc, #44]	; (80022b0 <delay_us+0x3c>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0c9a      	lsrs	r2, r3, #18
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	fb02 f303 	mul.w	r3, r2, r3
 800228e:	60fb      	str	r3, [r7, #12]
    DWT->CYCCNT = 0U; // обнуляем счётчик
 8002290:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <delay_us+0x40>)
 8002292:	2200      	movs	r2, #0
 8002294:	605a      	str	r2, [r3, #4]
    while(DWT->CYCCNT < us_count_tic);
 8002296:	bf00      	nop
 8002298:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <delay_us+0x40>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d8fa      	bhi.n	8002298 <delay_us+0x24>
}
 80022a2:	bf00      	nop
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr
 80022ac:	20000004 	.word	0x20000004
 80022b0:	431bde83 	.word	0x431bde83
 80022b4:	e0001000 	.word	0xe0001000

080022b8 <csn>:

void csn(uint8_t level)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CSN_GPIO_Port, CSN_Pin, level);
 80022c2:	79fb      	ldrb	r3, [r7, #7]
 80022c4:	461a      	mov	r2, r3
 80022c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ca:	4805      	ldr	r0, [pc, #20]	; (80022e0 <csn+0x28>)
 80022cc:	f001 f9ec 	bl	80036a8 <HAL_GPIO_WritePin>
	delay_us(5);
 80022d0:	2005      	movs	r0, #5
 80022d2:	f7ff ffcf 	bl	8002274 <delay_us>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010c00 	.word	0x40010c00

080022e4 <ce>:

void ce(uint8_t level)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CE_GPIO_Port, CE_Pin, level);
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	461a      	mov	r2, r3
 80022f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022f6:	4803      	ldr	r0, [pc, #12]	; (8002304 <ce+0x20>)
 80022f8:	f001 f9d6 	bl	80036a8 <HAL_GPIO_WritePin>
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40010c00 	.word	0x40010c00

08002308 <read_register>:

uint8_t read_register(uint8_t reg)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	4603      	mov	r3, r0
 8002310:	71fb      	strb	r3, [r7, #7]
	uint8_t addr = R_REGISTER | (REGISTER_MASK & reg);
 8002312:	79fb      	ldrb	r3, [r7, #7]
 8002314:	f003 031f 	and.w	r3, r3, #31
 8002318:	b2db      	uxtb	r3, r3
 800231a:	73fb      	strb	r3, [r7, #15]
	uint8_t dt = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8002320:	2000      	movs	r0, #0
 8002322:	f7ff ffc9 	bl	80022b8 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &dt, 1, 1000);
 8002326:	f107 020e 	add.w	r2, r7, #14
 800232a:	f107 010f 	add.w	r1, r7, #15
 800232e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002332:	9300      	str	r3, [sp, #0]
 8002334:	2301      	movs	r3, #1
 8002336:	480a      	ldr	r0, [pc, #40]	; (8002360 <read_register+0x58>)
 8002338:	f004 fe7f 	bl	800703a <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi1, (uint8_t*)0xff, &dt, 1, 1000);
 800233c:	f107 020e 	add.w	r2, r7, #14
 8002340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2301      	movs	r3, #1
 8002348:	21ff      	movs	r1, #255	; 0xff
 800234a:	4805      	ldr	r0, [pc, #20]	; (8002360 <read_register+0x58>)
 800234c:	f004 fe75 	bl	800703a <HAL_SPI_TransmitReceive>
	csn(HIGH);
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff ffb1 	bl	80022b8 <csn>
	return dt;
 8002356:	7bbb      	ldrb	r3, [r7, #14]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20001380 	.word	0x20001380

08002364 <write_registerMy>:

uint8_t write_registerMy(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af02      	add	r7, sp, #8
 800236a:	4603      	mov	r3, r0
 800236c:	6039      	str	r1, [r7, #0]
 800236e:	71fb      	strb	r3, [r7, #7]
 8002370:	4613      	mov	r3, r2
 8002372:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	b2db      	uxtb	r3, r3
 8002380:	f043 0320 	orr.w	r3, r3, #32
 8002384:	b2db      	uxtb	r3, r3
 8002386:	73bb      	strb	r3, [r7, #14]

	csn(LOW);
 8002388:	2000      	movs	r0, #0
 800238a:	f7ff ff95 	bl	80022b8 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 800238e:	f107 020f 	add.w	r2, r7, #15
 8002392:	f107 010e 	add.w	r1, r7, #14
 8002396:	2364      	movs	r3, #100	; 0x64
 8002398:	9300      	str	r3, [sp, #0]
 800239a:	2301      	movs	r3, #1
 800239c:	4808      	ldr	r0, [pc, #32]	; (80023c0 <write_registerMy+0x5c>)
 800239e:	f004 fe4c 	bl	800703a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)buf, len, 100);
 80023a2:	79bb      	ldrb	r3, [r7, #6]
 80023a4:	b29a      	uxth	r2, r3
 80023a6:	2364      	movs	r3, #100	; 0x64
 80023a8:	6839      	ldr	r1, [r7, #0]
 80023aa:	4805      	ldr	r0, [pc, #20]	; (80023c0 <write_registerMy+0x5c>)
 80023ac:	f004 fd11 	bl	8006dd2 <HAL_SPI_Transmit>
	csn(HIGH);
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7ff ff81 	bl	80022b8 <csn>
	return status;
 80023b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20001380 	.word	0x20001380

080023c4 <write_register>:

uint8_t write_register(uint8_t reg, uint8_t value)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	4603      	mov	r3, r0
 80023cc:	460a      	mov	r2, r1
 80023ce:	71fb      	strb	r3, [r7, #7]
 80023d0:	4613      	mov	r3, r2
 80023d2:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80023d4:	2300      	movs	r3, #0
 80023d6:	73fb      	strb	r3, [r7, #15]
	uint8_t addr = W_REGISTER | (REGISTER_MASK & reg);
 80023d8:	79fb      	ldrb	r3, [r7, #7]
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f043 0320 	orr.w	r3, r3, #32
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	73bb      	strb	r3, [r7, #14]
	csn(LOW);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff ff65 	bl	80022b8 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &addr, &status, 1, 100);
 80023ee:	f107 020f 	add.w	r2, r7, #15
 80023f2:	f107 010e 	add.w	r1, r7, #14
 80023f6:	2364      	movs	r3, #100	; 0x64
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2301      	movs	r3, #1
 80023fc:	4808      	ldr	r0, [pc, #32]	; (8002420 <write_register+0x5c>)
 80023fe:	f004 fe1c 	bl	800703a <HAL_SPI_TransmitReceive>
	HAL_SPI_Transmit(&hspi1, &value, 1, 1000);
 8002402:	1db9      	adds	r1, r7, #6
 8002404:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002408:	2201      	movs	r2, #1
 800240a:	4805      	ldr	r0, [pc, #20]	; (8002420 <write_register+0x5c>)
 800240c:	f004 fce1 	bl	8006dd2 <HAL_SPI_Transmit>
	csn(HIGH);
 8002410:	2001      	movs	r0, #1
 8002412:	f7ff ff51 	bl	80022b8 <csn>
	return status;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	20001380 	.word	0x20001380

08002424 <flush_rx>:
	csn(HIGH);
	return status;
}

uint8_t flush_rx(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_RX);
 8002428:	20e2      	movs	r0, #226	; 0xe2
 800242a:	f000 f80b 	bl	8002444 <spiTrans>
 800242e:	4603      	mov	r3, r0
}
 8002430:	4618      	mov	r0, r3
 8002432:	bd80      	pop	{r7, pc}

08002434 <flush_tx>:

uint8_t flush_tx(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
	return spiTrans(FLUSH_TX);
 8002438:	20e1      	movs	r0, #225	; 0xe1
 800243a:	f000 f803 	bl	8002444 <spiTrans>
 800243e:	4603      	mov	r3, r0
}
 8002440:	4618      	mov	r0, r3
 8002442:	bd80      	pop	{r7, pc}

08002444 <spiTrans>:

uint8_t spiTrans(uint8_t cmd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af02      	add	r7, sp, #8
 800244a:	4603      	mov	r3, r0
 800244c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
	csn(LOW);
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff ff30 	bl	80022b8 <csn>
	HAL_SPI_TransmitReceive(&hspi1, &cmd, &status, 1, 1000);
 8002458:	f107 020f 	add.w	r2, r7, #15
 800245c:	1df9      	adds	r1, r7, #7
 800245e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	2301      	movs	r3, #1
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <spiTrans+0x38>)
 8002468:	f004 fde7 	bl	800703a <HAL_SPI_TransmitReceive>
	csn(HIGH);
 800246c:	2001      	movs	r0, #1
 800246e:	f7ff ff23 	bl	80022b8 <csn>
	return status;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20001380 	.word	0x20001380

08002480 <setChannel>:
{
	return spiTrans(NOP);
}

void setChannel(uint8_t channel)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
	write_register(RF_CH, channel);
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	4619      	mov	r1, r3
 800248e:	2005      	movs	r0, #5
 8002490:	f7ff ff98 	bl	80023c4 <write_register>
}
 8002494:	bf00      	nop
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <setPayloadSize>:
{
	return read_register(RF_CH);
}

void setPayloadSize(uint8_t size)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
	payload_size = rf24_min(size, 32);
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	2b20      	cmp	r3, #32
 80024aa:	bf28      	it	cs
 80024ac:	2320      	movcs	r3, #32
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <setPayloadSize+0x24>)
 80024b2:	701a      	strb	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	200003b8 	.word	0x200003b8

080024c4 <NRF_Init>:
{
	return payload_size;
}

uint8_t NRF_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
	uint8_t setup = 0;
 80024ca:	2300      	movs	r3, #0
 80024cc:	71fb      	strb	r3, [r7, #7]
	p_variant = false;
 80024ce:	4b33      	ldr	r3, [pc, #204]	; (800259c <NRF_Init+0xd8>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	701a      	strb	r2, [r3, #0]
	payload_size = 32;
 80024d4:	4b32      	ldr	r3, [pc, #200]	; (80025a0 <NRF_Init+0xdc>)
 80024d6:	2220      	movs	r2, #32
 80024d8:	701a      	strb	r2, [r3, #0]
	dynamic_payloads_enabled = false;
 80024da:	4b32      	ldr	r3, [pc, #200]	; (80025a4 <NRF_Init+0xe0>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
	addr_width = 5;
 80024e0:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <NRF_Init+0xe4>)
 80024e2:	2205      	movs	r2, #5
 80024e4:	701a      	strb	r2, [r3, #0]
	pipe0_reading_address[0] = 0;
 80024e6:	4b31      	ldr	r3, [pc, #196]	; (80025ac <NRF_Init+0xe8>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]

	ce(LOW);
 80024ec:	2000      	movs	r0, #0
 80024ee:	f7ff fef9 	bl	80022e4 <ce>
	csn(HIGH);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff fee0 	bl	80022b8 <csn>
	HAL_Delay(5);
 80024f8:	2005      	movs	r0, #5
 80024fa:	f000 fc09 	bl	8002d10 <HAL_Delay>

	write_register(NRF_CONFIG, 0x0C); // Reset NRF_CONFIG and enable 16-bit CRC.
 80024fe:	210c      	movs	r1, #12
 8002500:	2000      	movs	r0, #0
 8002502:	f7ff ff5f 	bl	80023c4 <write_register>
	setRetries(5, 15);
 8002506:	210f      	movs	r1, #15
 8002508:	2005      	movs	r0, #5
 800250a:	f000 f967 	bl	80027dc <setRetries>
	setPALevel(RF24_PA_MAX); // Reset value is MAX
 800250e:	2003      	movs	r0, #3
 8002510:	f000 f902 	bl	8002718 <setPALevel>

	if(setDataRate(RF24_250KBPS)) // check for connected module and if this is a p nRF24l01 variant
 8002514:	2002      	movs	r0, #2
 8002516:	f000 f921 	bl	800275c <setDataRate>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d002      	beq.n	8002526 <NRF_Init+0x62>
	{
		p_variant = true;
 8002520:	4b1e      	ldr	r3, [pc, #120]	; (800259c <NRF_Init+0xd8>)
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
	}

	setup = read_register(RF_SETUP);
 8002526:	2006      	movs	r0, #6
 8002528:	f7ff feee 	bl	8002308 <read_register>
 800252c:	4603      	mov	r3, r0
 800252e:	71fb      	strb	r3, [r7, #7]
	setDataRate(RF24_1MBPS); // Then set the data rate to the slowest (and most reliable) speed supported by all hardware.
 8002530:	2000      	movs	r0, #0
 8002532:	f000 f913 	bl	800275c <setDataRate>

	// Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
	toggle_features();
 8002536:	f000 f88f 	bl	8002658 <toggle_features>
	write_register(FEATURE, 0);
 800253a:	2100      	movs	r1, #0
 800253c:	201d      	movs	r0, #29
 800253e:	f7ff ff41 	bl	80023c4 <write_register>
	write_register(DYNPD, 0);
 8002542:	2100      	movs	r1, #0
 8002544:	201c      	movs	r0, #28
 8002546:	f7ff ff3d 	bl	80023c4 <write_register>
	dynamic_payloads_enabled = false;
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <NRF_Init+0xe0>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]

	// Reset current status. Notice reset and flush is the last thing we do
	write_register(NRF_STATUS, (1 << RX_DR) | (1 << TX_DS) | (1 << MAX_RT));
 8002550:	2170      	movs	r1, #112	; 0x70
 8002552:	2007      	movs	r0, #7
 8002554:	f7ff ff36 	bl	80023c4 <write_register>
	setChannel(76);
 8002558:	204c      	movs	r0, #76	; 0x4c
 800255a:	f7ff ff91 	bl	8002480 <setChannel>
	flush_rx();
 800255e:	f7ff ff61 	bl	8002424 <flush_rx>
	flush_tx();
 8002562:	f7ff ff67 	bl	8002434 <flush_tx>
	powerUp(); //Power up by default when begin() is called
 8002566:	f000 f838 	bl	80025da <powerUp>
	write_register(NRF_CONFIG, (read_register(NRF_CONFIG)) & ~(1 << PRIM_RX));
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff fecc 	bl	8002308 <read_register>
 8002570:	4603      	mov	r3, r0
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	b2db      	uxtb	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	2000      	movs	r0, #0
 800257c:	f7ff ff22 	bl	80023c4 <write_register>
	return (setup != 0 && setup != 0xff);
 8002580:	79fb      	ldrb	r3, [r7, #7]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d004      	beq.n	8002590 <NRF_Init+0xcc>
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	2bff      	cmp	r3, #255	; 0xff
 800258a:	d001      	beq.n	8002590 <NRF_Init+0xcc>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <NRF_Init+0xce>
 8002590:	2300      	movs	r3, #0
 8002592:	b2db      	uxtb	r3, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20001411 	.word	0x20001411
 80025a0:	200003b8 	.word	0x200003b8
 80025a4:	20001410 	.word	0x20001410
 80025a8:	200003c1 	.word	0x200003c1
 80025ac:	200003bc 	.word	0x200003bc

080025b0 <isChipConnected>:

bool isChipConnected()
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
	uint8_t setup = read_register(SETUP_AW);
 80025b6:	2003      	movs	r0, #3
 80025b8:	f7ff fea6 	bl	8002308 <read_register>
 80025bc:	4603      	mov	r3, r0
 80025be:	71fb      	strb	r3, [r7, #7]

	if(setup >= 1 && setup <= 3)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d004      	beq.n	80025d0 <isChipConnected+0x20>
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b03      	cmp	r3, #3
 80025ca:	d801      	bhi.n	80025d0 <isChipConnected+0x20>
	{
		return true;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e000      	b.n	80025d2 <isChipConnected+0x22>
	}

	return false;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <powerUp>:
	write_register(NRF_CONFIG, read_register(NRF_CONFIG) & ~(1 << PWR_UP));
}

//Power up now. Radio will not power down unless instructed by MCU for config changes etc.
void powerUp(void)
{
 80025da:	b580      	push	{r7, lr}
 80025dc:	b082      	sub	sp, #8
 80025de:	af00      	add	r7, sp, #0
	uint8_t cfg = read_register(NRF_CONFIG);
 80025e0:	2000      	movs	r0, #0
 80025e2:	f7ff fe91 	bl	8002308 <read_register>
 80025e6:	4603      	mov	r3, r0
 80025e8:	71fb      	strb	r3, [r7, #7]
	// if not powered up then power up and wait for the radio to initialize
	if(!(cfg & (1 << PWR_UP)))
 80025ea:	79fb      	ldrb	r3, [r7, #7]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <powerUp+0x30>
	{
		write_register(NRF_CONFIG, cfg | (1 << PWR_UP));
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	f043 0302 	orr.w	r3, r3, #2
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	4619      	mov	r1, r3
 80025fe:	2000      	movs	r0, #0
 8002600:	f7ff fee0 	bl	80023c4 <write_register>
		HAL_Delay(5);
 8002604:	2005      	movs	r0, #5
 8002606:	f000 fb83 	bl	8002d10 <HAL_Delay>
	}
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <openWritingPipe>:
	uint8_t rx_ready = status & (1 << RX_DR);*/
	return status;
}

void openWritingPipe(uint64_t value)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	e9c7 0100 	strd	r0, r1, [r7]
	write_registerMy(RX_ADDR_P0, (uint8_t*)&value, addr_width);
 800261e:	4b0c      	ldr	r3, [pc, #48]	; (8002650 <openWritingPipe+0x3c>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	463b      	mov	r3, r7
 8002624:	4619      	mov	r1, r3
 8002626:	200a      	movs	r0, #10
 8002628:	f7ff fe9c 	bl	8002364 <write_registerMy>
	write_registerMy(TX_ADDR, (uint8_t*)&value, addr_width);
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <openWritingPipe+0x3c>)
 800262e:	781a      	ldrb	r2, [r3, #0]
 8002630:	463b      	mov	r3, r7
 8002632:	4619      	mov	r1, r3
 8002634:	2010      	movs	r0, #16
 8002636:	f7ff fe95 	bl	8002364 <write_registerMy>
	write_register(RX_PW_P0, payload_size);
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <openWritingPipe+0x40>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	4619      	mov	r1, r3
 8002640:	2011      	movs	r0, #17
 8002642:	f7ff febf 	bl	80023c4 <write_register>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	200003c1 	.word	0x200003c1
 8002654:	200003b8 	.word	0x200003b8

08002658 <toggle_features>:
{
	write_register(EN_RXADDR, read_register(EN_RXADDR) & ~(1 << child_pipe_enable[pipe]));
}

void toggle_features(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
	uint8_t addr = ACTIVATE;
 800265e:	2350      	movs	r3, #80	; 0x50
 8002660:	71fb      	strb	r3, [r7, #7]
	csn(LOW);
 8002662:	2000      	movs	r0, #0
 8002664:	f7ff fe28 	bl	80022b8 <csn>
	HAL_SPI_Transmit(&hspi1, &addr, 1, 1000);
 8002668:	1df9      	adds	r1, r7, #7
 800266a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800266e:	2201      	movs	r2, #1
 8002670:	4808      	ldr	r0, [pc, #32]	; (8002694 <toggle_features+0x3c>)
 8002672:	f004 fbae 	bl	8006dd2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)0x73, 1, 1000);
 8002676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800267a:	2201      	movs	r2, #1
 800267c:	2173      	movs	r1, #115	; 0x73
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <toggle_features+0x3c>)
 8002680:	f004 fba7 	bl	8006dd2 <HAL_SPI_Transmit>
	csn(HIGH);
 8002684:	2001      	movs	r0, #1
 8002686:	f7ff fe17 	bl	80022b8 <csn>
}
 800268a:	bf00      	nop
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20001380 	.word	0x20001380

08002698 <enableDynamicPayloads>:

void enableDynamicPayloads(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_DPL));
 800269c:	201d      	movs	r0, #29
 800269e:	f7ff fe33 	bl	8002308 <read_register>
 80026a2:	4603      	mov	r3, r0
 80026a4:	f043 0304 	orr.w	r3, r3, #4
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	4619      	mov	r1, r3
 80026ac:	201d      	movs	r0, #29
 80026ae:	f7ff fe89 	bl	80023c4 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P5) | (1 << DPL_P4) | (1 << DPL_P3) | (1 << DPL_P2) | (1 << DPL_P1) | (1 << DPL_P0));
 80026b2:	201c      	movs	r0, #28
 80026b4:	f7ff fe28 	bl	8002308 <read_register>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	201c      	movs	r0, #28
 80026c4:	f7ff fe7e 	bl	80023c4 <write_register>
	dynamic_payloads_enabled = true;
 80026c8:	4b02      	ldr	r3, [pc, #8]	; (80026d4 <enableDynamicPayloads+0x3c>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20001410 	.word	0x20001410

080026d8 <enableAckPayload>:
	write_register(DYNPD, 0);
	dynamic_payloads_enabled = false;
}

void enableAckPayload(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
	write_register(FEATURE, read_register(FEATURE) | (1 << EN_ACK_PAY) | (1 << EN_DPL));
 80026dc:	201d      	movs	r0, #29
 80026de:	f7ff fe13 	bl	8002308 <read_register>
 80026e2:	4603      	mov	r3, r0
 80026e4:	f043 0306 	orr.w	r3, r3, #6
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	4619      	mov	r1, r3
 80026ec:	201d      	movs	r0, #29
 80026ee:	f7ff fe69 	bl	80023c4 <write_register>
	write_register(DYNPD, read_register(DYNPD) | (1 << DPL_P1) | (1 << DPL_P0));
 80026f2:	201c      	movs	r0, #28
 80026f4:	f7ff fe08 	bl	8002308 <read_register>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f043 0303 	orr.w	r3, r3, #3
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	4619      	mov	r1, r3
 8002702:	201c      	movs	r0, #28
 8002704:	f7ff fe5e 	bl	80023c4 <write_register>
	dynamic_payloads_enabled = true;
 8002708:	4b02      	ldr	r3, [pc, #8]	; (8002714 <enableAckPayload+0x3c>)
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20001410 	.word	0x20001410

08002718 <setPALevel>:
		write_register(EN_AA, en_aa);
	}
}

void setPALevel(uint8_t level)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = read_register(RF_SETUP) & 0xF8;
 8002722:	2006      	movs	r0, #6
 8002724:	f7ff fdf0 	bl	8002308 <read_register>
 8002728:	4603      	mov	r3, r0
 800272a:	f023 0307 	bic.w	r3, r3, #7
 800272e:	73fb      	strb	r3, [r7, #15]

  if(level > 3) // If invalid level, go to max PA
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d902      	bls.n	800273c <setPALevel+0x24>
  {
	  level = (RF24_PA_MAX << 1) | (RF24_PA_LOW << 1);		// +1 to support the SI24R1 chip extra bit
 8002736:	2306      	movs	r3, #6
 8002738:	71fb      	strb	r3, [r7, #7]
 800273a:	e002      	b.n	8002742 <setPALevel+0x2a>
  }
  else
  {
	  level = (level << 1);	 		// Else set level as requested
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	71fb      	strb	r3, [r7, #7]
  }

  write_register(RF_SETUP, setup |= level);	// Write it to the chip
 8002742:	7bfa      	ldrb	r2, [r7, #15]
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4313      	orrs	r3, r2
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	7bfb      	ldrb	r3, [r7, #15]
 800274c:	4619      	mov	r1, r3
 800274e:	2006      	movs	r0, #6
 8002750:	f7ff fe38 	bl	80023c4 <write_register>
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <setDataRate>:
{
	return (read_register(RF_SETUP) & ((1 << RF24_PA_LOW) | (1 << RF24_PA_HIGH))) >> 1;
}

bool setDataRate(rf24_datarate_e speed)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8002766:	2300      	movs	r3, #0
 8002768:	73fb      	strb	r3, [r7, #15]
	uint8_t setup = read_register(RF_SETUP);
 800276a:	2006      	movs	r0, #6
 800276c:	f7ff fdcc 	bl	8002308 <read_register>
 8002770:	4603      	mov	r3, r0
 8002772:	73bb      	strb	r3, [r7, #14]
	setup &= ~((1 << RF_DR_LOW) | (1 << RF_DR_HIGH));
 8002774:	7bbb      	ldrb	r3, [r7, #14]
 8002776:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800277a:	73bb      	strb	r3, [r7, #14]
	txDelay = 85;
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <setDataRate+0x7c>)
 800277e:	2255      	movs	r2, #85	; 0x55
 8002780:	701a      	strb	r2, [r3, #0]

	if(speed == RF24_250KBPS)
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	2b02      	cmp	r3, #2
 8002786:	d107      	bne.n	8002798 <setDataRate+0x3c>
	{
		setup |= (1 << RF_DR_LOW);
 8002788:	7bbb      	ldrb	r3, [r7, #14]
 800278a:	f043 0320 	orr.w	r3, r3, #32
 800278e:	73bb      	strb	r3, [r7, #14]
		txDelay = 155;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <setDataRate+0x7c>)
 8002792:	229b      	movs	r2, #155	; 0x9b
 8002794:	701a      	strb	r2, [r3, #0]
 8002796:	e009      	b.n	80027ac <setDataRate+0x50>
	}
	else
	{
		if(speed == RF24_2MBPS)
 8002798:	79fb      	ldrb	r3, [r7, #7]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d106      	bne.n	80027ac <setDataRate+0x50>
		{
			setup |= (1 << RF_DR_HIGH);
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	73bb      	strb	r3, [r7, #14]
			txDelay = 65;
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <setDataRate+0x7c>)
 80027a8:	2241      	movs	r2, #65	; 0x41
 80027aa:	701a      	strb	r2, [r3, #0]
		}
	}

	write_register(RF_SETUP, setup);
 80027ac:	7bbb      	ldrb	r3, [r7, #14]
 80027ae:	4619      	mov	r1, r3
 80027b0:	2006      	movs	r0, #6
 80027b2:	f7ff fe07 	bl	80023c4 <write_register>
	uint8_t ggg = read_register(RF_SETUP);
 80027b6:	2006      	movs	r0, #6
 80027b8:	f7ff fda6 	bl	8002308 <read_register>
 80027bc:	4603      	mov	r3, r0
 80027be:	737b      	strb	r3, [r7, #13]

	if(ggg == setup)
 80027c0:	7b7a      	ldrb	r2, [r7, #13]
 80027c2:	7bbb      	ldrb	r3, [r7, #14]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d101      	bne.n	80027cc <setDataRate+0x70>
	{
		result = true;
 80027c8:	2301      	movs	r3, #1
 80027ca:	73fb      	strb	r3, [r7, #15]
	}

	return result;
 80027cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3710      	adds	r7, #16
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200003c2 	.word	0x200003c2

080027dc <setRetries>:
	uint8_t disable = read_register(NRF_CONFIG) & ~(1 << EN_CRC);
	write_register(NRF_CONFIG, disable);
}

void setRetries(uint8_t delay, uint8_t count)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	460a      	mov	r2, r1
 80027e6:	71fb      	strb	r3, [r7, #7]
 80027e8:	4613      	mov	r3, r2
 80027ea:	71bb      	strb	r3, [r7, #6]
	write_register(SETUP_RETR, (delay&0xf)<<ARD | (count&0xf)<<ARC);
 80027ec:	79fb      	ldrb	r3, [r7, #7]
 80027ee:	011b      	lsls	r3, r3, #4
 80027f0:	b25a      	sxtb	r2, r3
 80027f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	b25b      	sxtb	r3, r3
 80027fc:	4313      	orrs	r3, r2
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	b2db      	uxtb	r3, r3
 8002802:	4619      	mov	r1, r3
 8002804:	2004      	movs	r0, #4
 8002806:	f7ff fddd 	bl	80023c4 <write_register>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800281a:	4b18      	ldr	r3, [pc, #96]	; (800287c <HAL_MspInit+0x68>)
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_MspInit+0x68>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6193      	str	r3, [r2, #24]
 8002826:	4b15      	ldr	r3, [pc, #84]	; (800287c <HAL_MspInit+0x68>)
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60bb      	str	r3, [r7, #8]
 8002830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002832:	4b12      	ldr	r3, [pc, #72]	; (800287c <HAL_MspInit+0x68>)
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	4a11      	ldr	r2, [pc, #68]	; (800287c <HAL_MspInit+0x68>)
 8002838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800283c:	61d3      	str	r3, [r2, #28]
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_MspInit+0x68>)
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	607b      	str	r3, [r7, #4]
 8002848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800284a:	2200      	movs	r2, #0
 800284c:	210f      	movs	r1, #15
 800284e:	f06f 0001 	mvn.w	r0, #1
 8002852:	f000 fb34 	bl	8002ebe <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <HAL_MspInit+0x6c>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	4a04      	ldr	r2, [pc, #16]	; (8002880 <HAL_MspInit+0x6c>)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002872:	bf00      	nop
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40021000 	.word	0x40021000
 8002880:	40010000 	.word	0x40010000

08002884 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b088      	sub	sp, #32
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]
 8002894:	605a      	str	r2, [r3, #4]
 8002896:	609a      	str	r2, [r3, #8]
 8002898:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a43      	ldr	r2, [pc, #268]	; (80029ac <HAL_I2C_MspInit+0x128>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d17f      	bne.n	80029a4 <HAL_I2C_MspInit+0x120>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028a4:	4b42      	ldr	r3, [pc, #264]	; (80029b0 <HAL_I2C_MspInit+0x12c>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	4a41      	ldr	r2, [pc, #260]	; (80029b0 <HAL_I2C_MspInit+0x12c>)
 80028aa:	f043 0308 	orr.w	r3, r3, #8
 80028ae:	6193      	str	r3, [r2, #24]
 80028b0:	4b3f      	ldr	r3, [pc, #252]	; (80029b0 <HAL_I2C_MspInit+0x12c>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f003 0308 	and.w	r3, r3, #8
 80028b8:	60fb      	str	r3, [r7, #12]
 80028ba:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028bc:	23c0      	movs	r3, #192	; 0xc0
 80028be:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028c0:	2312      	movs	r3, #18
 80028c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028c4:	2303      	movs	r3, #3
 80028c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028c8:	f107 0310 	add.w	r3, r7, #16
 80028cc:	4619      	mov	r1, r3
 80028ce:	4839      	ldr	r0, [pc, #228]	; (80029b4 <HAL_I2C_MspInit+0x130>)
 80028d0:	f000 fd90 	bl	80033f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028d4:	4b36      	ldr	r3, [pc, #216]	; (80029b0 <HAL_I2C_MspInit+0x12c>)
 80028d6:	69db      	ldr	r3, [r3, #28]
 80028d8:	4a35      	ldr	r2, [pc, #212]	; (80029b0 <HAL_I2C_MspInit+0x12c>)
 80028da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80028de:	61d3      	str	r3, [r2, #28]
 80028e0:	4b33      	ldr	r3, [pc, #204]	; (80029b0 <HAL_I2C_MspInit+0x12c>)
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80028ec:	4b32      	ldr	r3, [pc, #200]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 80028ee:	4a33      	ldr	r2, [pc, #204]	; (80029bc <HAL_I2C_MspInit+0x138>)
 80028f0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f2:	4b31      	ldr	r3, [pc, #196]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f8:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028fe:	4b2e      	ldr	r3, [pc, #184]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 8002900:	2280      	movs	r2, #128	; 0x80
 8002902:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002904:	4b2c      	ldr	r3, [pc, #176]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 800290c:	2200      	movs	r2, #0
 800290e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002910:	4b29      	ldr	r3, [pc, #164]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 8002912:	2200      	movs	r2, #0
 8002914:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002916:	4b28      	ldr	r3, [pc, #160]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 8002918:	2200      	movs	r2, #0
 800291a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800291c:	4826      	ldr	r0, [pc, #152]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 800291e:	f000 faf9 	bl	8002f14 <HAL_DMA_Init>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 8002928:	f7ff fc9e 	bl	8002268 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4a22      	ldr	r2, [pc, #136]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 8002930:	639a      	str	r2, [r3, #56]	; 0x38
 8002932:	4a21      	ldr	r2, [pc, #132]	; (80029b8 <HAL_I2C_MspInit+0x134>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8002938:	4b21      	ldr	r3, [pc, #132]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 800293a:	4a22      	ldr	r2, [pc, #136]	; (80029c4 <HAL_I2C_MspInit+0x140>)
 800293c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 8002940:	2210      	movs	r2, #16
 8002942:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002944:	4b1e      	ldr	r3, [pc, #120]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 8002946:	2200      	movs	r2, #0
 8002948:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800294a:	4b1d      	ldr	r3, [pc, #116]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 800294c:	2280      	movs	r2, #128	; 0x80
 800294e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 8002952:	2200      	movs	r2, #0
 8002954:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002956:	4b1a      	ldr	r3, [pc, #104]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 8002958:	2200      	movs	r2, #0
 800295a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800295c:	4b18      	ldr	r3, [pc, #96]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 800295e:	2200      	movs	r2, #0
 8002960:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002962:	4b17      	ldr	r3, [pc, #92]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 8002964:	2200      	movs	r2, #0
 8002966:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002968:	4815      	ldr	r0, [pc, #84]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 800296a:	f000 fad3 	bl	8002f14 <HAL_DMA_Init>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8002974:	f7ff fc78 	bl	8002268 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 800297c:	635a      	str	r2, [r3, #52]	; 0x34
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <HAL_I2C_MspInit+0x13c>)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002984:	2200      	movs	r2, #0
 8002986:	2105      	movs	r1, #5
 8002988:	201f      	movs	r0, #31
 800298a:	f000 fa98 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800298e:	201f      	movs	r0, #31
 8002990:	f000 fab1 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002994:	2200      	movs	r2, #0
 8002996:	2105      	movs	r1, #5
 8002998:	2020      	movs	r0, #32
 800299a:	f000 fa90 	bl	8002ebe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800299e:	2020      	movs	r0, #32
 80029a0:	f000 faa9 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029a4:	bf00      	nop
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40005400 	.word	0x40005400
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010c00 	.word	0x40010c00
 80029b8:	20001338 	.word	0x20001338
 80029bc:	40020080 	.word	0x40020080
 80029c0:	20001270 	.word	0x20001270
 80029c4:	4002006c 	.word	0x4002006c

080029c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a1b      	ldr	r2, [pc, #108]	; (8002a50 <HAL_SPI_MspInit+0x88>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d12f      	bne.n	8002a48 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029e8:	4b1a      	ldr	r3, [pc, #104]	; (8002a54 <HAL_SPI_MspInit+0x8c>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	4a19      	ldr	r2, [pc, #100]	; (8002a54 <HAL_SPI_MspInit+0x8c>)
 80029ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80029f2:	6193      	str	r3, [r2, #24]
 80029f4:	4b17      	ldr	r3, [pc, #92]	; (8002a54 <HAL_SPI_MspInit+0x8c>)
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029fc:	60fb      	str	r3, [r7, #12]
 80029fe:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a00:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <HAL_SPI_MspInit+0x8c>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	4a13      	ldr	r2, [pc, #76]	; (8002a54 <HAL_SPI_MspInit+0x8c>)
 8002a06:	f043 0304 	orr.w	r3, r3, #4
 8002a0a:	6193      	str	r3, [r2, #24]
 8002a0c:	4b11      	ldr	r3, [pc, #68]	; (8002a54 <HAL_SPI_MspInit+0x8c>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a18:	23a0      	movs	r3, #160	; 0xa0
 8002a1a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a20:	2303      	movs	r3, #3
 8002a22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 0310 	add.w	r3, r7, #16
 8002a28:	4619      	mov	r1, r3
 8002a2a:	480b      	ldr	r0, [pc, #44]	; (8002a58 <HAL_SPI_MspInit+0x90>)
 8002a2c:	f000 fce2 	bl	80033f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a30:	2340      	movs	r3, #64	; 0x40
 8002a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a34:	2300      	movs	r3, #0
 8002a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3c:	f107 0310 	add.w	r3, r7, #16
 8002a40:	4619      	mov	r1, r3
 8002a42:	4805      	ldr	r0, [pc, #20]	; (8002a58 <HAL_SPI_MspInit+0x90>)
 8002a44:	f000 fcd6 	bl	80033f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002a48:	bf00      	nop
 8002a4a:	3720      	adds	r7, #32
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	40013000 	.word	0x40013000
 8002a54:	40021000 	.word	0x40021000
 8002a58:	40010800 	.word	0x40010800

08002a5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a64:	2300      	movs	r3, #0
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	201e      	movs	r0, #30
 8002a72:	f000 fa24 	bl	8002ebe <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8002a76:	201e      	movs	r0, #30
 8002a78:	f000 fa3d 	bl	8002ef6 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002a7c:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <HAL_InitTick+0xa0>)
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	4a1e      	ldr	r2, [pc, #120]	; (8002afc <HAL_InitTick+0xa0>)
 8002a82:	f043 0304 	orr.w	r3, r3, #4
 8002a86:	61d3      	str	r3, [r2, #28]
 8002a88:	4b1c      	ldr	r3, [pc, #112]	; (8002afc <HAL_InitTick+0xa0>)
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	60fb      	str	r3, [r7, #12]
 8002a92:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a94:	f107 0210 	add.w	r2, r7, #16
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4611      	mov	r1, r2
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f004 f8e8 	bl	8006c74 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002aa4:	f004 f8d2 	bl	8006c4c <HAL_RCC_GetPCLK1Freq>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <HAL_InitTick+0xa4>)
 8002ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab6:	0c9b      	lsrs	r3, r3, #18
 8002ab8:	3b01      	subs	r3, #1
 8002aba:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002abc:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_InitTick+0xa8>)
 8002abe:	4a12      	ldr	r2, [pc, #72]	; (8002b08 <HAL_InitTick+0xac>)
 8002ac0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	; (8002b04 <HAL_InitTick+0xa8>)
 8002ac4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ac8:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002aca:	4a0e      	ldr	r2, [pc, #56]	; (8002b04 <HAL_InitTick+0xa8>)
 8002acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ace:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	; (8002b04 <HAL_InitTick+0xa8>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_InitTick+0xa8>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8002adc:	4809      	ldr	r0, [pc, #36]	; (8002b04 <HAL_InitTick+0xa8>)
 8002ade:	f004 fcd6 	bl	800748e <HAL_TIM_Base_Init>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d104      	bne.n	8002af2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 8002ae8:	4806      	ldr	r0, [pc, #24]	; (8002b04 <HAL_InitTick+0xa8>)
 8002aea:	f004 fd04 	bl	80074f6 <HAL_TIM_Base_Start_IT>
 8002aee:	4603      	mov	r3, r0
 8002af0:	e000      	b.n	8002af4 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3730      	adds	r7, #48	; 0x30
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000
 8002b00:	431bde83 	.word	0x431bde83
 8002b04:	20001414 	.word	0x20001414
 8002b08:	40000800 	.word	0x40000800

08002b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bc80      	pop	{r7}
 8002b16:	4770      	bx	lr

08002b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b1c:	e7fe      	b.n	8002b1c <HardFault_Handler+0x4>

08002b1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b1e:	b480      	push	{r7}
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b22:	e7fe      	b.n	8002b22 <MemManage_Handler+0x4>

08002b24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <BusFault_Handler+0x4>

08002b2a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <UsageFault_Handler+0x4>

08002b30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr

08002b3c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8002b40:	4802      	ldr	r0, [pc, #8]	; (8002b4c <DMA1_Channel6_IRQHandler+0x10>)
 8002b42:	f000 fb17 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	20001270 	.word	0x20001270

08002b50 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <DMA1_Channel7_IRQHandler+0x10>)
 8002b56:	f000 fb0d 	bl	8003174 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20001338 	.word	0x20001338

08002b64 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002b68:	4802      	ldr	r0, [pc, #8]	; (8002b74 <TIM4_IRQHandler+0x10>)
 8002b6a:	f004 fce7 	bl	800753c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002b6e:	bf00      	nop
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	20001414 	.word	0x20001414

08002b78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002b7c:	4802      	ldr	r0, [pc, #8]	; (8002b88 <I2C1_EV_IRQHandler+0x10>)
 8002b7e:	f001 fc1f 	bl	80043c0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002b82:	bf00      	nop
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	200012b4 	.word	0x200012b4

08002b8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <I2C1_ER_IRQHandler+0x10>)
 8002b92:	f001 fd7b 	bl	800468c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200012b4 	.word	0x200012b4

08002ba0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <_sbrk+0x50>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <_sbrk+0x16>
		heap_end = &end;
 8002bb0:	4b0f      	ldr	r3, [pc, #60]	; (8002bf0 <_sbrk+0x50>)
 8002bb2:	4a10      	ldr	r2, [pc, #64]	; (8002bf4 <_sbrk+0x54>)
 8002bb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002bb6:	4b0e      	ldr	r3, [pc, #56]	; (8002bf0 <_sbrk+0x50>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002bbc:	4b0c      	ldr	r3, [pc, #48]	; (8002bf0 <_sbrk+0x50>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	466a      	mov	r2, sp
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d907      	bls.n	8002bda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002bca:	f007 fe1f 	bl	800a80c <__errno>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002bd8:	e006      	b.n	8002be8 <_sbrk+0x48>
	}

	heap_end += incr;
 8002bda:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <_sbrk+0x50>)
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <_sbrk+0x50>)
 8002be4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002be6:	68fb      	ldr	r3, [r7, #12]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	200003c4 	.word	0x200003c4
 8002bf4:	200014a0 	.word	0x200014a0

08002bf8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002bfc:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <SystemInit+0x5c>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a14      	ldr	r2, [pc, #80]	; (8002c54 <SystemInit+0x5c>)
 8002c02:	f043 0301 	orr.w	r3, r3, #1
 8002c06:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <SystemInit+0x5c>)
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	4911      	ldr	r1, [pc, #68]	; (8002c54 <SystemInit+0x5c>)
 8002c0e:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <SystemInit+0x60>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002c14:	4b0f      	ldr	r3, [pc, #60]	; (8002c54 <SystemInit+0x5c>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a0e      	ldr	r2, [pc, #56]	; (8002c54 <SystemInit+0x5c>)
 8002c1a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002c1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c22:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002c24:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <SystemInit+0x5c>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <SystemInit+0x5c>)
 8002c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c2e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002c30:	4b08      	ldr	r3, [pc, #32]	; (8002c54 <SystemInit+0x5c>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <SystemInit+0x5c>)
 8002c36:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002c3a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002c3c:	4b05      	ldr	r3, [pc, #20]	; (8002c54 <SystemInit+0x5c>)
 8002c3e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8002c42:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002c44:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <SystemInit+0x64>)
 8002c46:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c4a:	609a      	str	r2, [r3, #8]
#endif 
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	40021000 	.word	0x40021000
 8002c58:	f8ff0000 	.word	0xf8ff0000
 8002c5c:	e000ed00 	.word	0xe000ed00

08002c60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002c60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002c62:	e003      	b.n	8002c6c <LoopCopyDataInit>

08002c64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002c66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002c68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002c6a:	3104      	adds	r1, #4

08002c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002c6c:	480a      	ldr	r0, [pc, #40]	; (8002c98 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002c6e:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002c70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002c72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002c74:	d3f6      	bcc.n	8002c64 <CopyDataInit>
  ldr r2, =_sbss
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002c78:	e002      	b.n	8002c80 <LoopFillZerobss>

08002c7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002c7a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002c7c:	f842 3b04 	str.w	r3, [r2], #4

08002c80 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002c80:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002c82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002c84:	d3f9      	bcc.n	8002c7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002c86:	f7ff ffb7 	bl	8002bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c8a:	f007 fdc5 	bl	800a818 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c8e:	f7fe feb3 	bl	80019f8 <main>
  bx lr
 8002c92:	4770      	bx	lr
  ldr r3, =_sidata
 8002c94:	0800b388 	.word	0x0800b388
  ldr r0, =_sdata
 8002c98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002c9c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002ca0:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002ca4:	2000149c 	.word	0x2000149c

08002ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ca8:	e7fe      	b.n	8002ca8 <ADC1_2_IRQHandler>
	...

08002cac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cb0:	4b08      	ldr	r3, [pc, #32]	; (8002cd4 <HAL_Init+0x28>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a07      	ldr	r2, [pc, #28]	; (8002cd4 <HAL_Init+0x28>)
 8002cb6:	f043 0310 	orr.w	r3, r3, #16
 8002cba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cbc:	2003      	movs	r0, #3
 8002cbe:	f000 f8f3 	bl	8002ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7ff feca 	bl	8002a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc8:	f7ff fda4 	bl	8002814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ccc:	2300      	movs	r3, #0
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40022000 	.word	0x40022000

08002cd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <HAL_IncTick+0x1c>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <HAL_IncTick+0x20>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	4a03      	ldr	r2, [pc, #12]	; (8002cf8 <HAL_IncTick+0x20>)
 8002cea:	6013      	str	r3, [r2, #0]
}
 8002cec:	bf00      	nop
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr
 8002cf4:	2000000c 	.word	0x2000000c
 8002cf8:	20001454 	.word	0x20001454

08002cfc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <HAL_GetTick+0x10>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	20001454 	.word	0x20001454

08002d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff fff0 	bl	8002cfc <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d005      	beq.n	8002d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <HAL_Delay+0x40>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d36:	bf00      	nop
 8002d38:	f7ff ffe0 	bl	8002cfc <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f7      	bhi.n	8002d38 <HAL_Delay+0x28>
  {
  }
}
 8002d48:	bf00      	nop
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	2000000c 	.word	0x2000000c

08002d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d64:	4b0c      	ldr	r3, [pc, #48]	; (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d6a:	68ba      	ldr	r2, [r7, #8]
 8002d6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d70:	4013      	ands	r3, r2
 8002d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d86:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <__NVIC_SetPriorityGrouping+0x44>)
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	60d3      	str	r3, [r2, #12]
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <__NVIC_GetPriorityGrouping+0x18>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	f003 0307 	and.w	r3, r3, #7
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	db0b      	blt.n	8002de2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dca:	79fb      	ldrb	r3, [r7, #7]
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	4906      	ldr	r1, [pc, #24]	; (8002dec <__NVIC_EnableIRQ+0x34>)
 8002dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dd6:	095b      	lsrs	r3, r3, #5
 8002dd8:	2001      	movs	r0, #1
 8002dda:	fa00 f202 	lsl.w	r2, r0, r2
 8002dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc80      	pop	{r7}
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100

08002df0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	db0a      	blt.n	8002e1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	b2da      	uxtb	r2, r3
 8002e08:	490c      	ldr	r1, [pc, #48]	; (8002e3c <__NVIC_SetPriority+0x4c>)
 8002e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	440b      	add	r3, r1
 8002e14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e18:	e00a      	b.n	8002e30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	b2da      	uxtb	r2, r3
 8002e1e:	4908      	ldr	r1, [pc, #32]	; (8002e40 <__NVIC_SetPriority+0x50>)
 8002e20:	79fb      	ldrb	r3, [r7, #7]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	3b04      	subs	r3, #4
 8002e28:	0112      	lsls	r2, r2, #4
 8002e2a:	b2d2      	uxtb	r2, r2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	761a      	strb	r2, [r3, #24]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	e000e100 	.word	0xe000e100
 8002e40:	e000ed00 	.word	0xe000ed00

08002e44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	; 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f003 0307 	and.w	r3, r3, #7
 8002e56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	f1c3 0307 	rsb	r3, r3, #7
 8002e5e:	2b04      	cmp	r3, #4
 8002e60:	bf28      	it	cs
 8002e62:	2304      	movcs	r3, #4
 8002e64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3304      	adds	r3, #4
 8002e6a:	2b06      	cmp	r3, #6
 8002e6c:	d902      	bls.n	8002e74 <NVIC_EncodePriority+0x30>
 8002e6e:	69fb      	ldr	r3, [r7, #28]
 8002e70:	3b03      	subs	r3, #3
 8002e72:	e000      	b.n	8002e76 <NVIC_EncodePriority+0x32>
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e78:	f04f 32ff 	mov.w	r2, #4294967295
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43da      	mvns	r2, r3
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	401a      	ands	r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	fa01 f303 	lsl.w	r3, r1, r3
 8002e96:	43d9      	mvns	r1, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e9c:	4313      	orrs	r3, r2
         );
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3724      	adds	r7, #36	; 0x24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bc80      	pop	{r7}
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7ff ff4f 	bl	8002d54 <__NVIC_SetPriorityGrouping>
}
 8002eb6:	bf00      	nop
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b086      	sub	sp, #24
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ed0:	f7ff ff64 	bl	8002d9c <__NVIC_GetPriorityGrouping>
 8002ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ffb2 	bl	8002e44 <NVIC_EncodePriority>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff ff81 	bl	8002df0 <__NVIC_SetPriority>
}
 8002eee:	bf00      	nop
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b082      	sub	sp, #8
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	4603      	mov	r3, r0
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff57 	bl	8002db8 <__NVIC_EnableIRQ>
}
 8002f0a:	bf00      	nop
 8002f0c:	3708      	adds	r7, #8
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
	...

08002f14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e043      	b.n	8002fb2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	4b22      	ldr	r3, [pc, #136]	; (8002fbc <HAL_DMA_Init+0xa8>)
 8002f32:	4413      	add	r3, r2
 8002f34:	4a22      	ldr	r2, [pc, #136]	; (8002fc0 <HAL_DMA_Init+0xac>)
 8002f36:	fba2 2303 	umull	r2, r3, r2, r3
 8002f3a:	091b      	lsrs	r3, r3, #4
 8002f3c:	009a      	lsls	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1f      	ldr	r2, [pc, #124]	; (8002fc4 <HAL_DMA_Init+0xb0>)
 8002f46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f5e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	bffdfff8 	.word	0xbffdfff8
 8002fc0:	cccccccd 	.word	0xcccccccd
 8002fc4:	40020000 	.word	0x40020000

08002fc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b086      	sub	sp, #24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d101      	bne.n	8002fe8 <HAL_DMA_Start_IT+0x20>
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	e04a      	b.n	800307e <HAL_DMA_Start_IT+0xb6>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d13a      	bne.n	8003070 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 0201 	bic.w	r2, r2, #1
 8003016:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68b9      	ldr	r1, [r7, #8]
 800301e:	68f8      	ldr	r0, [r7, #12]
 8003020:	f000 f9ba 	bl	8003398 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 020e 	orr.w	r2, r2, #14
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	e00f      	b.n	800305e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 0204 	bic.w	r2, r2, #4
 800304c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 020a 	orr.w	r2, r2, #10
 800305c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]
 800306e:	e005      	b.n	800307c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003078:	2302      	movs	r3, #2
 800307a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800307c:	7dfb      	ldrb	r3, [r7, #23]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800309a:	2b02      	cmp	r3, #2
 800309c:	d005      	beq.n	80030aa <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2204      	movs	r2, #4
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	e051      	b.n	800314e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f022 020e 	bic.w	r2, r2, #14
 80030b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a22      	ldr	r2, [pc, #136]	; (8003158 <HAL_DMA_Abort_IT+0xd0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d029      	beq.n	8003128 <HAL_DMA_Abort_IT+0xa0>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a20      	ldr	r2, [pc, #128]	; (800315c <HAL_DMA_Abort_IT+0xd4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d022      	beq.n	8003124 <HAL_DMA_Abort_IT+0x9c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1f      	ldr	r2, [pc, #124]	; (8003160 <HAL_DMA_Abort_IT+0xd8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d01a      	beq.n	800311e <HAL_DMA_Abort_IT+0x96>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1d      	ldr	r2, [pc, #116]	; (8003164 <HAL_DMA_Abort_IT+0xdc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d012      	beq.n	8003118 <HAL_DMA_Abort_IT+0x90>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a1c      	ldr	r2, [pc, #112]	; (8003168 <HAL_DMA_Abort_IT+0xe0>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d00a      	beq.n	8003112 <HAL_DMA_Abort_IT+0x8a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1a      	ldr	r2, [pc, #104]	; (800316c <HAL_DMA_Abort_IT+0xe4>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d102      	bne.n	800310c <HAL_DMA_Abort_IT+0x84>
 8003106:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800310a:	e00e      	b.n	800312a <HAL_DMA_Abort_IT+0xa2>
 800310c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003110:	e00b      	b.n	800312a <HAL_DMA_Abort_IT+0xa2>
 8003112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003116:	e008      	b.n	800312a <HAL_DMA_Abort_IT+0xa2>
 8003118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800311c:	e005      	b.n	800312a <HAL_DMA_Abort_IT+0xa2>
 800311e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003122:	e002      	b.n	800312a <HAL_DMA_Abort_IT+0xa2>
 8003124:	2310      	movs	r3, #16
 8003126:	e000      	b.n	800312a <HAL_DMA_Abort_IT+0xa2>
 8003128:	2301      	movs	r3, #1
 800312a:	4a11      	ldr	r2, [pc, #68]	; (8003170 <HAL_DMA_Abort_IT+0xe8>)
 800312c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003142:	2b00      	cmp	r3, #0
 8003144:	d003      	beq.n	800314e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	4798      	blx	r3
    } 
  }
  return status;
 800314e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40020008 	.word	0x40020008
 800315c:	4002001c 	.word	0x4002001c
 8003160:	40020030 	.word	0x40020030
 8003164:	40020044 	.word	0x40020044
 8003168:	40020058 	.word	0x40020058
 800316c:	4002006c 	.word	0x4002006c
 8003170:	40020000 	.word	0x40020000

08003174 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003190:	2204      	movs	r2, #4
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	d04f      	beq.n	800323c <HAL_DMA_IRQHandler+0xc8>
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f003 0304 	and.w	r3, r3, #4
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d04a      	beq.n	800323c <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d107      	bne.n	80031c4 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a66      	ldr	r2, [pc, #408]	; (8003364 <HAL_DMA_IRQHandler+0x1f0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d029      	beq.n	8003222 <HAL_DMA_IRQHandler+0xae>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a65      	ldr	r2, [pc, #404]	; (8003368 <HAL_DMA_IRQHandler+0x1f4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMA_IRQHandler+0xaa>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a63      	ldr	r2, [pc, #396]	; (800336c <HAL_DMA_IRQHandler+0x1f8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01a      	beq.n	8003218 <HAL_DMA_IRQHandler+0xa4>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a62      	ldr	r2, [pc, #392]	; (8003370 <HAL_DMA_IRQHandler+0x1fc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d012      	beq.n	8003212 <HAL_DMA_IRQHandler+0x9e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a60      	ldr	r2, [pc, #384]	; (8003374 <HAL_DMA_IRQHandler+0x200>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d00a      	beq.n	800320c <HAL_DMA_IRQHandler+0x98>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a5f      	ldr	r2, [pc, #380]	; (8003378 <HAL_DMA_IRQHandler+0x204>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d102      	bne.n	8003206 <HAL_DMA_IRQHandler+0x92>
 8003200:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003204:	e00e      	b.n	8003224 <HAL_DMA_IRQHandler+0xb0>
 8003206:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800320a:	e00b      	b.n	8003224 <HAL_DMA_IRQHandler+0xb0>
 800320c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003210:	e008      	b.n	8003224 <HAL_DMA_IRQHandler+0xb0>
 8003212:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003216:	e005      	b.n	8003224 <HAL_DMA_IRQHandler+0xb0>
 8003218:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800321c:	e002      	b.n	8003224 <HAL_DMA_IRQHandler+0xb0>
 800321e:	2340      	movs	r3, #64	; 0x40
 8003220:	e000      	b.n	8003224 <HAL_DMA_IRQHandler+0xb0>
 8003222:	2304      	movs	r3, #4
 8003224:	4a55      	ldr	r2, [pc, #340]	; (800337c <HAL_DMA_IRQHandler+0x208>)
 8003226:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8094 	beq.w	800335a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800323a:	e08e      	b.n	800335a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003240:	2202      	movs	r2, #2
 8003242:	409a      	lsls	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4013      	ands	r3, r2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d056      	beq.n	80032fa <HAL_DMA_IRQHandler+0x186>
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d051      	beq.n	80032fa <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0320 	and.w	r3, r3, #32
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10b      	bne.n	800327c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 020a 	bic.w	r2, r2, #10
 8003272:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a38      	ldr	r2, [pc, #224]	; (8003364 <HAL_DMA_IRQHandler+0x1f0>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d029      	beq.n	80032da <HAL_DMA_IRQHandler+0x166>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a37      	ldr	r2, [pc, #220]	; (8003368 <HAL_DMA_IRQHandler+0x1f4>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d022      	beq.n	80032d6 <HAL_DMA_IRQHandler+0x162>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a35      	ldr	r2, [pc, #212]	; (800336c <HAL_DMA_IRQHandler+0x1f8>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d01a      	beq.n	80032d0 <HAL_DMA_IRQHandler+0x15c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a34      	ldr	r2, [pc, #208]	; (8003370 <HAL_DMA_IRQHandler+0x1fc>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d012      	beq.n	80032ca <HAL_DMA_IRQHandler+0x156>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a32      	ldr	r2, [pc, #200]	; (8003374 <HAL_DMA_IRQHandler+0x200>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d00a      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x150>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a31      	ldr	r2, [pc, #196]	; (8003378 <HAL_DMA_IRQHandler+0x204>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d102      	bne.n	80032be <HAL_DMA_IRQHandler+0x14a>
 80032b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032bc:	e00e      	b.n	80032dc <HAL_DMA_IRQHandler+0x168>
 80032be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c2:	e00b      	b.n	80032dc <HAL_DMA_IRQHandler+0x168>
 80032c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032c8:	e008      	b.n	80032dc <HAL_DMA_IRQHandler+0x168>
 80032ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032ce:	e005      	b.n	80032dc <HAL_DMA_IRQHandler+0x168>
 80032d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d4:	e002      	b.n	80032dc <HAL_DMA_IRQHandler+0x168>
 80032d6:	2320      	movs	r3, #32
 80032d8:	e000      	b.n	80032dc <HAL_DMA_IRQHandler+0x168>
 80032da:	2302      	movs	r3, #2
 80032dc:	4a27      	ldr	r2, [pc, #156]	; (800337c <HAL_DMA_IRQHandler+0x208>)
 80032de:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d034      	beq.n	800335a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032f8:	e02f      	b.n	800335a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fe:	2208      	movs	r2, #8
 8003300:	409a      	lsls	r2, r3
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d028      	beq.n	800335c <HAL_DMA_IRQHandler+0x1e8>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 0308 	and.w	r3, r3, #8
 8003310:	2b00      	cmp	r3, #0
 8003312:	d023      	beq.n	800335c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 020e 	bic.w	r2, r2, #14
 8003322:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	2101      	movs	r1, #1
 800332e:	fa01 f202 	lsl.w	r2, r1, r2
 8003332:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	2b00      	cmp	r3, #0
 8003350:	d004      	beq.n	800335c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	4798      	blx	r3
    }
  }
  return;
 800335a:	bf00      	nop
 800335c:	bf00      	nop
}
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40020008 	.word	0x40020008
 8003368:	4002001c 	.word	0x4002001c
 800336c:	40020030 	.word	0x40020030
 8003370:	40020044 	.word	0x40020044
 8003374:	40020058 	.word	0x40020058
 8003378:	4002006c 	.word	0x4002006c
 800337c:	40020000 	.word	0x40020000

08003380 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	bc80      	pop	{r7}
 8003396:	4770      	bx	lr

08003398 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
 80033a4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ae:	2101      	movs	r1, #1
 80033b0:	fa01 f202 	lsl.w	r2, r1, r2
 80033b4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	683a      	ldr	r2, [r7, #0]
 80033bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d108      	bne.n	80033d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80033d6:	e007      	b.n	80033e8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	60da      	str	r2, [r3, #12]
}
 80033e8:	bf00      	nop
 80033ea:	3714      	adds	r7, #20
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bc80      	pop	{r7}
 80033f0:	4770      	bx	lr
	...

080033f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b08b      	sub	sp, #44	; 0x2c
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80033fe:	2300      	movs	r3, #0
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003406:	e127      	b.n	8003658 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003408:	2201      	movs	r2, #1
 800340a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69fa      	ldr	r2, [r7, #28]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	429a      	cmp	r2, r3
 8003422:	f040 8116 	bne.w	8003652 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b12      	cmp	r3, #18
 800342c:	d034      	beq.n	8003498 <HAL_GPIO_Init+0xa4>
 800342e:	2b12      	cmp	r3, #18
 8003430:	d80d      	bhi.n	800344e <HAL_GPIO_Init+0x5a>
 8003432:	2b02      	cmp	r3, #2
 8003434:	d02b      	beq.n	800348e <HAL_GPIO_Init+0x9a>
 8003436:	2b02      	cmp	r3, #2
 8003438:	d804      	bhi.n	8003444 <HAL_GPIO_Init+0x50>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d031      	beq.n	80034a2 <HAL_GPIO_Init+0xae>
 800343e:	2b01      	cmp	r3, #1
 8003440:	d01c      	beq.n	800347c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003442:	e048      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003444:	2b03      	cmp	r3, #3
 8003446:	d043      	beq.n	80034d0 <HAL_GPIO_Init+0xdc>
 8003448:	2b11      	cmp	r3, #17
 800344a:	d01b      	beq.n	8003484 <HAL_GPIO_Init+0x90>
          break;
 800344c:	e043      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800344e:	4a89      	ldr	r2, [pc, #548]	; (8003674 <HAL_GPIO_Init+0x280>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d026      	beq.n	80034a2 <HAL_GPIO_Init+0xae>
 8003454:	4a87      	ldr	r2, [pc, #540]	; (8003674 <HAL_GPIO_Init+0x280>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d806      	bhi.n	8003468 <HAL_GPIO_Init+0x74>
 800345a:	4a87      	ldr	r2, [pc, #540]	; (8003678 <HAL_GPIO_Init+0x284>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d020      	beq.n	80034a2 <HAL_GPIO_Init+0xae>
 8003460:	4a86      	ldr	r2, [pc, #536]	; (800367c <HAL_GPIO_Init+0x288>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d01d      	beq.n	80034a2 <HAL_GPIO_Init+0xae>
          break;
 8003466:	e036      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003468:	4a85      	ldr	r2, [pc, #532]	; (8003680 <HAL_GPIO_Init+0x28c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d019      	beq.n	80034a2 <HAL_GPIO_Init+0xae>
 800346e:	4a85      	ldr	r2, [pc, #532]	; (8003684 <HAL_GPIO_Init+0x290>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d016      	beq.n	80034a2 <HAL_GPIO_Init+0xae>
 8003474:	4a84      	ldr	r2, [pc, #528]	; (8003688 <HAL_GPIO_Init+0x294>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d013      	beq.n	80034a2 <HAL_GPIO_Init+0xae>
          break;
 800347a:	e02c      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	623b      	str	r3, [r7, #32]
          break;
 8003482:	e028      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	3304      	adds	r3, #4
 800348a:	623b      	str	r3, [r7, #32]
          break;
 800348c:	e023      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	3308      	adds	r3, #8
 8003494:	623b      	str	r3, [r7, #32]
          break;
 8003496:	e01e      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	330c      	adds	r3, #12
 800349e:	623b      	str	r3, [r7, #32]
          break;
 80034a0:	e019      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d102      	bne.n	80034b0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80034aa:	2304      	movs	r3, #4
 80034ac:	623b      	str	r3, [r7, #32]
          break;
 80034ae:	e012      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d105      	bne.n	80034c4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034b8:	2308      	movs	r3, #8
 80034ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	611a      	str	r2, [r3, #16]
          break;
 80034c2:	e008      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80034c4:	2308      	movs	r3, #8
 80034c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	69fa      	ldr	r2, [r7, #28]
 80034cc:	615a      	str	r2, [r3, #20]
          break;
 80034ce:	e002      	b.n	80034d6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
          break;
 80034d4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2bff      	cmp	r3, #255	; 0xff
 80034da:	d801      	bhi.n	80034e0 <HAL_GPIO_Init+0xec>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	e001      	b.n	80034e4 <HAL_GPIO_Init+0xf0>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3304      	adds	r3, #4
 80034e4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	2bff      	cmp	r3, #255	; 0xff
 80034ea:	d802      	bhi.n	80034f2 <HAL_GPIO_Init+0xfe>
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	e002      	b.n	80034f8 <HAL_GPIO_Init+0x104>
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	3b08      	subs	r3, #8
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	210f      	movs	r1, #15
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	fa01 f303 	lsl.w	r3, r1, r3
 8003506:	43db      	mvns	r3, r3
 8003508:	401a      	ands	r2, r3
 800350a:	6a39      	ldr	r1, [r7, #32]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	fa01 f303 	lsl.w	r3, r1, r3
 8003512:	431a      	orrs	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	f000 8096 	beq.w	8003652 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003526:	4b59      	ldr	r3, [pc, #356]	; (800368c <HAL_GPIO_Init+0x298>)
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	4a58      	ldr	r2, [pc, #352]	; (800368c <HAL_GPIO_Init+0x298>)
 800352c:	f043 0301 	orr.w	r3, r3, #1
 8003530:	6193      	str	r3, [r2, #24]
 8003532:	4b56      	ldr	r3, [pc, #344]	; (800368c <HAL_GPIO_Init+0x298>)
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	60bb      	str	r3, [r7, #8]
 800353c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800353e:	4a54      	ldr	r2, [pc, #336]	; (8003690 <HAL_GPIO_Init+0x29c>)
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	089b      	lsrs	r3, r3, #2
 8003544:	3302      	adds	r3, #2
 8003546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800354a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	f003 0303 	and.w	r3, r3, #3
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	220f      	movs	r2, #15
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43db      	mvns	r3, r3
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4013      	ands	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4b      	ldr	r2, [pc, #300]	; (8003694 <HAL_GPIO_Init+0x2a0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d013      	beq.n	8003592 <HAL_GPIO_Init+0x19e>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4a      	ldr	r2, [pc, #296]	; (8003698 <HAL_GPIO_Init+0x2a4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00d      	beq.n	800358e <HAL_GPIO_Init+0x19a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a49      	ldr	r2, [pc, #292]	; (800369c <HAL_GPIO_Init+0x2a8>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <HAL_GPIO_Init+0x196>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a48      	ldr	r2, [pc, #288]	; (80036a0 <HAL_GPIO_Init+0x2ac>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d101      	bne.n	8003586 <HAL_GPIO_Init+0x192>
 8003582:	2303      	movs	r3, #3
 8003584:	e006      	b.n	8003594 <HAL_GPIO_Init+0x1a0>
 8003586:	2304      	movs	r3, #4
 8003588:	e004      	b.n	8003594 <HAL_GPIO_Init+0x1a0>
 800358a:	2302      	movs	r3, #2
 800358c:	e002      	b.n	8003594 <HAL_GPIO_Init+0x1a0>
 800358e:	2301      	movs	r3, #1
 8003590:	e000      	b.n	8003594 <HAL_GPIO_Init+0x1a0>
 8003592:	2300      	movs	r3, #0
 8003594:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003596:	f002 0203 	and.w	r2, r2, #3
 800359a:	0092      	lsls	r2, r2, #2
 800359c:	4093      	lsls	r3, r2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80035a4:	493a      	ldr	r1, [pc, #232]	; (8003690 <HAL_GPIO_Init+0x29c>)
 80035a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a8:	089b      	lsrs	r3, r3, #2
 80035aa:	3302      	adds	r3, #2
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d006      	beq.n	80035cc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80035be:	4b39      	ldr	r3, [pc, #228]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	4938      	ldr	r1, [pc, #224]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	600b      	str	r3, [r1, #0]
 80035ca:	e006      	b.n	80035da <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80035cc:	4b35      	ldr	r3, [pc, #212]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	43db      	mvns	r3, r3
 80035d4:	4933      	ldr	r1, [pc, #204]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d006      	beq.n	80035f4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80035e6:	4b2f      	ldr	r3, [pc, #188]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 80035e8:	685a      	ldr	r2, [r3, #4]
 80035ea:	492e      	ldr	r1, [pc, #184]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	604b      	str	r3, [r1, #4]
 80035f2:	e006      	b.n	8003602 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80035f4:	4b2b      	ldr	r3, [pc, #172]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 80035f6:	685a      	ldr	r2, [r3, #4]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	4929      	ldr	r1, [pc, #164]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 80035fe:	4013      	ands	r3, r2
 8003600:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d006      	beq.n	800361c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800360e:	4b25      	ldr	r3, [pc, #148]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	4924      	ldr	r1, [pc, #144]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
 800361a:	e006      	b.n	800362a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800361c:	4b21      	ldr	r3, [pc, #132]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	43db      	mvns	r3, r3
 8003624:	491f      	ldr	r1, [pc, #124]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 8003626:	4013      	ands	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d006      	beq.n	8003644 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003636:	4b1b      	ldr	r3, [pc, #108]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 8003638:	68da      	ldr	r2, [r3, #12]
 800363a:	491a      	ldr	r1, [pc, #104]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	60cb      	str	r3, [r1, #12]
 8003642:	e006      	b.n	8003652 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003644:	4b17      	ldr	r3, [pc, #92]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	43db      	mvns	r3, r3
 800364c:	4915      	ldr	r1, [pc, #84]	; (80036a4 <HAL_GPIO_Init+0x2b0>)
 800364e:	4013      	ands	r3, r2
 8003650:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	3301      	adds	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365e:	fa22 f303 	lsr.w	r3, r2, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	f47f aed0 	bne.w	8003408 <HAL_GPIO_Init+0x14>
  }
}
 8003668:	bf00      	nop
 800366a:	372c      	adds	r7, #44	; 0x2c
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	10210000 	.word	0x10210000
 8003678:	10110000 	.word	0x10110000
 800367c:	10120000 	.word	0x10120000
 8003680:	10310000 	.word	0x10310000
 8003684:	10320000 	.word	0x10320000
 8003688:	10220000 	.word	0x10220000
 800368c:	40021000 	.word	0x40021000
 8003690:	40010000 	.word	0x40010000
 8003694:	40010800 	.word	0x40010800
 8003698:	40010c00 	.word	0x40010c00
 800369c:	40011000 	.word	0x40011000
 80036a0:	40011400 	.word	0x40011400
 80036a4:	40010400 	.word	0x40010400

080036a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	807b      	strh	r3, [r7, #2]
 80036b4:	4613      	mov	r3, r2
 80036b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80036b8:	787b      	ldrb	r3, [r7, #1]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036be:	887a      	ldrh	r2, [r7, #2]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80036c4:	e003      	b.n	80036ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80036c6:	887b      	ldrh	r3, [r7, #2]
 80036c8:	041a      	lsls	r2, r3, #16
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	611a      	str	r2, [r3, #16]
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bc80      	pop	{r7}
 80036d6:	4770      	bx	lr

080036d8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	460b      	mov	r3, r1
 80036e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68da      	ldr	r2, [r3, #12]
 80036e8:	887b      	ldrh	r3, [r7, #2]
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80036f0:	887a      	ldrh	r2, [r7, #2]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80036f6:	e002      	b.n	80036fe <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80036f8:	887a      	ldrh	r2, [r7, #2]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e10f      	b.n	800393a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff f8a8 	bl	8002884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2224      	movs	r2, #36	; 0x24
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0201 	bic.w	r2, r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800374c:	f003 fa7e 	bl	8006c4c <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a7b      	ldr	r2, [pc, #492]	; (8003944 <HAL_I2C_Init+0x23c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d807      	bhi.n	800376c <HAL_I2C_Init+0x64>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a7a      	ldr	r2, [pc, #488]	; (8003948 <HAL_I2C_Init+0x240>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x72>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a77      	ldr	r2, [pc, #476]	; (800394c <HAL_I2C_Init+0x244>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0db      	b.n	800393a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a72      	ldr	r2, [pc, #456]	; (8003950 <HAL_I2C_Init+0x248>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a64      	ldr	r2, [pc, #400]	; (8003944 <HAL_I2C_Init+0x23c>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <HAL_I2C_Init+0xb4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	e009      	b.n	80037d0 <HAL_I2C_Init+0xc8>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a63      	ldr	r2, [pc, #396]	; (8003954 <HAL_I2C_Init+0x24c>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	3301      	adds	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4956      	ldr	r1, [pc, #344]	; (8003944 <HAL_I2C_Init+0x23c>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d80d      	bhi.n	800380c <HAL_I2C_Init+0x104>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e59      	subs	r1, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fe:	3301      	adds	r3, #1
 8003800:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003804:	2b04      	cmp	r3, #4
 8003806:	bf38      	it	cc
 8003808:	2304      	movcc	r3, #4
 800380a:	e04f      	b.n	80038ac <HAL_I2C_Init+0x1a4>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d111      	bne.n	8003838 <HAL_I2C_Init+0x130>
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	1e58      	subs	r0, r3, #1
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6859      	ldr	r1, [r3, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	440b      	add	r3, r1
 8003822:	fbb0 f3f3 	udiv	r3, r0, r3
 8003826:	3301      	adds	r3, #1
 8003828:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800382c:	2b00      	cmp	r3, #0
 800382e:	bf0c      	ite	eq
 8003830:	2301      	moveq	r3, #1
 8003832:	2300      	movne	r3, #0
 8003834:	b2db      	uxtb	r3, r3
 8003836:	e012      	b.n	800385e <HAL_I2C_Init+0x156>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	0099      	lsls	r1, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	2b00      	cmp	r3, #0
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <HAL_I2C_Init+0x15e>
 8003862:	2301      	movs	r3, #1
 8003864:	e022      	b.n	80038ac <HAL_I2C_Init+0x1a4>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10e      	bne.n	800388c <HAL_I2C_Init+0x184>
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	1e58      	subs	r0, r3, #1
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6859      	ldr	r1, [r3, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	440b      	add	r3, r1
 800387c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003880:	3301      	adds	r3, #1
 8003882:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003886:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800388a:	e00f      	b.n	80038ac <HAL_I2C_Init+0x1a4>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1e58      	subs	r0, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6859      	ldr	r1, [r3, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	0099      	lsls	r1, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	6809      	ldr	r1, [r1, #0]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69da      	ldr	r2, [r3, #28]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6911      	ldr	r1, [r2, #16]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	68d2      	ldr	r2, [r2, #12]
 80038e6:	4311      	orrs	r1, r2
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	6812      	ldr	r2, [r2, #0]
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68db      	ldr	r3, [r3, #12]
 80038f6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695a      	ldr	r2, [r3, #20]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	431a      	orrs	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	000186a0 	.word	0x000186a0
 8003948:	001e847f 	.word	0x001e847f
 800394c:	003d08ff 	.word	0x003d08ff
 8003950:	431bde83 	.word	0x431bde83
 8003954:	10624dd3 	.word	0x10624dd3

08003958 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	461a      	mov	r2, r3
 8003964:	460b      	mov	r3, r1
 8003966:	817b      	strh	r3, [r7, #10]
 8003968:	4613      	mov	r3, r2
 800396a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800396c:	f7ff f9c6 	bl	8002cfc <HAL_GetTick>
 8003970:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b20      	cmp	r3, #32
 800397c:	f040 80e0 	bne.w	8003b40 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	2319      	movs	r3, #25
 8003986:	2201      	movs	r2, #1
 8003988:	4970      	ldr	r1, [pc, #448]	; (8003b4c <HAL_I2C_Master_Transmit+0x1f4>)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f002 fb91 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
 8003998:	e0d3      	b.n	8003b42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2C_Master_Transmit+0x50>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e0cc      	b.n	8003b42 <HAL_I2C_Master_Transmit+0x1ea>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d007      	beq.n	80039ce <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2221      	movs	r2, #33	; 0x21
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2210      	movs	r2, #16
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	687a      	ldr	r2, [r7, #4]
 80039f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	893a      	ldrh	r2, [r7, #8]
 80039fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4a50      	ldr	r2, [pc, #320]	; (8003b50 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a0e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a10:	8979      	ldrh	r1, [r7, #10]
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6a3a      	ldr	r2, [r7, #32]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f002 f82a 	bl	8005a70 <I2C_MasterRequestWrite>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d001      	beq.n	8003a26 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e08d      	b.n	8003b42 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	613b      	str	r3, [r7, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	613b      	str	r3, [r7, #16]
 8003a3a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a3c:	e066      	b.n	8003b0c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	6a39      	ldr	r1, [r7, #32]
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f002 fc0b 	bl	800625e <I2C_WaitOnTXEFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d107      	bne.n	8003a66 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06b      	b.n	8003b42 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	3b01      	subs	r3, #1
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_I2C_Master_Transmit+0x188>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	6a39      	ldr	r1, [r7, #32]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f002 fbfb 	bl	80062e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00d      	beq.n	8003b0c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d107      	bne.n	8003b08 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b06:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e01a      	b.n	8003b42 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d194      	bne.n	8003a3e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	00100002 	.word	0x00100002
 8003b50:	ffff0000 	.word	0xffff0000

08003b54 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	607a      	str	r2, [r7, #4]
 8003b5e:	461a      	mov	r2, r3
 8003b60:	460b      	mov	r3, r1
 8003b62:	817b      	strh	r3, [r7, #10]
 8003b64:	4613      	mov	r3, r2
 8003b66:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b68:	f7ff f8c8 	bl	8002cfc <HAL_GetTick>
 8003b6c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b20      	cmp	r3, #32
 8003b78:	f040 8213 	bne.w	8003fa2 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	2319      	movs	r3, #25
 8003b82:	2201      	movs	r2, #1
 8003b84:	497e      	ldr	r1, [pc, #504]	; (8003d80 <HAL_I2C_Master_Receive+0x22c>)
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f002 fa93 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d001      	beq.n	8003b96 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003b92:	2302      	movs	r3, #2
 8003b94:	e206      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d101      	bne.n	8003ba4 <HAL_I2C_Master_Receive+0x50>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e1ff      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d007      	beq.n	8003bca <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f042 0201 	orr.w	r2, r2, #1
 8003bc8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bd8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2222      	movs	r2, #34	; 0x22
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2210      	movs	r2, #16
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	687a      	ldr	r2, [r7, #4]
 8003bf4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	893a      	ldrh	r2, [r7, #8]
 8003bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4a5e      	ldr	r2, [pc, #376]	; (8003d84 <HAL_I2C_Master_Receive+0x230>)
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c0c:	8979      	ldrh	r1, [r7, #10]
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f001 ffa2 	bl	8005b5c <I2C_MasterRequestRead>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1c0      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d113      	bne.n	8003c52 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	e194      	b.n	8003f7c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d11d      	bne.n	8003c96 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c68:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003c6a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	61fb      	str	r3, [r7, #28]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	61fb      	str	r3, [r7, #28]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003c92:	b662      	cpsie	i
 8003c94:	e172      	b.n	8003f7c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d11d      	bne.n	8003cda <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003cae:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	699b      	ldr	r3, [r3, #24]
 8003cc2:	61bb      	str	r3, [r7, #24]
 8003cc4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003cd6:	b662      	cpsie	i
 8003cd8:	e150      	b.n	8003f7c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ce8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cea:	2300      	movs	r3, #0
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	617b      	str	r3, [r7, #20]
 8003cfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d00:	e13c      	b.n	8003f7c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	f200 80f5 	bhi.w	8003ef6 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d123      	bne.n	8003d5c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f002 fb22 	bl	8006362 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e13d      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	1c5a      	adds	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d44:	3b01      	subs	r3, #1
 8003d46:	b29a      	uxth	r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d5a:	e10f      	b.n	8003f7c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d150      	bne.n	8003e06 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	4906      	ldr	r1, [pc, #24]	; (8003d88 <HAL_I2C_Master_Receive+0x234>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f002 f99f 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d008      	beq.n	8003d8c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e112      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
 8003d7e:	bf00      	nop
 8003d80:	00100002 	.word	0x00100002
 8003d84:	ffff0000 	.word	0xffff0000
 8003d88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003d8c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d9c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	691a      	ldr	r2, [r3, #16]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b29a      	uxth	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b29a      	uxth	r2, r3
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	3b01      	subs	r3, #1
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e04:	e0ba      	b.n	8003f7c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4967      	ldr	r1, [pc, #412]	; (8003fac <HAL_I2C_Master_Receive+0x458>)
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f002 f94e 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0c1      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003e30:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691a      	ldr	r2, [r3, #16]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	b2d2      	uxtb	r2, r2
 8003e3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	b29a      	uxth	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e66:	9300      	str	r3, [sp, #0]
 8003e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	494f      	ldr	r1, [pc, #316]	; (8003fac <HAL_I2C_Master_Receive+0x458>)
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f002 f91f 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e092      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e8c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003ec0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	691a      	ldr	r2, [r3, #16]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ef4:	e042      	b.n	8003f7c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f002 fa31 	bl	8006362 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e04c      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	691a      	ldr	r2, [r3, #16]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	b2d2      	uxtb	r2, r2
 8003f16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	3b01      	subs	r3, #1
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d118      	bne.n	8003f7c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	3b01      	subs	r3, #1
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f47f aebe 	bne.w	8003d02 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	e000      	b.n	8003fa4 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003fa2:	2302      	movs	r3, #2
  }
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3728      	adds	r7, #40	; 0x28
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	00010004 	.word	0x00010004

08003fb0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	607a      	str	r2, [r7, #4]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	817b      	strh	r3, [r7, #10]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b20      	cmp	r3, #32
 8003fd2:	f040 80ec 	bne.w	80041ae <HAL_I2C_Master_Transmit_DMA+0x1fe>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003fd6:	4b78      	ldr	r3, [pc, #480]	; (80041b8 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	08db      	lsrs	r3, r3, #3
 8003fdc:	4a77      	ldr	r2, [pc, #476]	; (80041bc <HAL_I2C_Master_Transmit_DMA+0x20c>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	0a1a      	lsrs	r2, r3, #8
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	009a      	lsls	r2, r3, #2
 8003fec:	4413      	add	r3, r2
 8003fee:	613b      	str	r3, [r7, #16]
    do
    {
      count--;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	613b      	str	r3, [r7, #16]
      if (count == 0U)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d116      	bne.n	800402a <HAL_I2C_Master_Transmit_DMA+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2220      	movs	r2, #32
 8004006:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0c2      	b.n	80041b0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	f003 0302 	and.w	r3, r3, #2
 8004034:	2b02      	cmp	r3, #2
 8004036:	d0db      	beq.n	8003ff0 <HAL_I2C_Master_Transmit_DMA+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_I2C_Master_Transmit_DMA+0x96>
 8004042:	2302      	movs	r3, #2
 8004044:	e0b4      	b.n	80041b0 <HAL_I2C_Master_Transmit_DMA+0x200>
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	2b01      	cmp	r3, #1
 800405a:	d007      	beq.n	800406c <HAL_I2C_Master_Transmit_DMA+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681a      	ldr	r2, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f042 0201 	orr.w	r2, r2, #1
 800406a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800407a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2221      	movs	r2, #33	; 0x21
 8004080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2210      	movs	r2, #16
 8004088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	893a      	ldrh	r2, [r7, #8]
 800409c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a45      	ldr	r2, [pc, #276]	; (80041c0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 80040ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80040ae:	897a      	ldrh	r2, [r7, #10]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	645a      	str	r2, [r3, #68]	; 0x44

    if (hi2c->XferSize > 0U)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d05a      	beq.n	8004172 <HAL_I2C_Master_Transmit_DMA+0x1c2>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c0:	4a40      	ldr	r2, [pc, #256]	; (80041c4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 80040c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA error callback */
      hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	4a3f      	ldr	r2, [pc, #252]	; (80041c8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 80040ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	2200      	movs	r2, #0
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->hdmatx->XferAbortCallback = NULL;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d8:	2200      	movs	r2, #0
 80040da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	4619      	mov	r1, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	3310      	adds	r3, #16
 80040ec:	461a      	mov	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f2:	f7fe ff69 	bl	8002fc8 <HAL_DMA_Start_IT>
 80040f6:	4603      	mov	r3, r0
 80040f8:	75fb      	strb	r3, [r7, #23]

      if (dmaxferstatus == HAL_OK)
 80040fa:	7dfb      	ldrb	r3, [r7, #23]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d124      	bne.n	800414a <HAL_I2C_Master_Transmit_DMA+0x19a>
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800410e:	601a      	str	r2, [r3, #0]

        /* Generate Start */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800411e:	601a      	str	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */

        /* Enable EVT and ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685a      	ldr	r2, [r3, #4]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004136:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004146:	605a      	str	r2, [r3, #4]
 8004148:	e02f      	b.n	80041aa <HAL_I2C_Master_Transmit_DMA+0x1fa>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	f043 0210 	orr.w	r2, r3, #16
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e01e      	b.n	80041b0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004180:	601a      	str	r2, [r3, #0]

      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004190:	601a      	str	r2, [r3, #0]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80041a8:	605a      	str	r2, [r3, #4]
    }

    return HAL_OK;
 80041aa:	2300      	movs	r3, #0
 80041ac:	e000      	b.n	80041b0 <HAL_I2C_Master_Transmit_DMA+0x200>
  }
  else
  {
    return HAL_BUSY;
 80041ae:	2302      	movs	r3, #2
  }
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3718      	adds	r7, #24
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	20000004 	.word	0x20000004
 80041bc:	14f8b589 	.word	0x14f8b589
 80041c0:	ffff0000 	.word	0xffff0000
 80041c4:	08005ddd 	.word	0x08005ddd
 80041c8:	08005f77 	.word	0x08005f77

080041cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b088      	sub	sp, #32
 80041d0:	af02      	add	r7, sp, #8
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	4608      	mov	r0, r1
 80041d6:	4611      	mov	r1, r2
 80041d8:	461a      	mov	r2, r3
 80041da:	4603      	mov	r3, r0
 80041dc:	817b      	strh	r3, [r7, #10]
 80041de:	460b      	mov	r3, r1
 80041e0:	813b      	strh	r3, [r7, #8]
 80041e2:	4613      	mov	r3, r2
 80041e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041e6:	f7fe fd89 	bl	8002cfc <HAL_GetTick>
 80041ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b20      	cmp	r3, #32
 80041f6:	f040 80d9 	bne.w	80043ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	2319      	movs	r3, #25
 8004200:	2201      	movs	r2, #1
 8004202:	496d      	ldr	r1, [pc, #436]	; (80043b8 <HAL_I2C_Mem_Write+0x1ec>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f001 ff54 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
 8004212:	e0cc      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Mem_Write+0x56>
 800421e:	2302      	movs	r3, #2
 8004220:	e0c5      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d007      	beq.n	8004248 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2221      	movs	r2, #33	; 0x21
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2240      	movs	r2, #64	; 0x40
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a4d      	ldr	r2, [pc, #308]	; (80043bc <HAL_I2C_Mem_Write+0x1f0>)
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800428a:	88f8      	ldrh	r0, [r7, #6]
 800428c:	893a      	ldrh	r2, [r7, #8]
 800428e:	8979      	ldrh	r1, [r7, #10]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	9301      	str	r3, [sp, #4]
 8004294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004296:	9300      	str	r3, [sp, #0]
 8004298:	4603      	mov	r3, r0
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f001 fd14 	bl	8005cc8 <I2C_RequestMemoryWrite>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d052      	beq.n	800434c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e081      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f001 ffd5 	bl	800625e <I2C_WaitOnTXEFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00d      	beq.n	80042d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d107      	bne.n	80042d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e06b      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042da:	781a      	ldrb	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29a      	uxth	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	f003 0304 	and.w	r3, r3, #4
 8004310:	2b04      	cmp	r3, #4
 8004312:	d11b      	bne.n	800434c <HAL_I2C_Mem_Write+0x180>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004318:	2b00      	cmp	r3, #0
 800431a:	d017      	beq.n	800434c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004320:	781a      	ldrb	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1aa      	bne.n	80042aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f001 ffc1 	bl	80062e0 <I2C_WaitOnBTFFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00d      	beq.n	8004380 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004368:	2b04      	cmp	r3, #4
 800436a:	d107      	bne.n	800437c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e016      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800438e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e000      	b.n	80043ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80043ac:	2302      	movs	r3, #2
  }
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	00100002 	.word	0x00100002
 80043bc:	ffff0000 	.word	0xffff0000

080043c0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80043c8:	2300      	movs	r3, #0
 80043ca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043e0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043e8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80043ea:	7bfb      	ldrb	r3, [r7, #15]
 80043ec:	2b10      	cmp	r3, #16
 80043ee:	d003      	beq.n	80043f8 <HAL_I2C_EV_IRQHandler+0x38>
 80043f0:	7bfb      	ldrb	r3, [r7, #15]
 80043f2:	2b40      	cmp	r3, #64	; 0x40
 80043f4:	f040 80b6 	bne.w	8004564 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10d      	bne.n	800442e <HAL_I2C_EV_IRQHandler+0x6e>
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004418:	d003      	beq.n	8004422 <HAL_I2C_EV_IRQHandler+0x62>
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004420:	d101      	bne.n	8004426 <HAL_I2C_EV_IRQHandler+0x66>
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_I2C_EV_IRQHandler+0x68>
 8004426:	2300      	movs	r3, #0
 8004428:	2b01      	cmp	r3, #1
 800442a:	f000 8127 	beq.w	800467c <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800442e:	69fb      	ldr	r3, [r7, #28]
 8004430:	f003 0301 	and.w	r3, r3, #1
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00c      	beq.n	8004452 <HAL_I2C_EV_IRQHandler+0x92>
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	0a5b      	lsrs	r3, r3, #9
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d006      	beq.n	8004452 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f002 f810 	bl	800646a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fd10 	bl	8004e70 <I2C_Master_SB>
 8004450:	e087      	b.n	8004562 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b00      	cmp	r3, #0
 800445c:	d009      	beq.n	8004472 <HAL_I2C_EV_IRQHandler+0xb2>
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	0a5b      	lsrs	r3, r3, #9
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fd85 	bl	8004f7a <I2C_Master_ADD10>
 8004470:	e077      	b.n	8004562 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d009      	beq.n	8004492 <HAL_I2C_EV_IRQHandler+0xd2>
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	0a5b      	lsrs	r3, r3, #9
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d003      	beq.n	8004492 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fd9e 	bl	8004fcc <I2C_Master_ADDR>
 8004490:	e067      	b.n	8004562 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	089b      	lsrs	r3, r3, #2
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d030      	beq.n	8004500 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ac:	f000 80e8 	beq.w	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	09db      	lsrs	r3, r3, #7
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d00f      	beq.n	80044dc <HAL_I2C_EV_IRQHandler+0x11c>
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	0a9b      	lsrs	r3, r3, #10
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d009      	beq.n	80044dc <HAL_I2C_EV_IRQHandler+0x11c>
 80044c8:	69fb      	ldr	r3, [r7, #28]
 80044ca:	089b      	lsrs	r3, r3, #2
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f000 f9f1 	bl	80048bc <I2C_MasterTransmit_TXE>
 80044da:	e042      	b.n	8004562 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	089b      	lsrs	r3, r3, #2
 80044e0:	f003 0301 	and.w	r3, r3, #1
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80cb 	beq.w	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	0a5b      	lsrs	r3, r3, #9
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	f000 80c4 	beq.w	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 fad7 	bl	8004aac <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044fe:	e0bf      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800450e:	f000 80b7 	beq.w	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	099b      	lsrs	r3, r3, #6
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d00f      	beq.n	800453e <HAL_I2C_EV_IRQHandler+0x17e>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	0a9b      	lsrs	r3, r3, #10
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d009      	beq.n	800453e <HAL_I2C_EV_IRQHandler+0x17e>
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 fb2e 	bl	8004b98 <I2C_MasterReceive_RXNE>
 800453c:	e011      	b.n	8004562 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	089b      	lsrs	r3, r3, #2
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 809a 	beq.w	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	0a5b      	lsrs	r3, r3, #9
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 8093 	beq.w	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 fb9e 	bl	8004c9c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004560:	e08e      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
 8004562:	e08d      	b.n	8004680 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004568:	2b00      	cmp	r3, #0
 800456a:	d004      	beq.n	8004576 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	61fb      	str	r3, [r7, #28]
 8004574:	e007      	b.n	8004586 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	695b      	ldr	r3, [r3, #20]
 8004584:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	d012      	beq.n	80045b8 <HAL_I2C_EV_IRQHandler+0x1f8>
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	0a5b      	lsrs	r3, r3, #9
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	699b      	ldr	r3, [r3, #24]
 80045ac:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80045ae:	69b9      	ldr	r1, [r7, #24]
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 ff62 	bl	800547a <I2C_Slave_ADDR>
 80045b6:	e066      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	091b      	lsrs	r3, r3, #4
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d009      	beq.n	80045d8 <HAL_I2C_EV_IRQHandler+0x218>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	0a5b      	lsrs	r3, r3, #9
 80045c8:	f003 0301 	and.w	r3, r3, #1
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 ff97 	bl	8005504 <I2C_Slave_STOPF>
 80045d6:	e056      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80045d8:	7bbb      	ldrb	r3, [r7, #14]
 80045da:	2b21      	cmp	r3, #33	; 0x21
 80045dc:	d002      	beq.n	80045e4 <HAL_I2C_EV_IRQHandler+0x224>
 80045de:	7bbb      	ldrb	r3, [r7, #14]
 80045e0:	2b29      	cmp	r3, #41	; 0x29
 80045e2:	d125      	bne.n	8004630 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	09db      	lsrs	r3, r3, #7
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00f      	beq.n	8004610 <HAL_I2C_EV_IRQHandler+0x250>
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	0a9b      	lsrs	r3, r3, #10
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d009      	beq.n	8004610 <HAL_I2C_EV_IRQHandler+0x250>
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 fe7a 	bl	8005302 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800460e:	e039      	b.n	8004684 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	089b      	lsrs	r3, r3, #2
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d033      	beq.n	8004684 <HAL_I2C_EV_IRQHandler+0x2c4>
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	0a5b      	lsrs	r3, r3, #9
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b00      	cmp	r3, #0
 8004626:	d02d      	beq.n	8004684 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 fea7 	bl	800537c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800462e:	e029      	b.n	8004684 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	099b      	lsrs	r3, r3, #6
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00f      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x29c>
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	0a9b      	lsrs	r3, r3, #10
 8004640:	f003 0301 	and.w	r3, r3, #1
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_I2C_EV_IRQHandler+0x29c>
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	089b      	lsrs	r3, r3, #2
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	2b00      	cmp	r3, #0
 8004652:	d103      	bne.n	800465c <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f000 feb1 	bl	80053bc <I2C_SlaveReceive_RXNE>
 800465a:	e014      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	089b      	lsrs	r3, r3, #2
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00e      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0x2c6>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	0a5b      	lsrs	r3, r3, #9
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d008      	beq.n	8004686 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f000 fedf 	bl	8005438 <I2C_SlaveReceive_BTF>
 800467a:	e004      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 800467c:	bf00      	nop
 800467e:	e002      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004680:	bf00      	nop
 8004682:	e000      	b.n	8004686 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004684:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004686:	3720      	adds	r7, #32
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	; 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80046a4:	2300      	movs	r3, #0
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	0a1b      	lsrs	r3, r3, #8
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d016      	beq.n	80046e2 <HAL_I2C_ER_IRQHandler+0x56>
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	0a1b      	lsrs	r3, r3, #8
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d010      	beq.n	80046e2 <HAL_I2C_ER_IRQHandler+0x56>
  {
    error |= HAL_I2C_ERROR_BERR;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80046d0:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046e0:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80046e2:	6a3b      	ldr	r3, [r7, #32]
 80046e4:	0a5b      	lsrs	r3, r3, #9
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d00e      	beq.n	800470c <HAL_I2C_ER_IRQHandler+0x80>
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	0a1b      	lsrs	r3, r3, #8
 80046f2:	f003 0301 	and.w	r3, r3, #1
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d008      	beq.n	800470c <HAL_I2C_ER_IRQHandler+0x80>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80046fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fc:	f043 0302 	orr.w	r3, r3, #2
 8004700:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800470a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	0a9b      	lsrs	r3, r3, #10
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d041      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0x110>
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	0a1b      	lsrs	r3, r3, #8
 800471c:	f003 0301 	and.w	r3, r3, #1
 8004720:	2b00      	cmp	r3, #0
 8004722:	d03b      	beq.n	800479c <HAL_I2C_ER_IRQHandler+0x110>
  {
    tmp1 = hi2c->Mode;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800472a:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004730:	b29b      	uxth	r3, r3
 8004732:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800473a:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004742:	7efb      	ldrb	r3, [r7, #27]
 8004744:	2b20      	cmp	r3, #32
 8004746:	d112      	bne.n	800476e <HAL_I2C_ER_IRQHandler+0xe2>
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d10f      	bne.n	800476e <HAL_I2C_ER_IRQHandler+0xe2>
 800474e:	7cfb      	ldrb	r3, [r7, #19]
 8004750:	2b21      	cmp	r3, #33	; 0x21
 8004752:	d008      	beq.n	8004766 <HAL_I2C_ER_IRQHandler+0xda>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004754:	7cfb      	ldrb	r3, [r7, #19]
 8004756:	2b29      	cmp	r3, #41	; 0x29
 8004758:	d005      	beq.n	8004766 <HAL_I2C_ER_IRQHandler+0xda>
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b28      	cmp	r3, #40	; 0x28
 800475e:	d106      	bne.n	800476e <HAL_I2C_ER_IRQHandler+0xe2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2b21      	cmp	r3, #33	; 0x21
 8004764:	d103      	bne.n	800476e <HAL_I2C_ER_IRQHandler+0xe2>
    {
      I2C_Slave_AF(hi2c);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 fffc 	bl	8005764 <I2C_Slave_AF>
 800476c:	e016      	b.n	800479c <HAL_I2C_ER_IRQHandler+0x110>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004776:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	f043 0304 	orr.w	r3, r3, #4
 800477e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b10      	cmp	r3, #16
 800478a:	d107      	bne.n	800479c <HAL_I2C_ER_IRQHandler+0x110>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800479a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800479c:	6a3b      	ldr	r3, [r7, #32]
 800479e:	0adb      	lsrs	r3, r3, #11
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00e      	beq.n	80047c6 <HAL_I2C_ER_IRQHandler+0x13a>
 80047a8:	69fb      	ldr	r3, [r7, #28]
 80047aa:	0a1b      	lsrs	r3, r3, #8
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_I2C_ER_IRQHandler+0x13a>
  {
    error |= HAL_I2C_ERROR_OVR;
 80047b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b6:	f043 0308 	orr.w	r3, r3, #8
 80047ba:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80047c4:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80047c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d008      	beq.n	80047de <HAL_I2C_ER_IRQHandler+0x152>
  {
    hi2c->ErrorCode |= error;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	431a      	orrs	r2, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f001 f833 	bl	8005844 <I2C_ITError>
  }
}
 80047de:	bf00      	nop
 80047e0:	3728      	adds	r7, #40	; 0x28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047e6:	b480      	push	{r7}
 80047e8:	b083      	sub	sp, #12
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b083      	sub	sp, #12
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004800:	bf00      	nop
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	bc80      	pop	{r7}
 8004808:	4770      	bx	lr

0800480a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800480a:	b480      	push	{r7}
 800480c:	b083      	sub	sp, #12
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	bc80      	pop	{r7}
 800481a:	4770      	bx	lr

0800481c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	bc80      	pop	{r7}
 800482c:	4770      	bx	lr

0800482e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	70fb      	strb	r3, [r7, #3]
 800483a:	4613      	mov	r3, r2
 800483c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	bc80      	pop	{r7}
 8004846:	4770      	bx	lr

08004848 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	bc80      	pop	{r7}
 8004858:	4770      	bx	lr

0800485a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800485a:	b480      	push	{r7}
 800485c:	b083      	sub	sp, #12
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004862:	bf00      	nop
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr

0800487e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800487e:	b480      	push	{r7}
 8004880:	b083      	sub	sp, #12
 8004882:	af00      	add	r7, sp, #0
 8004884:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004886:	bf00      	nop
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	bc80      	pop	{r7}
 800488e:	4770      	bx	lr

08004890 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	bc80      	pop	{r7}
 80048a0:	4770      	bx	lr

080048a2 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048b0:	b2db      	uxtb	r3, r3
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bc80      	pop	{r7}
 80048ba:	4770      	bx	lr

080048bc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b084      	sub	sp, #16
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ca:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048d2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d150      	bne.n	8004984 <I2C_MasterTransmit_TXE+0xc8>
 80048e2:	7bfb      	ldrb	r3, [r7, #15]
 80048e4:	2b21      	cmp	r3, #33	; 0x21
 80048e6:	d14d      	bne.n	8004984 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b08      	cmp	r3, #8
 80048ec:	d01d      	beq.n	800492a <I2C_MasterTransmit_TXE+0x6e>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d01a      	beq.n	800492a <I2C_MasterTransmit_TXE+0x6e>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048fa:	d016      	beq.n	800492a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800490a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2211      	movs	r2, #17
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7ff ff5f 	bl	80047e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004928:	e0bc      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004938:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004948:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b40      	cmp	r3, #64	; 0x40
 8004962:	d107      	bne.n	8004974 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff ff74 	bl	800485a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004972:	e097      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ff32 	bl	80047e6 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004982:	e08f      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004984:	7bfb      	ldrb	r3, [r7, #15]
 8004986:	2b21      	cmp	r3, #33	; 0x21
 8004988:	d007      	beq.n	800499a <I2C_MasterTransmit_TXE+0xde>
 800498a:	7bbb      	ldrb	r3, [r7, #14]
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	f040 8089 	bne.w	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004992:	7bfb      	ldrb	r3, [r7, #15]
 8004994:	2b22      	cmp	r3, #34	; 0x22
 8004996:	f040 8085 	bne.w	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d108      	bne.n	80049b6 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80049b4:	e076      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b40      	cmp	r3, #64	; 0x40
 80049c0:	d15d      	bne.n	8004a7e <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d11d      	bne.n	8004a06 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049ce:	2b01      	cmp	r3, #1
 80049d0:	d10b      	bne.n	80049ea <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e2:	1c9a      	adds	r2, r3, #2
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80049e8:	e05c      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	121b      	asrs	r3, r3, #8
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fe:	1c5a      	adds	r2, r3, #1
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a04:	e04e      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d10b      	bne.n	8004a26 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a24:	e03e      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d13a      	bne.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b22      	cmp	r3, #34	; 0x22
 8004a38:	d108      	bne.n	8004a4c <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	e02b      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b21      	cmp	r3, #33	; 0x21
 8004a56:	d125      	bne.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	781a      	ldrb	r2, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b29a      	uxth	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a7c:	e012      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	781a      	ldrb	r2, [r3, #0]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004aa2:	e7ff      	b.n	8004aa4 <I2C_MasterTransmit_TXE+0x1e8>
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b21      	cmp	r3, #33	; 0x21
 8004ac4:	d164      	bne.n	8004b90 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d012      	beq.n	8004af6 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	781a      	ldrb	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8004af4:	e04c      	b.n	8004b90 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d01d      	beq.n	8004b38 <I2C_MasterTransmit_BTF+0x8c>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d01a      	beq.n	8004b38 <I2C_MasterTransmit_BTF+0x8c>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b08:	d016      	beq.n	8004b38 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b18:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2211      	movs	r2, #17
 8004b1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fe58 	bl	80047e6 <HAL_I2C_MasterTxCpltCallback>
}
 8004b36:	e02b      	b.n	8004b90 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b46:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b56:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2220      	movs	r2, #32
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d107      	bne.n	8004b82 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7ff fe6d 	bl	800485a <HAL_I2C_MemTxCpltCallback>
}
 8004b80:	e006      	b.n	8004b90 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff fe2b 	bl	80047e6 <HAL_I2C_MasterTxCpltCallback>
}
 8004b90:	bf00      	nop
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b22      	cmp	r3, #34	; 0x22
 8004baa:	d173      	bne.n	8004c94 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2b03      	cmp	r3, #3
 8004bb8:	d920      	bls.n	8004bfc <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691a      	ldr	r2, [r3, #16]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	b29a      	uxth	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be4:	b29b      	uxth	r3, r3
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d154      	bne.n	8004c94 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	685a      	ldr	r2, [r3, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf8:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004bfa:	e04b      	b.n	8004c94 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d047      	beq.n	8004c94 <I2C_MasterReceive_RXNE+0xfc>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d002      	beq.n	8004c10 <I2C_MasterReceive_RXNE+0x78>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d141      	bne.n	8004c94 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c2e:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691a      	ldr	r2, [r3, #16]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	b2d2      	uxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	1c5a      	adds	r2, r3, #1
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c64:	b2db      	uxtb	r3, r3
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d10a      	bne.n	8004c80 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fdf7 	bl	800486c <HAL_I2C_MemRxCpltCallback>
}
 8004c7e:	e009      	b.n	8004c94 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2212      	movs	r2, #18
 8004c8c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff fdb2 	bl	80047f8 <HAL_I2C_MasterRxCpltCallback>
}
 8004c94:	bf00      	nop
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d11b      	bne.n	8004cec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cce:	b2d2      	uxtb	r2, r2
 8004cd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004cea:	e0bd      	b.n	8004e68 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d129      	bne.n	8004d4a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d04:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b04      	cmp	r3, #4
 8004d0a:	d00a      	beq.n	8004d22 <I2C_MasterReceive_BTF+0x86>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d007      	beq.n	8004d22 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d20:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d34:	1c5a      	adds	r2, r3, #1
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d48:	e08e      	b.n	8004e68 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d176      	bne.n	8004e42 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d002      	beq.n	8004d60 <I2C_MasterReceive_BTF+0xc4>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2b10      	cmp	r3, #16
 8004d5e:	d108      	bne.n	8004d72 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	e019      	b.n	8004da6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d002      	beq.n	8004d7e <I2C_MasterReceive_BTF+0xe2>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d108      	bne.n	8004d90 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e00a      	b.n	8004da6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2b10      	cmp	r3, #16
 8004d94:	d007      	beq.n	8004da6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004da4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	691a      	ldr	r2, [r3, #16]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	1c5a      	adds	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e00:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	2b40      	cmp	r3, #64	; 0x40
 8004e14:	d10a      	bne.n	8004e2c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f7ff fd21 	bl	800486c <HAL_I2C_MemRxCpltCallback>
}
 8004e2a:	e01d      	b.n	8004e68 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2212      	movs	r2, #18
 8004e38:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fcdc 	bl	80047f8 <HAL_I2C_MasterRxCpltCallback>
}
 8004e40:	e012      	b.n	8004e68 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	b2d2      	uxtb	r2, r2
 8004e4e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	1c5a      	adds	r2, r3, #1
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	3b01      	subs	r3, #1
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e68:	bf00      	nop
 8004e6a:	3710      	adds	r7, #16
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}

08004e70 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b40      	cmp	r3, #64	; 0x40
 8004e82:	d117      	bne.n	8004eb4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d109      	bne.n	8004ea0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004e9c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004e9e:	e067      	b.n	8004f70 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	f043 0301 	orr.w	r3, r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	611a      	str	r2, [r3, #16]
}
 8004eb2:	e05d      	b.n	8004f70 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ebc:	d133      	bne.n	8004f26 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2b21      	cmp	r3, #33	; 0x21
 8004ec8:	d109      	bne.n	8004ede <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004eda:	611a      	str	r2, [r3, #16]
 8004edc:	e008      	b.n	8004ef0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	f043 0301 	orr.w	r3, r3, #1
 8004ee8:	b2da      	uxtb	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d103      	bne.n	8004f00 <I2C_Master_SB+0x90>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d037      	beq.n	8004f70 <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d104      	bne.n	8004f14 <I2C_Master_SB+0xa4>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d02d      	beq.n	8004f70 <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f22:	605a      	str	r2, [r3, #4]
}
 8004f24:	e024      	b.n	8004f70 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d10e      	bne.n	8004f4c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	11db      	asrs	r3, r3, #7
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f003 0306 	and.w	r3, r3, #6
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	f063 030f 	orn	r3, r3, #15
 8004f42:	b2da      	uxtb	r2, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	611a      	str	r2, [r3, #16]
}
 8004f4a:	e011      	b.n	8004f70 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d10d      	bne.n	8004f70 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	11db      	asrs	r3, r3, #7
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	f003 0306 	and.w	r3, r3, #6
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f063 030e 	orn	r3, r3, #14
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	611a      	str	r2, [r3, #16]
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	b2da      	uxtb	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <I2C_Master_ADD10+0x24>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d011      	beq.n	8004fc2 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <I2C_Master_ADD10+0x38>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d007      	beq.n	8004fc2 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685a      	ldr	r2, [r3, #4]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fc0:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr

08004fcc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b091      	sub	sp, #68	; 0x44
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b22      	cmp	r3, #34	; 0x22
 8004ff4:	f040 8174 	bne.w	80052e0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10f      	bne.n	8005020 <I2C_Master_ADDR+0x54>
 8005000:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d10b      	bne.n	8005020 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005008:	2300      	movs	r3, #0
 800500a:	633b      	str	r3, [r7, #48]	; 0x30
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	633b      	str	r3, [r7, #48]	; 0x30
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	633b      	str	r3, [r7, #48]	; 0x30
 800501c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501e:	e16b      	b.n	80052f8 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005024:	2b00      	cmp	r3, #0
 8005026:	d11d      	bne.n	8005064 <I2C_Master_ADDR+0x98>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005030:	d118      	bne.n	8005064 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005032:	2300      	movs	r3, #0
 8005034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005056:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	651a      	str	r2, [r3, #80]	; 0x50
 8005062:	e149      	b.n	80052f8 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d113      	bne.n	8005096 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800506e:	2300      	movs	r3, #0
 8005070:	62bb      	str	r3, [r7, #40]	; 0x28
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	62bb      	str	r3, [r7, #40]	; 0x28
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	699b      	ldr	r3, [r3, #24]
 8005080:	62bb      	str	r3, [r7, #40]	; 0x28
 8005082:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005092:	601a      	str	r2, [r3, #0]
 8005094:	e120      	b.n	80052d8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800509a:	b29b      	uxth	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	f040 808a 	bne.w	80051b6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050a8:	d137      	bne.n	800511a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050b8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050c8:	d113      	bne.n	80050f2 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050d8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050da:	2300      	movs	r3, #0
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	e0f2      	b.n	80052d8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050f2:	2300      	movs	r3, #0
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	695b      	ldr	r3, [r3, #20]
 80050fc:	623b      	str	r3, [r7, #32]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	623b      	str	r3, [r7, #32]
 8005106:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	e0de      	b.n	80052d8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800511a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511c:	2b08      	cmp	r3, #8
 800511e:	d02e      	beq.n	800517e <I2C_Master_ADDR+0x1b2>
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	2b20      	cmp	r3, #32
 8005124:	d02b      	beq.n	800517e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005128:	2b12      	cmp	r3, #18
 800512a:	d102      	bne.n	8005132 <I2C_Master_ADDR+0x166>
 800512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512e:	2b01      	cmp	r3, #1
 8005130:	d125      	bne.n	800517e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	2b04      	cmp	r3, #4
 8005136:	d00e      	beq.n	8005156 <I2C_Master_ADDR+0x18a>
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	2b02      	cmp	r3, #2
 800513c:	d00b      	beq.n	8005156 <I2C_Master_ADDR+0x18a>
 800513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005140:	2b10      	cmp	r3, #16
 8005142:	d008      	beq.n	8005156 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005152:	601a      	str	r2, [r3, #0]
 8005154:	e007      	b.n	8005166 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005164:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	61fb      	str	r3, [r7, #28]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	61fb      	str	r3, [r7, #28]
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	e0ac      	b.n	80052d8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518e:	2300      	movs	r3, #0
 8005190:	61bb      	str	r3, [r7, #24]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	61bb      	str	r3, [r7, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	61bb      	str	r3, [r7, #24]
 80051a2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e090      	b.n	80052d8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d158      	bne.n	8005272 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	2b04      	cmp	r3, #4
 80051c4:	d021      	beq.n	800520a <I2C_Master_ADDR+0x23e>
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d01e      	beq.n	800520a <I2C_Master_ADDR+0x23e>
 80051cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ce:	2b10      	cmp	r3, #16
 80051d0:	d01b      	beq.n	800520a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051e2:	2300      	movs	r3, #0
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	695b      	ldr	r3, [r3, #20]
 80051ec:	617b      	str	r3, [r7, #20]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	699b      	ldr	r3, [r3, #24]
 80051f4:	617b      	str	r3, [r7, #20]
 80051f6:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e012      	b.n	8005230 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005218:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521a:	2300      	movs	r3, #0
 800521c:	613b      	str	r3, [r7, #16]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	613b      	str	r3, [r7, #16]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	699b      	ldr	r3, [r3, #24]
 800522c:	613b      	str	r3, [r7, #16]
 800522e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523e:	d14b      	bne.n	80052d8 <I2C_Master_ADDR+0x30c>
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005246:	d00b      	beq.n	8005260 <I2C_Master_ADDR+0x294>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	2b01      	cmp	r3, #1
 800524c:	d008      	beq.n	8005260 <I2C_Master_ADDR+0x294>
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b08      	cmp	r3, #8
 8005252:	d005      	beq.n	8005260 <I2C_Master_ADDR+0x294>
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	2b10      	cmp	r3, #16
 8005258:	d002      	beq.n	8005260 <I2C_Master_ADDR+0x294>
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	2b20      	cmp	r3, #32
 800525e:	d13b      	bne.n	80052d8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800526e:	605a      	str	r2, [r3, #4]
 8005270:	e032      	b.n	80052d8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	681a      	ldr	r2, [r3, #0]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005280:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800528c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005290:	d117      	bne.n	80052c2 <I2C_Master_ADDR+0x2f6>
 8005292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005294:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005298:	d00b      	beq.n	80052b2 <I2C_Master_ADDR+0x2e6>
 800529a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800529c:	2b01      	cmp	r3, #1
 800529e:	d008      	beq.n	80052b2 <I2C_Master_ADDR+0x2e6>
 80052a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a2:	2b08      	cmp	r3, #8
 80052a4:	d005      	beq.n	80052b2 <I2C_Master_ADDR+0x2e6>
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	2b10      	cmp	r3, #16
 80052aa:	d002      	beq.n	80052b2 <I2C_Master_ADDR+0x2e6>
 80052ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ae:	2b20      	cmp	r3, #32
 80052b0:	d107      	bne.n	80052c2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	685a      	ldr	r2, [r3, #4]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052c2:	2300      	movs	r3, #0
 80052c4:	60fb      	str	r3, [r7, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	60fb      	str	r3, [r7, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	60fb      	str	r3, [r7, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80052de:	e00b      	b.n	80052f8 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052e0:	2300      	movs	r3, #0
 80052e2:	60bb      	str	r3, [r7, #8]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	60bb      	str	r3, [r7, #8]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60bb      	str	r3, [r7, #8]
 80052f4:	68bb      	ldr	r3, [r7, #8]
}
 80052f6:	e7ff      	b.n	80052f8 <I2C_Master_ADDR+0x32c>
 80052f8:	bf00      	nop
 80052fa:	3744      	adds	r7, #68	; 0x44
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b084      	sub	sp, #16
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005310:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02b      	beq.n	8005374 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005320:	781a      	ldrb	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532c:	1c5a      	adds	r2, r3, #1
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b01      	subs	r3, #1
 800533a:	b29a      	uxth	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005344:	b29b      	uxth	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d114      	bne.n	8005374 <I2C_SlaveTransmit_TXE+0x72>
 800534a:	7bfb      	ldrb	r3, [r7, #15]
 800534c:	2b29      	cmp	r3, #41	; 0x29
 800534e:	d111      	bne.n	8005374 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	685a      	ldr	r2, [r3, #4]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2221      	movs	r2, #33	; 0x21
 8005364:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2228      	movs	r2, #40	; 0x28
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fa4b 	bl	800480a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005388:	b29b      	uxth	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d011      	beq.n	80053b2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005392:	781a      	ldrb	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	1c5a      	adds	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053b2:	bf00      	nop
 80053b4:	370c      	adds	r7, #12
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bc80      	pop	{r7}
 80053ba:	4770      	bx	lr

080053bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b084      	sub	sp, #16
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d02c      	beq.n	8005430 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	1c5a      	adds	r2, r3, #1
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d114      	bne.n	8005430 <I2C_SlaveReceive_RXNE+0x74>
 8005406:	7bfb      	ldrb	r3, [r7, #15]
 8005408:	2b2a      	cmp	r3, #42	; 0x2a
 800540a:	d111      	bne.n	8005430 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800541a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2222      	movs	r2, #34	; 0x22
 8005420:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2228      	movs	r2, #40	; 0x28
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7ff f9f6 	bl	800481c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005430:	bf00      	nop
 8005432:	3710      	adds	r7, #16
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}

08005438 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	d012      	beq.n	8005470 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691a      	ldr	r2, [r3, #16]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005466:	b29b      	uxth	r3, r3
 8005468:	3b01      	subs	r3, #1
 800546a:	b29a      	uxth	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005470:	bf00      	nop
 8005472:	370c      	adds	r7, #12
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b084      	sub	sp, #16
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
 8005482:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005484:	2300      	movs	r3, #0
 8005486:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005494:	2b28      	cmp	r3, #40	; 0x28
 8005496:	d127      	bne.n	80054e8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054a6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d101      	bne.n	80054b8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	09db      	lsrs	r3, r3, #7
 80054bc:	f003 0301 	and.w	r3, r3, #1
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d103      	bne.n	80054cc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	81bb      	strh	r3, [r7, #12]
 80054ca:	e002      	b.n	80054d2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80054da:	89ba      	ldrh	r2, [r7, #12]
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
 80054de:	4619      	mov	r1, r3
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f7ff f9a4 	bl	800482e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80054e6:	e008      	b.n	80054fa <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0202 	mvn.w	r2, #2
 80054f0:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80054fa:	bf00      	nop
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005512:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005522:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005524:	2300      	movs	r3, #0
 8005526:	60bb      	str	r3, [r7, #8]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	60bb      	str	r3, [r7, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
 8005540:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005550:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800555c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005560:	d172      	bne.n	8005648 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005562:	7bfb      	ldrb	r3, [r7, #15]
 8005564:	2b22      	cmp	r3, #34	; 0x22
 8005566:	d002      	beq.n	800556e <I2C_Slave_STOPF+0x6a>
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b2a      	cmp	r3, #42	; 0x2a
 800556c:	d135      	bne.n	80055da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	b29a      	uxth	r2, r3
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d005      	beq.n	8005592 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f043 0204 	orr.w	r2, r3, #4
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd feea 	bl	8003380 <HAL_DMA_GetState>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d049      	beq.n	8005646 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055b6:	4a69      	ldr	r2, [pc, #420]	; (800575c <I2C_Slave_STOPF+0x258>)
 80055b8:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fd fd62 	bl	8003088 <HAL_DMA_Abort_IT>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d03d      	beq.n	8005646 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055d4:	4610      	mov	r0, r2
 80055d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055d8:	e035      	b.n	8005646 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ec:	b29b      	uxth	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f6:	f043 0204 	orr.w	r2, r3, #4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800560c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	4618      	mov	r0, r3
 8005614:	f7fd feb4 	bl	8003380 <HAL_DMA_GetState>
 8005618:	4603      	mov	r3, r0
 800561a:	2b01      	cmp	r3, #1
 800561c:	d014      	beq.n	8005648 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005622:	4a4e      	ldr	r2, [pc, #312]	; (800575c <I2C_Slave_STOPF+0x258>)
 8005624:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562a:	4618      	mov	r0, r3
 800562c:	f7fd fd2c 	bl	8003088 <HAL_DMA_Abort_IT>
 8005630:	4603      	mov	r3, r0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005640:	4610      	mov	r0, r2
 8005642:	4798      	blx	r3
 8005644:	e000      	b.n	8005648 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005646:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800564c:	b29b      	uxth	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d03e      	beq.n	80056d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0304 	and.w	r3, r3, #4
 800565c:	2b04      	cmp	r3, #4
 800565e:	d112      	bne.n	8005686 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	691a      	ldr	r2, [r3, #16]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	3b01      	subs	r3, #1
 8005680:	b29a      	uxth	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	695b      	ldr	r3, [r3, #20]
 800568c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005690:	2b40      	cmp	r3, #64	; 0x40
 8005692:	d112      	bne.n	80056ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056be:	b29b      	uxth	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d005      	beq.n	80056d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c8:	f043 0204 	orr.w	r2, r3, #4
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d003      	beq.n	80056e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 f8b3 	bl	8005844 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80056de:	e039      	b.n	8005754 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056e0:	7bfb      	ldrb	r3, [r7, #15]
 80056e2:	2b2a      	cmp	r3, #42	; 0x2a
 80056e4:	d109      	bne.n	80056fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2228      	movs	r2, #40	; 0x28
 80056f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f7ff f891 	bl	800481c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005700:	b2db      	uxtb	r3, r3
 8005702:	2b28      	cmp	r3, #40	; 0x28
 8005704:	d111      	bne.n	800572a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a15      	ldr	r2, [pc, #84]	; (8005760 <I2C_Slave_STOPF+0x25c>)
 800570a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2200      	movs	r2, #0
 8005710:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7ff f890 	bl	8004848 <HAL_I2C_ListenCpltCallback>
}
 8005728:	e014      	b.n	8005754 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572e:	2b22      	cmp	r3, #34	; 0x22
 8005730:	d002      	beq.n	8005738 <I2C_Slave_STOPF+0x234>
 8005732:	7bfb      	ldrb	r3, [r7, #15]
 8005734:	2b22      	cmp	r3, #34	; 0x22
 8005736:	d10d      	bne.n	8005754 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2220      	movs	r2, #32
 8005742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2200      	movs	r2, #0
 800574a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f7ff f864 	bl	800481c <HAL_I2C_SlaveRxCpltCallback>
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	08005fd5 	.word	0x08005fd5
 8005760:	ffff0000 	.word	0xffff0000

08005764 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b084      	sub	sp, #16
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005772:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005778:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b08      	cmp	r3, #8
 800577e:	d002      	beq.n	8005786 <I2C_Slave_AF+0x22>
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	2b20      	cmp	r3, #32
 8005784:	d129      	bne.n	80057da <I2C_Slave_AF+0x76>
 8005786:	7bfb      	ldrb	r3, [r7, #15]
 8005788:	2b28      	cmp	r3, #40	; 0x28
 800578a:	d126      	bne.n	80057da <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	4a2c      	ldr	r2, [pc, #176]	; (8005840 <I2C_Slave_AF+0xdc>)
 8005790:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057a0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057aa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057ba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2220      	movs	r2, #32
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7ff f838 	bl	8004848 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80057d8:	e02e      	b.n	8005838 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057da:	7bfb      	ldrb	r3, [r7, #15]
 80057dc:	2b21      	cmp	r3, #33	; 0x21
 80057de:	d126      	bne.n	800582e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	4a17      	ldr	r2, [pc, #92]	; (8005840 <I2C_Slave_AF+0xdc>)
 80057e4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2221      	movs	r2, #33	; 0x21
 80057ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800580a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005814:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005824:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fe ffef 	bl	800480a <HAL_I2C_SlaveTxCpltCallback>
}
 800582c:	e004      	b.n	8005838 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005836:	615a      	str	r2, [r3, #20]
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}
 8005840:	ffff0000 	.word	0xffff0000

08005844 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005852:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b10      	cmp	r3, #16
 800585e:	d10a      	bne.n	8005876 <I2C_ITError+0x32>
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b22      	cmp	r3, #34	; 0x22
 8005864:	d107      	bne.n	8005876 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005874:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800587c:	2b28      	cmp	r3, #40	; 0x28
 800587e:	d107      	bne.n	8005890 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2228      	movs	r2, #40	; 0x28
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800588e:	e015      	b.n	80058bc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800589e:	d006      	beq.n	80058ae <I2C_ITError+0x6a>
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b60      	cmp	r3, #96	; 0x60
 80058a4:	d003      	beq.n	80058ae <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ca:	d161      	bne.n	8005990 <I2C_ITError+0x14c>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d020      	beq.n	800592a <I2C_ITError+0xe6>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ec:	4a5e      	ldr	r2, [pc, #376]	; (8005a68 <I2C_ITError+0x224>)
 80058ee:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fd fbc7 	bl	8003088 <HAL_DMA_Abort_IT>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f000 8089 	beq.w	8005a14 <I2C_ITError+0x1d0>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0201 	bic.w	r2, r2, #1
 8005910:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005920:	687a      	ldr	r2, [r7, #4]
 8005922:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005924:	4610      	mov	r0, r2
 8005926:	4798      	blx	r3
 8005928:	e074      	b.n	8005a14 <I2C_ITError+0x1d0>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592e:	4a4e      	ldr	r2, [pc, #312]	; (8005a68 <I2C_ITError+0x224>)
 8005930:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005936:	4618      	mov	r0, r3
 8005938:	f7fd fba6 	bl	8003088 <HAL_DMA_Abort_IT>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d068      	beq.n	8005a14 <I2C_ITError+0x1d0>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	695b      	ldr	r3, [r3, #20]
 8005948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594c:	2b40      	cmp	r3, #64	; 0x40
 800594e:	d10b      	bne.n	8005968 <I2C_ITError+0x124>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f022 0201 	bic.w	r2, r2, #1
 8005976:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800598a:	4610      	mov	r0, r2
 800598c:	4798      	blx	r3
 800598e:	e041      	b.n	8005a14 <I2C_ITError+0x1d0>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005996:	b2db      	uxtb	r3, r3
 8005998:	2b60      	cmp	r3, #96	; 0x60
 800599a:	d125      	bne.n	80059e8 <I2C_ITError+0x1a4>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b4:	2b40      	cmp	r3, #64	; 0x40
 80059b6:	d10b      	bne.n	80059d0 <I2C_ITError+0x18c>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	691a      	ldr	r2, [r3, #16]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	1c5a      	adds	r2, r3, #1
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0201 	bic.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7fe ff55 	bl	8004890 <HAL_I2C_AbortCpltCallback>
 80059e6:	e015      	b.n	8005a14 <I2C_ITError+0x1d0>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059f2:	2b40      	cmp	r3, #64	; 0x40
 80059f4:	d10b      	bne.n	8005a0e <I2C_ITError+0x1ca>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	691a      	ldr	r2, [r3, #16]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a00:	b2d2      	uxtb	r2, r2
 8005a02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a08:	1c5a      	adds	r2, r3, #1
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fe ff35 	bl	800487e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a1a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d11b      	bne.n	8005a60 <I2C_ITError+0x21c>
 8005a28:	7bfb      	ldrb	r3, [r7, #15]
 8005a2a:	2b28      	cmp	r3, #40	; 0x28
 8005a2c:	d118      	bne.n	8005a60 <I2C_ITError+0x21c>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a3c:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a0a      	ldr	r2, [pc, #40]	; (8005a6c <I2C_ITError+0x228>)
 8005a42:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fe fef4 	bl	8004848 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005a60:	bf00      	nop
 8005a62:	3710      	adds	r7, #16
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	08005fd5 	.word	0x08005fd5
 8005a6c:	ffff0000 	.word	0xffff0000

08005a70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b088      	sub	sp, #32
 8005a74:	af02      	add	r7, sp, #8
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	607a      	str	r2, [r7, #4]
 8005a7a:	603b      	str	r3, [r7, #0]
 8005a7c:	460b      	mov	r3, r1
 8005a7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d006      	beq.n	8005a9a <I2C_MasterRequestWrite+0x2a>
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d003      	beq.n	8005a9a <I2C_MasterRequestWrite+0x2a>
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a98:	d108      	bne.n	8005aac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e00b      	b.n	8005ac4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab0:	2b12      	cmp	r3, #18
 8005ab2:	d107      	bne.n	8005ac4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ac2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ad0:	68f8      	ldr	r0, [r7, #12]
 8005ad2:	f000 faee 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d001      	beq.n	8005ae0 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e035      	b.n	8005b4c <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ae8:	d108      	bne.n	8005afc <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aea:	897b      	ldrh	r3, [r7, #10]
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005af8:	611a      	str	r2, [r3, #16]
 8005afa:	e01b      	b.n	8005b34 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005afc:	897b      	ldrh	r3, [r7, #10]
 8005afe:	11db      	asrs	r3, r3, #7
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	f003 0306 	and.w	r3, r3, #6
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	f063 030f 	orn	r3, r3, #15
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	490e      	ldr	r1, [pc, #56]	; (8005b54 <I2C_MasterRequestWrite+0xe4>)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 fb20 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e010      	b.n	8005b4c <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b2a:	897b      	ldrh	r3, [r7, #10]
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4907      	ldr	r1, [pc, #28]	; (8005b58 <I2C_MasterRequestWrite+0xe8>)
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f000 fb10 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3718      	adds	r7, #24
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}
 8005b54:	00010008 	.word	0x00010008
 8005b58:	00010002 	.word	0x00010002

08005b5c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b088      	sub	sp, #32
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	607a      	str	r2, [r7, #4]
 8005b66:	603b      	str	r3, [r7, #0]
 8005b68:	460b      	mov	r3, r1
 8005b6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b80:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d006      	beq.n	8005b96 <I2C_MasterRequestRead+0x3a>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d003      	beq.n	8005b96 <I2C_MasterRequestRead+0x3a>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b94:	d108      	bne.n	8005ba8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681a      	ldr	r2, [r3, #0]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	e00b      	b.n	8005bc0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bac:	2b11      	cmp	r3, #17
 8005bae:	d107      	bne.n	8005bc0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005bbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fa70 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d001      	beq.n	8005bdc <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e06d      	b.n	8005cb8 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005be4:	d108      	bne.n	8005bf8 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005be6:	897b      	ldrh	r3, [r7, #10]
 8005be8:	b2db      	uxtb	r3, r3
 8005bea:	f043 0301 	orr.w	r3, r3, #1
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	611a      	str	r2, [r3, #16]
 8005bf6:	e053      	b.n	8005ca0 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bf8:	897b      	ldrh	r3, [r7, #10]
 8005bfa:	11db      	asrs	r3, r3, #7
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	f003 0306 	and.w	r3, r3, #6
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	f063 030f 	orn	r3, r3, #15
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	492a      	ldr	r1, [pc, #168]	; (8005cc0 <I2C_MasterRequestRead+0x164>)
 8005c16:	68f8      	ldr	r0, [r7, #12]
 8005c18:	f000 faa2 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d001      	beq.n	8005c26 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e048      	b.n	8005cb8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c26:	897b      	ldrh	r3, [r7, #10]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	4923      	ldr	r1, [pc, #140]	; (8005cc4 <I2C_MasterRequestRead+0x168>)
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fa92 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d001      	beq.n	8005c46 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8005c42:	2301      	movs	r3, #1
 8005c44:	e038      	b.n	8005cb8 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c46:	2300      	movs	r3, #0
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	695b      	ldr	r3, [r3, #20]
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	699b      	ldr	r3, [r3, #24]
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c6a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 fa1a 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e017      	b.n	8005cb8 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c88:	897b      	ldrh	r3, [r7, #10]
 8005c8a:	11db      	asrs	r3, r3, #7
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	f003 0306 	and.w	r3, r3, #6
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f063 030e 	orn	r3, r3, #14
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	4907      	ldr	r1, [pc, #28]	; (8005cc4 <I2C_MasterRequestRead+0x168>)
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 fa5a 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d001      	beq.n	8005cb6 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	e000      	b.n	8005cb8 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3718      	adds	r7, #24
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	00010008 	.word	0x00010008
 8005cc4:	00010002 	.word	0x00010002

08005cc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	4608      	mov	r0, r1
 8005cd2:	4611      	mov	r1, r2
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	817b      	strh	r3, [r7, #10]
 8005cda:	460b      	mov	r3, r1
 8005cdc:	813b      	strh	r3, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cf0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	6a3b      	ldr	r3, [r7, #32]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005cfe:	68f8      	ldr	r0, [r7, #12]
 8005d00:	f000 f9d7 	bl	80060b2 <I2C_WaitOnFlagUntilTimeout>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d001      	beq.n	8005d0e <I2C_RequestMemoryWrite+0x46>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e05f      	b.n	8005dce <I2C_RequestMemoryWrite+0x106>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d0e:	897b      	ldrh	r3, [r7, #10]
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	461a      	mov	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d20:	6a3a      	ldr	r2, [r7, #32]
 8005d22:	492d      	ldr	r1, [pc, #180]	; (8005dd8 <I2C_RequestMemoryWrite+0x110>)
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fa1b 	bl	8006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <I2C_RequestMemoryWrite+0x6c>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e04c      	b.n	8005dce <I2C_RequestMemoryWrite+0x106>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d34:	2300      	movs	r3, #0
 8005d36:	617b      	str	r3, [r7, #20]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	617b      	str	r3, [r7, #20]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4c:	6a39      	ldr	r1, [r7, #32]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 fa85 	bl	800625e <I2C_WaitOnTXEFlagUntilTimeout>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <I2C_RequestMemoryWrite+0xae>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	d107      	bne.n	8005d72 <I2C_RequestMemoryWrite+0xaa>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e02b      	b.n	8005dce <I2C_RequestMemoryWrite+0x106>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d76:	88fb      	ldrh	r3, [r7, #6]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d105      	bne.n	8005d88 <I2C_RequestMemoryWrite+0xc0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005d7c:	893b      	ldrh	r3, [r7, #8]
 8005d7e:	b2da      	uxtb	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	611a      	str	r2, [r3, #16]
 8005d86:	e021      	b.n	8005dcc <I2C_RequestMemoryWrite+0x104>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005d88:	893b      	ldrh	r3, [r7, #8]
 8005d8a:	0a1b      	lsrs	r3, r3, #8
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	b2da      	uxtb	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d98:	6a39      	ldr	r1, [r7, #32]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f000 fa5f 	bl	800625e <I2C_WaitOnTXEFlagUntilTimeout>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d00d      	beq.n	8005dc2 <I2C_RequestMemoryWrite+0xfa>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005daa:	2b04      	cmp	r3, #4
 8005dac:	d107      	bne.n	8005dbe <I2C_RequestMemoryWrite+0xf6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e005      	b.n	8005dce <I2C_RequestMemoryWrite+0x106>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dc2:	893b      	ldrh	r3, [r7, #8]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3718      	adds	r7, #24
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	00010002 	.word	0x00010002

08005ddc <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b086      	sub	sp, #24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005df8:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfe:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005e0e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e14:	2200      	movs	r2, #0
 8005e16:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	629a      	str	r2, [r3, #40]	; 0x28

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8005e20:	7cfb      	ldrb	r3, [r7, #19]
 8005e22:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005e26:	2b21      	cmp	r3, #33	; 0x21
 8005e28:	d007      	beq.n	8005e3a <I2C_DMAXferCplt+0x5e>
 8005e2a:	7cfb      	ldrb	r3, [r7, #19]
 8005e2c:	f003 0322 	and.w	r3, r3, #34	; 0x22
 8005e30:	2b22      	cmp	r3, #34	; 0x22
 8005e32:	d131      	bne.n	8005e98 <I2C_DMAXferCplt+0xbc>
 8005e34:	7cbb      	ldrb	r3, [r7, #18]
 8005e36:	2b20      	cmp	r3, #32
 8005e38:	d12e      	bne.n	8005e98 <I2C_DMAXferCplt+0xbc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	685a      	ldr	r2, [r3, #4]
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e48:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005e50:	7cfb      	ldrb	r3, [r7, #19]
 8005e52:	2b29      	cmp	r3, #41	; 0x29
 8005e54:	d10a      	bne.n	8005e6c <I2C_DMAXferCplt+0x90>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2221      	movs	r2, #33	; 0x21
 8005e5a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	2228      	movs	r2, #40	; 0x28
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e64:	6978      	ldr	r0, [r7, #20]
 8005e66:	f7fe fcd0 	bl	800480a <HAL_I2C_SlaveTxCpltCallback>
 8005e6a:	e00c      	b.n	8005e86 <I2C_DMAXferCplt+0xaa>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005e6c:	7cfb      	ldrb	r3, [r7, #19]
 8005e6e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e70:	d109      	bne.n	8005e86 <I2C_DMAXferCplt+0xaa>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2222      	movs	r2, #34	; 0x22
 8005e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	2228      	movs	r2, #40	; 0x28
 8005e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e80:	6978      	ldr	r0, [r7, #20]
 8005e82:	f7fe fccb 	bl	800481c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005e94:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005e96:	e06a      	b.n	8005f6e <I2C_DMAXferCplt+0x192>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d064      	beq.n	8005f6e <I2C_DMAXferCplt+0x192>
    if (hi2c->XferCount == (uint16_t)1)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d107      	bne.n	8005ebe <I2C_DMAXferCplt+0xe2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ebc:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005ecc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ed4:	d009      	beq.n	8005eea <I2C_DMAXferCplt+0x10e>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d006      	beq.n	8005eea <I2C_DMAXferCplt+0x10e>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005ee2:	d002      	beq.n	8005eea <I2C_DMAXferCplt+0x10e>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	d107      	bne.n	8005efa <I2C_DMAXferCplt+0x11e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ef8:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f08:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f18:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <I2C_DMAXferCplt+0x154>
      HAL_I2C_ErrorCallback(hi2c);
 8005f28:	6978      	ldr	r0, [r7, #20]
 8005f2a:	f7fe fca8 	bl	800487e <HAL_I2C_ErrorCallback>
}
 8005f2e:	e01e      	b.n	8005f6e <I2C_DMAXferCplt+0x192>
      hi2c->State = HAL_I2C_STATE_READY;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b40      	cmp	r3, #64	; 0x40
 8005f42:	d10a      	bne.n	8005f5a <I2C_DMAXferCplt+0x17e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8005f52:	6978      	ldr	r0, [r7, #20]
 8005f54:	f7fe fc8a 	bl	800486c <HAL_I2C_MemRxCpltCallback>
}
 8005f58:	e009      	b.n	8005f6e <I2C_DMAXferCplt+0x192>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005f62:	697b      	ldr	r3, [r7, #20]
 8005f64:	2212      	movs	r2, #18
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8005f68:	6978      	ldr	r0, [r7, #20]
 8005f6a:	f7fe fc45 	bl	80047f8 <HAL_I2C_MasterRxCpltCallback>
}
 8005f6e:	bf00      	nop
 8005f70:	3718      	adds	r7, #24
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b084      	sub	sp, #16
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f88:	2200      	movs	r2, #0
 8005f8a:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f90:	2200      	movs	r2, #0
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fa2:	601a      	str	r2, [r3, #0]

  hi2c->XferCount       = 0U;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2c->State           = HAL_I2C_STATE_READY;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2220      	movs	r2, #32
 8005fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->Mode            = HAL_I2C_MODE_NONE;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  hi2c->ErrorCode       |= HAL_I2C_ERROR_DMA;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f043 0210 	orr.w	r2, r3, #16
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ErrorCallback(hi2c);
#else
  HAL_I2C_ErrorCallback(hi2c);
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f7fe fc59 	bl	800487e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005fcc:	bf00      	nop
 8005fce:	3710      	adds	r7, #16
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fee:	2200      	movs	r2, #0
 8005ff0:	629a      	str	r2, [r3, #40]	; 0x28
  hi2c->hdmarx->XferCpltCallback = NULL;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006008:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2200      	movs	r2, #0
 800600e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006014:	2200      	movs	r2, #0
 8006016:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	2200      	movs	r2, #0
 800601e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b60      	cmp	r3, #96	; 0x60
 800603a:	d10e      	bne.n	800605a <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2200      	movs	r2, #0
 8006048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7fe fc1c 	bl	8004890 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006058:	e027      	b.n	80060aa <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800605a:	7afb      	ldrb	r3, [r7, #11]
 800605c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006060:	2b28      	cmp	r3, #40	; 0x28
 8006062:	d117      	bne.n	8006094 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f042 0201 	orr.w	r2, r2, #1
 8006072:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006082:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2200      	movs	r2, #0
 8006088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2228      	movs	r2, #40	; 0x28
 800608e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8006092:	e007      	b.n	80060a4 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2220      	movs	r2, #32
 8006098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7fe fbea 	bl	800487e <HAL_I2C_ErrorCallback>
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	60f8      	str	r0, [r7, #12]
 80060ba:	60b9      	str	r1, [r7, #8]
 80060bc:	603b      	str	r3, [r7, #0]
 80060be:	4613      	mov	r3, r2
 80060c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80060c2:	e025      	b.n	8006110 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ca:	d021      	beq.n	8006110 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060cc:	f7fc fe16 	bl	8002cfc <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	683a      	ldr	r2, [r7, #0]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d302      	bcc.n	80060e2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d116      	bne.n	8006110 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2220      	movs	r2, #32
 80060ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	f043 0220 	orr.w	r2, r3, #32
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e023      	b.n	8006158 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	0c1b      	lsrs	r3, r3, #16
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	d10d      	bne.n	8006136 <I2C_WaitOnFlagUntilTimeout+0x84>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	695b      	ldr	r3, [r3, #20]
 8006120:	43da      	mvns	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4013      	ands	r3, r2
 8006126:	b29b      	uxth	r3, r3
 8006128:	2b00      	cmp	r3, #0
 800612a:	bf0c      	ite	eq
 800612c:	2301      	moveq	r3, #1
 800612e:	2300      	movne	r3, #0
 8006130:	b2db      	uxtb	r3, r3
 8006132:	461a      	mov	r2, r3
 8006134:	e00c      	b.n	8006150 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	43da      	mvns	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	4013      	ands	r3, r2
 8006142:	b29b      	uxth	r3, r3
 8006144:	2b00      	cmp	r3, #0
 8006146:	bf0c      	ite	eq
 8006148:	2301      	moveq	r3, #1
 800614a:	2300      	movne	r3, #0
 800614c:	b2db      	uxtb	r3, r3
 800614e:	461a      	mov	r2, r3
 8006150:	79fb      	ldrb	r3, [r7, #7]
 8006152:	429a      	cmp	r2, r3
 8006154:	d0b6      	beq.n	80060c4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006156:	2300      	movs	r3, #0
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800616e:	e051      	b.n	8006214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695b      	ldr	r3, [r3, #20]
 8006176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800617a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800617e:	d123      	bne.n	80061c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800618e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006198:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2220      	movs	r2, #32
 80061a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	f043 0204 	orr.w	r2, r3, #4
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e046      	b.n	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d021      	beq.n	8006214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061d0:	f7fc fd94 	bl	8002cfc <HAL_GetTick>
 80061d4:	4602      	mov	r2, r0
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	1ad3      	subs	r3, r2, r3
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d302      	bcc.n	80061e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d116      	bne.n	8006214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2200      	movs	r2, #0
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	f043 0220 	orr.w	r2, r3, #32
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2200      	movs	r2, #0
 800620c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e020      	b.n	8006256 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	0c1b      	lsrs	r3, r3, #16
 8006218:	b2db      	uxtb	r3, r3
 800621a:	2b01      	cmp	r3, #1
 800621c:	d10c      	bne.n	8006238 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	695b      	ldr	r3, [r3, #20]
 8006224:	43da      	mvns	r2, r3
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	4013      	ands	r3, r2
 800622a:	b29b      	uxth	r3, r3
 800622c:	2b00      	cmp	r3, #0
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	e00b      	b.n	8006250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	43da      	mvns	r2, r3
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	4013      	ands	r3, r2
 8006244:	b29b      	uxth	r3, r3
 8006246:	2b00      	cmp	r3, #0
 8006248:	bf14      	ite	ne
 800624a:	2301      	movne	r3, #1
 800624c:	2300      	moveq	r3, #0
 800624e:	b2db      	uxtb	r3, r3
 8006250:	2b00      	cmp	r3, #0
 8006252:	d18d      	bne.n	8006170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800626a:	e02d      	b.n	80062c8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f8ce 	bl	800640e <I2C_IsAcknowledgeFailed>
 8006272:	4603      	mov	r3, r0
 8006274:	2b00      	cmp	r3, #0
 8006276:	d001      	beq.n	800627c <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	e02d      	b.n	80062d8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006282:	d021      	beq.n	80062c8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006284:	f7fc fd3a 	bl	8002cfc <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	68ba      	ldr	r2, [r7, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d302      	bcc.n	800629a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d116      	bne.n	80062c8 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2200      	movs	r2, #0
 80062ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b4:	f043 0220 	orr.w	r2, r3, #32
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2200      	movs	r2, #0
 80062c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e007      	b.n	80062d8 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062d2:	2b80      	cmp	r3, #128	; 0x80
 80062d4:	d1ca      	bne.n	800626c <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062d6:	2300      	movs	r3, #0
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3710      	adds	r7, #16
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80062ec:	e02d      	b.n	800634a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f000 f88d 	bl	800640e <I2C_IsAcknowledgeFailed>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80062fa:	2301      	movs	r3, #1
 80062fc:	e02d      	b.n	800635a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006304:	d021      	beq.n	800634a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006306:	f7fc fcf9 	bl	8002cfc <HAL_GetTick>
 800630a:	4602      	mov	r2, r0
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	429a      	cmp	r2, r3
 8006314:	d302      	bcc.n	800631c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d116      	bne.n	800634a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2200      	movs	r2, #0
 8006320:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2220      	movs	r2, #32
 8006326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2200      	movs	r2, #0
 800632e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006336:	f043 0220 	orr.w	r2, r3, #32
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2200      	movs	r2, #0
 8006342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006346:	2301      	movs	r3, #1
 8006348:	e007      	b.n	800635a <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695b      	ldr	r3, [r3, #20]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b04      	cmp	r3, #4
 8006356:	d1ca      	bne.n	80062ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	60f8      	str	r0, [r7, #12]
 800636a:	60b9      	str	r1, [r7, #8]
 800636c:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800636e:	e042      	b.n	80063f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	695b      	ldr	r3, [r3, #20]
 8006376:	f003 0310 	and.w	r3, r3, #16
 800637a:	2b10      	cmp	r3, #16
 800637c:	d119      	bne.n	80063b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f06f 0210 	mvn.w	r2, #16
 8006386:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2200      	movs	r2, #0
 800638c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2220      	movs	r2, #32
 8006392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e029      	b.n	8006406 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063b2:	f7fc fca3 	bl	8002cfc <HAL_GetTick>
 80063b6:	4602      	mov	r2, r0
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	1ad3      	subs	r3, r2, r3
 80063bc:	68ba      	ldr	r2, [r7, #8]
 80063be:	429a      	cmp	r2, r3
 80063c0:	d302      	bcc.n	80063c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d116      	bne.n	80063f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2200      	movs	r2, #0
 80063cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2200      	movs	r2, #0
 80063da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e2:	f043 0220 	orr.w	r2, r3, #32
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e007      	b.n	8006406 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006400:	2b40      	cmp	r3, #64	; 0x40
 8006402:	d1b5      	bne.n	8006370 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006420:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006424:	d11b      	bne.n	800645e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800642e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	f043 0204 	orr.w	r2, r3, #4
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	e000      	b.n	8006460 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	bc80      	pop	{r7}
 8006468:	4770      	bx	lr

0800646a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800646a:	b480      	push	{r7}
 800646c:	b083      	sub	sp, #12
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800647a:	d103      	bne.n	8006484 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006482:	e007      	b.n	8006494 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006488:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800648c:	d102      	bne.n	8006494 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2208      	movs	r2, #8
 8006492:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	bc80      	pop	{r7}
 800649c:	4770      	bx	lr
	...

080064a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e26c      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	f000 8087 	beq.w	80065ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80064c0:	4b92      	ldr	r3, [pc, #584]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	f003 030c 	and.w	r3, r3, #12
 80064c8:	2b04      	cmp	r3, #4
 80064ca:	d00c      	beq.n	80064e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80064cc:	4b8f      	ldr	r3, [pc, #572]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	f003 030c 	and.w	r3, r3, #12
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d112      	bne.n	80064fe <HAL_RCC_OscConfig+0x5e>
 80064d8:	4b8c      	ldr	r3, [pc, #560]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064e4:	d10b      	bne.n	80064fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e6:	4b89      	ldr	r3, [pc, #548]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d06c      	beq.n	80065cc <HAL_RCC_OscConfig+0x12c>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d168      	bne.n	80065cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e246      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006506:	d106      	bne.n	8006516 <HAL_RCC_OscConfig+0x76>
 8006508:	4b80      	ldr	r3, [pc, #512]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a7f      	ldr	r2, [pc, #508]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 800650e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006512:	6013      	str	r3, [r2, #0]
 8006514:	e02e      	b.n	8006574 <HAL_RCC_OscConfig+0xd4>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10c      	bne.n	8006538 <HAL_RCC_OscConfig+0x98>
 800651e:	4b7b      	ldr	r3, [pc, #492]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	4a7a      	ldr	r2, [pc, #488]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006524:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006528:	6013      	str	r3, [r2, #0]
 800652a:	4b78      	ldr	r3, [pc, #480]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a77      	ldr	r2, [pc, #476]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006530:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006534:	6013      	str	r3, [r2, #0]
 8006536:	e01d      	b.n	8006574 <HAL_RCC_OscConfig+0xd4>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006540:	d10c      	bne.n	800655c <HAL_RCC_OscConfig+0xbc>
 8006542:	4b72      	ldr	r3, [pc, #456]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a71      	ldr	r2, [pc, #452]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800654c:	6013      	str	r3, [r2, #0]
 800654e:	4b6f      	ldr	r3, [pc, #444]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a6e      	ldr	r2, [pc, #440]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	e00b      	b.n	8006574 <HAL_RCC_OscConfig+0xd4>
 800655c:	4b6b      	ldr	r3, [pc, #428]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a6a      	ldr	r2, [pc, #424]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	4b68      	ldr	r3, [pc, #416]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4a67      	ldr	r2, [pc, #412]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 800656e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006572:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d013      	beq.n	80065a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800657c:	f7fc fbbe 	bl	8002cfc <HAL_GetTick>
 8006580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	e008      	b.n	8006596 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006584:	f7fc fbba 	bl	8002cfc <HAL_GetTick>
 8006588:	4602      	mov	r2, r0
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	2b64      	cmp	r3, #100	; 0x64
 8006590:	d901      	bls.n	8006596 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8006592:	2303      	movs	r3, #3
 8006594:	e1fa      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006596:	4b5d      	ldr	r3, [pc, #372]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d0f0      	beq.n	8006584 <HAL_RCC_OscConfig+0xe4>
 80065a2:	e014      	b.n	80065ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065a4:	f7fc fbaa 	bl	8002cfc <HAL_GetTick>
 80065a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065aa:	e008      	b.n	80065be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065ac:	f7fc fba6 	bl	8002cfc <HAL_GetTick>
 80065b0:	4602      	mov	r2, r0
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	2b64      	cmp	r3, #100	; 0x64
 80065b8:	d901      	bls.n	80065be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e1e6      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80065be:	4b53      	ldr	r3, [pc, #332]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1f0      	bne.n	80065ac <HAL_RCC_OscConfig+0x10c>
 80065ca:	e000      	b.n	80065ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0302 	and.w	r3, r3, #2
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d063      	beq.n	80066a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80065da:	4b4c      	ldr	r3, [pc, #304]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f003 030c 	and.w	r3, r3, #12
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00b      	beq.n	80065fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80065e6:	4b49      	ldr	r3, [pc, #292]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f003 030c 	and.w	r3, r3, #12
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d11c      	bne.n	800662c <HAL_RCC_OscConfig+0x18c>
 80065f2:	4b46      	ldr	r3, [pc, #280]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d116      	bne.n	800662c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80065fe:	4b43      	ldr	r3, [pc, #268]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b00      	cmp	r3, #0
 8006608:	d005      	beq.n	8006616 <HAL_RCC_OscConfig+0x176>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	2b01      	cmp	r3, #1
 8006610:	d001      	beq.n	8006616 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e1ba      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006616:	4b3d      	ldr	r3, [pc, #244]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	695b      	ldr	r3, [r3, #20]
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	4939      	ldr	r1, [pc, #228]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006626:	4313      	orrs	r3, r2
 8006628:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800662a:	e03a      	b.n	80066a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d020      	beq.n	8006676 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006634:	4b36      	ldr	r3, [pc, #216]	; (8006710 <HAL_RCC_OscConfig+0x270>)
 8006636:	2201      	movs	r2, #1
 8006638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800663a:	f7fc fb5f 	bl	8002cfc <HAL_GetTick>
 800663e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006640:	e008      	b.n	8006654 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006642:	f7fc fb5b 	bl	8002cfc <HAL_GetTick>
 8006646:	4602      	mov	r2, r0
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	1ad3      	subs	r3, r2, r3
 800664c:	2b02      	cmp	r3, #2
 800664e:	d901      	bls.n	8006654 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e19b      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006654:	4b2d      	ldr	r3, [pc, #180]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0302 	and.w	r3, r3, #2
 800665c:	2b00      	cmp	r3, #0
 800665e:	d0f0      	beq.n	8006642 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006660:	4b2a      	ldr	r3, [pc, #168]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	00db      	lsls	r3, r3, #3
 800666e:	4927      	ldr	r1, [pc, #156]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006670:	4313      	orrs	r3, r2
 8006672:	600b      	str	r3, [r1, #0]
 8006674:	e015      	b.n	80066a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006676:	4b26      	ldr	r3, [pc, #152]	; (8006710 <HAL_RCC_OscConfig+0x270>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667c:	f7fc fb3e 	bl	8002cfc <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006684:	f7fc fb3a 	bl	8002cfc <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e17a      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006696:	4b1d      	ldr	r3, [pc, #116]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0302 	and.w	r3, r3, #2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f003 0308 	and.w	r3, r3, #8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d03a      	beq.n	8006724 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	699b      	ldr	r3, [r3, #24]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d019      	beq.n	80066ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80066b6:	4b17      	ldr	r3, [pc, #92]	; (8006714 <HAL_RCC_OscConfig+0x274>)
 80066b8:	2201      	movs	r2, #1
 80066ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066bc:	f7fc fb1e 	bl	8002cfc <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066c4:	f7fc fb1a 	bl	8002cfc <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e15a      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80066d6:	4b0d      	ldr	r3, [pc, #52]	; (800670c <HAL_RCC_OscConfig+0x26c>)
 80066d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066da:	f003 0302 	and.w	r3, r3, #2
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f0      	beq.n	80066c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80066e2:	2001      	movs	r0, #1
 80066e4:	f000 faf6 	bl	8006cd4 <RCC_Delay>
 80066e8:	e01c      	b.n	8006724 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <HAL_RCC_OscConfig+0x274>)
 80066ec:	2200      	movs	r2, #0
 80066ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80066f0:	f7fc fb04 	bl	8002cfc <HAL_GetTick>
 80066f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80066f6:	e00f      	b.n	8006718 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80066f8:	f7fc fb00 	bl	8002cfc <HAL_GetTick>
 80066fc:	4602      	mov	r2, r0
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	2b02      	cmp	r3, #2
 8006704:	d908      	bls.n	8006718 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	e140      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
 800670a:	bf00      	nop
 800670c:	40021000 	.word	0x40021000
 8006710:	42420000 	.word	0x42420000
 8006714:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006718:	4b9e      	ldr	r3, [pc, #632]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e9      	bne.n	80066f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0304 	and.w	r3, r3, #4
 800672c:	2b00      	cmp	r3, #0
 800672e:	f000 80a6 	beq.w	800687e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006732:	2300      	movs	r3, #0
 8006734:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006736:	4b97      	ldr	r3, [pc, #604]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006742:	4b94      	ldr	r3, [pc, #592]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006744:	69db      	ldr	r3, [r3, #28]
 8006746:	4a93      	ldr	r2, [pc, #588]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006748:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800674c:	61d3      	str	r3, [r2, #28]
 800674e:	4b91      	ldr	r3, [pc, #580]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006756:	60bb      	str	r3, [r7, #8]
 8006758:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800675a:	2301      	movs	r3, #1
 800675c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800675e:	4b8e      	ldr	r3, [pc, #568]	; (8006998 <HAL_RCC_OscConfig+0x4f8>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006766:	2b00      	cmp	r3, #0
 8006768:	d118      	bne.n	800679c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800676a:	4b8b      	ldr	r3, [pc, #556]	; (8006998 <HAL_RCC_OscConfig+0x4f8>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a8a      	ldr	r2, [pc, #552]	; (8006998 <HAL_RCC_OscConfig+0x4f8>)
 8006770:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006774:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006776:	f7fc fac1 	bl	8002cfc <HAL_GetTick>
 800677a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800677c:	e008      	b.n	8006790 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800677e:	f7fc fabd 	bl	8002cfc <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	693b      	ldr	r3, [r7, #16]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	2b64      	cmp	r3, #100	; 0x64
 800678a:	d901      	bls.n	8006790 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800678c:	2303      	movs	r3, #3
 800678e:	e0fd      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006790:	4b81      	ldr	r3, [pc, #516]	; (8006998 <HAL_RCC_OscConfig+0x4f8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006798:	2b00      	cmp	r3, #0
 800679a:	d0f0      	beq.n	800677e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d106      	bne.n	80067b2 <HAL_RCC_OscConfig+0x312>
 80067a4:	4b7b      	ldr	r3, [pc, #492]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067a6:	6a1b      	ldr	r3, [r3, #32]
 80067a8:	4a7a      	ldr	r2, [pc, #488]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067aa:	f043 0301 	orr.w	r3, r3, #1
 80067ae:	6213      	str	r3, [r2, #32]
 80067b0:	e02d      	b.n	800680e <HAL_RCC_OscConfig+0x36e>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d10c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x334>
 80067ba:	4b76      	ldr	r3, [pc, #472]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	4a75      	ldr	r2, [pc, #468]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	6213      	str	r3, [r2, #32]
 80067c6:	4b73      	ldr	r3, [pc, #460]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	4a72      	ldr	r2, [pc, #456]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067cc:	f023 0304 	bic.w	r3, r3, #4
 80067d0:	6213      	str	r3, [r2, #32]
 80067d2:	e01c      	b.n	800680e <HAL_RCC_OscConfig+0x36e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b05      	cmp	r3, #5
 80067da:	d10c      	bne.n	80067f6 <HAL_RCC_OscConfig+0x356>
 80067dc:	4b6d      	ldr	r3, [pc, #436]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	4a6c      	ldr	r2, [pc, #432]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067e2:	f043 0304 	orr.w	r3, r3, #4
 80067e6:	6213      	str	r3, [r2, #32]
 80067e8:	4b6a      	ldr	r3, [pc, #424]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067ea:	6a1b      	ldr	r3, [r3, #32]
 80067ec:	4a69      	ldr	r2, [pc, #420]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067ee:	f043 0301 	orr.w	r3, r3, #1
 80067f2:	6213      	str	r3, [r2, #32]
 80067f4:	e00b      	b.n	800680e <HAL_RCC_OscConfig+0x36e>
 80067f6:	4b67      	ldr	r3, [pc, #412]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	4a66      	ldr	r2, [pc, #408]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80067fc:	f023 0301 	bic.w	r3, r3, #1
 8006800:	6213      	str	r3, [r2, #32]
 8006802:	4b64      	ldr	r3, [pc, #400]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	4a63      	ldr	r2, [pc, #396]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006808:	f023 0304 	bic.w	r3, r3, #4
 800680c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d015      	beq.n	8006842 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006816:	f7fc fa71 	bl	8002cfc <HAL_GetTick>
 800681a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800681c:	e00a      	b.n	8006834 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800681e:	f7fc fa6d 	bl	8002cfc <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	f241 3288 	movw	r2, #5000	; 0x1388
 800682c:	4293      	cmp	r3, r2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e0ab      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006834:	4b57      	ldr	r3, [pc, #348]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006836:	6a1b      	ldr	r3, [r3, #32]
 8006838:	f003 0302 	and.w	r3, r3, #2
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0ee      	beq.n	800681e <HAL_RCC_OscConfig+0x37e>
 8006840:	e014      	b.n	800686c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006842:	f7fc fa5b 	bl	8002cfc <HAL_GetTick>
 8006846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006848:	e00a      	b.n	8006860 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800684a:	f7fc fa57 	bl	8002cfc <HAL_GetTick>
 800684e:	4602      	mov	r2, r0
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	1ad3      	subs	r3, r2, r3
 8006854:	f241 3288 	movw	r2, #5000	; 0x1388
 8006858:	4293      	cmp	r3, r2
 800685a:	d901      	bls.n	8006860 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800685c:	2303      	movs	r3, #3
 800685e:	e095      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006860:	4b4c      	ldr	r3, [pc, #304]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006862:	6a1b      	ldr	r3, [r3, #32]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d1ee      	bne.n	800684a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800686c:	7dfb      	ldrb	r3, [r7, #23]
 800686e:	2b01      	cmp	r3, #1
 8006870:	d105      	bne.n	800687e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006872:	4b48      	ldr	r3, [pc, #288]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	4a47      	ldr	r2, [pc, #284]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800687c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	69db      	ldr	r3, [r3, #28]
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 8081 	beq.w	800698a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006888:	4b42      	ldr	r3, [pc, #264]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f003 030c 	and.w	r3, r3, #12
 8006890:	2b08      	cmp	r3, #8
 8006892:	d061      	beq.n	8006958 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d146      	bne.n	800692a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800689c:	4b3f      	ldr	r3, [pc, #252]	; (800699c <HAL_RCC_OscConfig+0x4fc>)
 800689e:	2200      	movs	r2, #0
 80068a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a2:	f7fc fa2b 	bl	8002cfc <HAL_GetTick>
 80068a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80068aa:	f7fc fa27 	bl	8002cfc <HAL_GetTick>
 80068ae:	4602      	mov	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e067      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80068bc:	4b35      	ldr	r3, [pc, #212]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d1f0      	bne.n	80068aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d0:	d108      	bne.n	80068e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80068d2:	4b30      	ldr	r3, [pc, #192]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	689b      	ldr	r3, [r3, #8]
 80068de:	492d      	ldr	r1, [pc, #180]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80068e0:	4313      	orrs	r3, r2
 80068e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80068e4:	4b2b      	ldr	r3, [pc, #172]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a19      	ldr	r1, [r3, #32]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068f4:	430b      	orrs	r3, r1
 80068f6:	4927      	ldr	r1, [pc, #156]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 80068f8:	4313      	orrs	r3, r2
 80068fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80068fc:	4b27      	ldr	r3, [pc, #156]	; (800699c <HAL_RCC_OscConfig+0x4fc>)
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006902:	f7fc f9fb 	bl	8002cfc <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800690a:	f7fc f9f7 	bl	8002cfc <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e037      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800691c:	4b1d      	ldr	r3, [pc, #116]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCC_OscConfig+0x46a>
 8006928:	e02f      	b.n	800698a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800692a:	4b1c      	ldr	r3, [pc, #112]	; (800699c <HAL_RCC_OscConfig+0x4fc>)
 800692c:	2200      	movs	r2, #0
 800692e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006930:	f7fc f9e4 	bl	8002cfc <HAL_GetTick>
 8006934:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006936:	e008      	b.n	800694a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006938:	f7fc f9e0 	bl	8002cfc <HAL_GetTick>
 800693c:	4602      	mov	r2, r0
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	1ad3      	subs	r3, r2, r3
 8006942:	2b02      	cmp	r3, #2
 8006944:	d901      	bls.n	800694a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006946:	2303      	movs	r3, #3
 8006948:	e020      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800694a:	4b12      	ldr	r3, [pc, #72]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1f0      	bne.n	8006938 <HAL_RCC_OscConfig+0x498>
 8006956:	e018      	b.n	800698a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	2b01      	cmp	r3, #1
 800695e:	d101      	bne.n	8006964 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e013      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006964:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <HAL_RCC_OscConfig+0x4f4>)
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	429a      	cmp	r2, r3
 8006976:	d106      	bne.n	8006986 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006982:	429a      	cmp	r2, r3
 8006984:	d001      	beq.n	800698a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	e000      	b.n	800698c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3718      	adds	r7, #24
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}
 8006994:	40021000 	.word	0x40021000
 8006998:	40007000 	.word	0x40007000
 800699c:	42420060 	.word	0x42420060

080069a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d101      	bne.n	80069b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e0d0      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80069b4:	4b6a      	ldr	r3, [pc, #424]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0307 	and.w	r3, r3, #7
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d910      	bls.n	80069e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069c2:	4b67      	ldr	r3, [pc, #412]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 0207 	bic.w	r2, r3, #7
 80069ca:	4965      	ldr	r1, [pc, #404]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	4313      	orrs	r3, r2
 80069d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069d2:	4b63      	ldr	r3, [pc, #396]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f003 0307 	and.w	r3, r3, #7
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d001      	beq.n	80069e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	e0b8      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0302 	and.w	r3, r3, #2
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d020      	beq.n	8006a32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0304 	and.w	r3, r3, #4
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d005      	beq.n	8006a08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069fc:	4b59      	ldr	r3, [pc, #356]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a58      	ldr	r2, [pc, #352]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006a06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d005      	beq.n	8006a20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a14:	4b53      	ldr	r3, [pc, #332]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	4a52      	ldr	r2, [pc, #328]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006a1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a20:	4b50      	ldr	r3, [pc, #320]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	494d      	ldr	r1, [pc, #308]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d040      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d107      	bne.n	8006a56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a46:	4b47      	ldr	r3, [pc, #284]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d115      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e07f      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	2b02      	cmp	r3, #2
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5e:	4b41      	ldr	r3, [pc, #260]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d109      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e073      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6e:	4b3d      	ldr	r3, [pc, #244]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 0302 	and.w	r3, r3, #2
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d101      	bne.n	8006a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	e06b      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7e:	4b39      	ldr	r3, [pc, #228]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	f023 0203 	bic.w	r2, r3, #3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	4936      	ldr	r1, [pc, #216]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a90:	f7fc f934 	bl	8002cfc <HAL_GetTick>
 8006a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a96:	e00a      	b.n	8006aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a98:	f7fc f930 	bl	8002cfc <HAL_GetTick>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	1ad3      	subs	r3, r2, r3
 8006aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d901      	bls.n	8006aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aaa:	2303      	movs	r3, #3
 8006aac:	e053      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aae:	4b2d      	ldr	r3, [pc, #180]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	f003 020c 	and.w	r2, r3, #12
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d1eb      	bne.n	8006a98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006ac0:	4b27      	ldr	r3, [pc, #156]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0307 	and.w	r3, r3, #7
 8006ac8:	683a      	ldr	r2, [r7, #0]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d210      	bcs.n	8006af0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ace:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f023 0207 	bic.w	r2, r3, #7
 8006ad6:	4922      	ldr	r1, [pc, #136]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ade:	4b20      	ldr	r3, [pc, #128]	; (8006b60 <HAL_RCC_ClockConfig+0x1c0>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0307 	and.w	r3, r3, #7
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d001      	beq.n	8006af0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e032      	b.n	8006b56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d008      	beq.n	8006b0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006afc:	4b19      	ldr	r3, [pc, #100]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	68db      	ldr	r3, [r3, #12]
 8006b08:	4916      	ldr	r1, [pc, #88]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b0a:	4313      	orrs	r3, r2
 8006b0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f003 0308 	and.w	r3, r3, #8
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d009      	beq.n	8006b2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006b1a:	4b12      	ldr	r3, [pc, #72]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	00db      	lsls	r3, r3, #3
 8006b28:	490e      	ldr	r1, [pc, #56]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006b2e:	f000 f821 	bl	8006b74 <HAL_RCC_GetSysClockFreq>
 8006b32:	4601      	mov	r1, r0
 8006b34:	4b0b      	ldr	r3, [pc, #44]	; (8006b64 <HAL_RCC_ClockConfig+0x1c4>)
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	091b      	lsrs	r3, r3, #4
 8006b3a:	f003 030f 	and.w	r3, r3, #15
 8006b3e:	4a0a      	ldr	r2, [pc, #40]	; (8006b68 <HAL_RCC_ClockConfig+0x1c8>)
 8006b40:	5cd3      	ldrb	r3, [r2, r3]
 8006b42:	fa21 f303 	lsr.w	r3, r1, r3
 8006b46:	4a09      	ldr	r2, [pc, #36]	; (8006b6c <HAL_RCC_ClockConfig+0x1cc>)
 8006b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006b4a:	4b09      	ldr	r3, [pc, #36]	; (8006b70 <HAL_RCC_ClockConfig+0x1d0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fb ff84 	bl	8002a5c <HAL_InitTick>

  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3710      	adds	r7, #16
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40022000 	.word	0x40022000
 8006b64:	40021000 	.word	0x40021000
 8006b68:	0800b334 	.word	0x0800b334
 8006b6c:	20000004 	.word	0x20000004
 8006b70:	20000008 	.word	0x20000008

08006b74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b74:	b490      	push	{r4, r7}
 8006b76:	b08a      	sub	sp, #40	; 0x28
 8006b78:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006b7a:	4b2a      	ldr	r3, [pc, #168]	; (8006c24 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006b7c:	1d3c      	adds	r4, r7, #4
 8006b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006b84:	4b28      	ldr	r3, [pc, #160]	; (8006c28 <HAL_RCC_GetSysClockFreq+0xb4>)
 8006b86:	881b      	ldrh	r3, [r3, #0]
 8006b88:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61fb      	str	r3, [r7, #28]
 8006b8e:	2300      	movs	r3, #0
 8006b90:	61bb      	str	r3, [r7, #24]
 8006b92:	2300      	movs	r3, #0
 8006b94:	627b      	str	r3, [r7, #36]	; 0x24
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006b9e:	4b23      	ldr	r3, [pc, #140]	; (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
 8006baa:	2b04      	cmp	r3, #4
 8006bac:	d002      	beq.n	8006bb4 <HAL_RCC_GetSysClockFreq+0x40>
 8006bae:	2b08      	cmp	r3, #8
 8006bb0:	d003      	beq.n	8006bba <HAL_RCC_GetSysClockFreq+0x46>
 8006bb2:	e02d      	b.n	8006c10 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bb6:	623b      	str	r3, [r7, #32]
      break;
 8006bb8:	e02d      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	0c9b      	lsrs	r3, r3, #18
 8006bbe:	f003 030f 	and.w	r3, r3, #15
 8006bc2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006bcc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d013      	beq.n	8006c00 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006bd8:	4b14      	ldr	r3, [pc, #80]	; (8006c2c <HAL_RCC_GetSysClockFreq+0xb8>)
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	0c5b      	lsrs	r3, r3, #17
 8006bde:	f003 0301 	and.w	r3, r3, #1
 8006be2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006be6:	4413      	add	r3, r2
 8006be8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006bec:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	4a0f      	ldr	r2, [pc, #60]	; (8006c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006bf2:	fb02 f203 	mul.w	r2, r2, r3
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bfc:	627b      	str	r3, [r7, #36]	; 0x24
 8006bfe:	e004      	b.n	8006c0a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	4a0c      	ldr	r2, [pc, #48]	; (8006c34 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006c04:	fb02 f303 	mul.w	r3, r2, r3
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	623b      	str	r3, [r7, #32]
      break;
 8006c0e:	e002      	b.n	8006c16 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006c10:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006c12:	623b      	str	r3, [r7, #32]
      break;
 8006c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006c16:	6a3b      	ldr	r3, [r7, #32]
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3728      	adds	r7, #40	; 0x28
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc90      	pop	{r4, r7}
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	0800b2d4 	.word	0x0800b2d4
 8006c28:	0800b2e4 	.word	0x0800b2e4
 8006c2c:	40021000 	.word	0x40021000
 8006c30:	007a1200 	.word	0x007a1200
 8006c34:	003d0900 	.word	0x003d0900

08006c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006c3c:	4b02      	ldr	r3, [pc, #8]	; (8006c48 <HAL_RCC_GetHCLKFreq+0x10>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	20000004 	.word	0x20000004

08006c4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c50:	f7ff fff2 	bl	8006c38 <HAL_RCC_GetHCLKFreq>
 8006c54:	4601      	mov	r1, r0
 8006c56:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	0a1b      	lsrs	r3, r3, #8
 8006c5c:	f003 0307 	and.w	r3, r3, #7
 8006c60:	4a03      	ldr	r2, [pc, #12]	; (8006c70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c62:	5cd3      	ldrb	r3, [r2, r3]
 8006c64:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	40021000 	.word	0x40021000
 8006c70:	0800b344 	.word	0x0800b344

08006c74 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	220f      	movs	r2, #15
 8006c82:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006c84:	4b11      	ldr	r3, [pc, #68]	; (8006ccc <HAL_RCC_GetClockConfig+0x58>)
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f003 0203 	and.w	r2, r3, #3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006c90:	4b0e      	ldr	r3, [pc, #56]	; (8006ccc <HAL_RCC_GetClockConfig+0x58>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006c9c:	4b0b      	ldr	r3, [pc, #44]	; (8006ccc <HAL_RCC_GetClockConfig+0x58>)
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8006ca8:	4b08      	ldr	r3, [pc, #32]	; (8006ccc <HAL_RCC_GetClockConfig+0x58>)
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	08db      	lsrs	r3, r3, #3
 8006cae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006cb6:	4b06      	ldr	r3, [pc, #24]	; (8006cd0 <HAL_RCC_GetClockConfig+0x5c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f003 0207 	and.w	r2, r3, #7
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8006cc2:	bf00      	nop
 8006cc4:	370c      	adds	r7, #12
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bc80      	pop	{r7}
 8006cca:	4770      	bx	lr
 8006ccc:	40021000 	.word	0x40021000
 8006cd0:	40022000 	.word	0x40022000

08006cd4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b085      	sub	sp, #20
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <RCC_Delay+0x34>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a0a      	ldr	r2, [pc, #40]	; (8006d0c <RCC_Delay+0x38>)
 8006ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ce6:	0a5b      	lsrs	r3, r3, #9
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	fb02 f303 	mul.w	r3, r2, r3
 8006cee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006cf0:	bf00      	nop
  }
  while (Delay --);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	1e5a      	subs	r2, r3, #1
 8006cf6:	60fa      	str	r2, [r7, #12]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1f9      	bne.n	8006cf0 <RCC_Delay+0x1c>
}
 8006cfc:	bf00      	nop
 8006cfe:	3714      	adds	r7, #20
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bc80      	pop	{r7}
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000004 	.word	0x20000004
 8006d0c:	10624dd3 	.word	0x10624dd3

08006d10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e053      	b.n	8006dca <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d2e:	b2db      	uxtb	r3, r3
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d106      	bne.n	8006d42 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f7fb fe43 	bl	80029c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d58:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685a      	ldr	r2, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	431a      	orrs	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	431a      	orrs	r2, r3
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	431a      	orrs	r2, r3
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	69db      	ldr	r3, [r3, #28]
 8006d84:	431a      	orrs	r2, r3
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	ea42 0103 	orr.w	r1, r2, r3
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	699b      	ldr	r3, [r3, #24]
 8006d9e:	0c1a      	lsrs	r2, r3, #16
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f002 0204 	and.w	r2, r2, #4
 8006da8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006db8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006dc8:	2300      	movs	r3, #0
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b088      	sub	sp, #32
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	60f8      	str	r0, [r7, #12]
 8006dda:	60b9      	str	r1, [r7, #8]
 8006ddc:	603b      	str	r3, [r7, #0]
 8006dde:	4613      	mov	r3, r2
 8006de0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006de2:	2300      	movs	r3, #0
 8006de4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d101      	bne.n	8006df4 <HAL_SPI_Transmit+0x22>
 8006df0:	2302      	movs	r3, #2
 8006df2:	e11e      	b.n	8007032 <HAL_SPI_Transmit+0x260>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2201      	movs	r2, #1
 8006df8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006dfc:	f7fb ff7e 	bl	8002cfc <HAL_GetTick>
 8006e00:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006e02:	88fb      	ldrh	r3, [r7, #6]
 8006e04:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d002      	beq.n	8006e18 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006e12:	2302      	movs	r3, #2
 8006e14:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e16:	e103      	b.n	8007020 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d002      	beq.n	8006e24 <HAL_SPI_Transmit+0x52>
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d102      	bne.n	8006e2a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006e24:	2301      	movs	r3, #1
 8006e26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006e28:	e0fa      	b.n	8007020 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2203      	movs	r2, #3
 8006e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2200      	movs	r2, #0
 8006e36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	88fa      	ldrh	r2, [r7, #6]
 8006e42:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	88fa      	ldrh	r2, [r7, #6]
 8006e48:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e70:	d107      	bne.n	8006e82 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8c:	2b40      	cmp	r3, #64	; 0x40
 8006e8e:	d007      	beq.n	8006ea0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ea8:	d14b      	bne.n	8006f42 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_SPI_Transmit+0xe6>
 8006eb2:	8afb      	ldrh	r3, [r7, #22]
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d13e      	bne.n	8006f36 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ebc:	881a      	ldrh	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec8:	1c9a      	adds	r2, r3, #2
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	3b01      	subs	r3, #1
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006edc:	e02b      	b.n	8006f36 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	f003 0302 	and.w	r3, r3, #2
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d112      	bne.n	8006f12 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef0:	881a      	ldrh	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efc:	1c9a      	adds	r2, r3, #2
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f06:	b29b      	uxth	r3, r3
 8006f08:	3b01      	subs	r3, #1
 8006f0a:	b29a      	uxth	r2, r3
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f10:	e011      	b.n	8006f36 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f12:	f7fb fef3 	bl	8002cfc <HAL_GetTick>
 8006f16:	4602      	mov	r2, r0
 8006f18:	69bb      	ldr	r3, [r7, #24]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d803      	bhi.n	8006f2a <HAL_SPI_Transmit+0x158>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f28:	d102      	bne.n	8006f30 <HAL_SPI_Transmit+0x15e>
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d102      	bne.n	8006f36 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f34:	e074      	b.n	8007020 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1ce      	bne.n	8006ede <HAL_SPI_Transmit+0x10c>
 8006f40:	e04c      	b.n	8006fdc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d002      	beq.n	8006f50 <HAL_SPI_Transmit+0x17e>
 8006f4a:	8afb      	ldrh	r3, [r7, #22]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d140      	bne.n	8006fd2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	7812      	ldrb	r2, [r2, #0]
 8006f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f62:	1c5a      	adds	r2, r3, #1
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f6c:	b29b      	uxth	r3, r3
 8006f6e:	3b01      	subs	r3, #1
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f76:	e02c      	b.n	8006fd2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d113      	bne.n	8006fae <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	330c      	adds	r3, #12
 8006f90:	7812      	ldrb	r2, [r2, #0]
 8006f92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f98:	1c5a      	adds	r2, r3, #1
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fa2:	b29b      	uxth	r3, r3
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	b29a      	uxth	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	86da      	strh	r2, [r3, #54]	; 0x36
 8006fac:	e011      	b.n	8006fd2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fae:	f7fb fea5 	bl	8002cfc <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	683a      	ldr	r2, [r7, #0]
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d803      	bhi.n	8006fc6 <HAL_SPI_Transmit+0x1f4>
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d102      	bne.n	8006fcc <HAL_SPI_Transmit+0x1fa>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d102      	bne.n	8006fd2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006fd0:	e026      	b.n	8007020 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1cd      	bne.n	8006f78 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	6839      	ldr	r1, [r7, #0]
 8006fe0:	68f8      	ldr	r0, [r7, #12]
 8006fe2:	f000 fa36 	bl	8007452 <SPI_EndRxTxTransaction>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10a      	bne.n	8007010 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	613b      	str	r3, [r7, #16]
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	613b      	str	r3, [r7, #16]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007014:	2b00      	cmp	r3, #0
 8007016:	d002      	beq.n	800701e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e000      	b.n	8007020 <HAL_SPI_Transmit+0x24e>
  }

error:
 800701e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007030:	7ffb      	ldrb	r3, [r7, #31]
}
 8007032:	4618      	mov	r0, r3
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}

0800703a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800703a:	b580      	push	{r7, lr}
 800703c:	b08c      	sub	sp, #48	; 0x30
 800703e:	af00      	add	r7, sp, #0
 8007040:	60f8      	str	r0, [r7, #12]
 8007042:	60b9      	str	r1, [r7, #8]
 8007044:	607a      	str	r2, [r7, #4]
 8007046:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007048:	2301      	movs	r3, #1
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_SPI_TransmitReceive+0x26>
 800705c:	2302      	movs	r3, #2
 800705e:	e18a      	b.n	8007376 <HAL_SPI_TransmitReceive+0x33c>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007068:	f7fb fe48 	bl	8002cfc <HAL_GetTick>
 800706c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800707e:	887b      	ldrh	r3, [r7, #2]
 8007080:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007082:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007086:	2b01      	cmp	r3, #1
 8007088:	d00f      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x70>
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007090:	d107      	bne.n	80070a2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <HAL_SPI_TransmitReceive+0x68>
 800709a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800709e:	2b04      	cmp	r3, #4
 80070a0:	d003      	beq.n	80070aa <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80070a2:	2302      	movs	r3, #2
 80070a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070a8:	e15b      	b.n	8007362 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80070aa:	68bb      	ldr	r3, [r7, #8]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d005      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x82>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_SPI_TransmitReceive+0x82>
 80070b6:	887b      	ldrh	r3, [r7, #2]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d103      	bne.n	80070c4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070c2:	e14e      	b.n	8007362 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b04      	cmp	r3, #4
 80070ce:	d003      	beq.n	80070d8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2205      	movs	r2, #5
 80070d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	687a      	ldr	r2, [r7, #4]
 80070e2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	887a      	ldrh	r2, [r7, #2]
 80070e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	887a      	ldrh	r2, [r7, #2]
 80070ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	887a      	ldrh	r2, [r7, #2]
 80070fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	887a      	ldrh	r2, [r7, #2]
 8007100:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2200      	movs	r2, #0
 8007106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2200      	movs	r2, #0
 800710c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d007      	beq.n	800712c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800712a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007134:	d178      	bne.n	8007228 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d002      	beq.n	8007144 <HAL_SPI_TransmitReceive+0x10a>
 800713e:	8b7b      	ldrh	r3, [r7, #26]
 8007140:	2b01      	cmp	r3, #1
 8007142:	d166      	bne.n	8007212 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	881a      	ldrh	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	1c9a      	adds	r2, r3, #2
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800715e:	b29b      	uxth	r3, r3
 8007160:	3b01      	subs	r3, #1
 8007162:	b29a      	uxth	r2, r3
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007168:	e053      	b.n	8007212 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	689b      	ldr	r3, [r3, #8]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b02      	cmp	r3, #2
 8007176:	d11b      	bne.n	80071b0 <HAL_SPI_TransmitReceive+0x176>
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800717c:	b29b      	uxth	r3, r3
 800717e:	2b00      	cmp	r3, #0
 8007180:	d016      	beq.n	80071b0 <HAL_SPI_TransmitReceive+0x176>
 8007182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007184:	2b01      	cmp	r3, #1
 8007186:	d113      	bne.n	80071b0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800718c:	881a      	ldrh	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	1c9a      	adds	r2, r3, #2
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a2:	b29b      	uxth	r3, r3
 80071a4:	3b01      	subs	r3, #1
 80071a6:	b29a      	uxth	r2, r3
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d119      	bne.n	80071f2 <HAL_SPI_TransmitReceive+0x1b8>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d014      	beq.n	80071f2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071d2:	b292      	uxth	r2, r2
 80071d4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071da:	1c9a      	adds	r2, r3, #2
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071ee:	2301      	movs	r3, #1
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071f2:	f7fb fd83 	bl	8002cfc <HAL_GetTick>
 80071f6:	4602      	mov	r2, r0
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	1ad3      	subs	r3, r2, r3
 80071fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071fe:	429a      	cmp	r2, r3
 8007200:	d807      	bhi.n	8007212 <HAL_SPI_TransmitReceive+0x1d8>
 8007202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007208:	d003      	beq.n	8007212 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007210:	e0a7      	b.n	8007362 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007216:	b29b      	uxth	r3, r3
 8007218:	2b00      	cmp	r3, #0
 800721a:	d1a6      	bne.n	800716a <HAL_SPI_TransmitReceive+0x130>
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007220:	b29b      	uxth	r3, r3
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1a1      	bne.n	800716a <HAL_SPI_TransmitReceive+0x130>
 8007226:	e07c      	b.n	8007322 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <HAL_SPI_TransmitReceive+0x1fc>
 8007230:	8b7b      	ldrh	r3, [r7, #26]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d16b      	bne.n	800730e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	330c      	adds	r3, #12
 8007240:	7812      	ldrb	r2, [r2, #0]
 8007242:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007248:	1c5a      	adds	r2, r3, #1
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007252:	b29b      	uxth	r3, r3
 8007254:	3b01      	subs	r3, #1
 8007256:	b29a      	uxth	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800725c:	e057      	b.n	800730e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f003 0302 	and.w	r3, r3, #2
 8007268:	2b02      	cmp	r3, #2
 800726a:	d11c      	bne.n	80072a6 <HAL_SPI_TransmitReceive+0x26c>
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d017      	beq.n	80072a6 <HAL_SPI_TransmitReceive+0x26c>
 8007276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007278:	2b01      	cmp	r3, #1
 800727a:	d114      	bne.n	80072a6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	330c      	adds	r3, #12
 8007286:	7812      	ldrb	r2, [r2, #0]
 8007288:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800728e:	1c5a      	adds	r2, r3, #1
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d119      	bne.n	80072e8 <HAL_SPI_TransmitReceive+0x2ae>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d014      	beq.n	80072e8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c8:	b2d2      	uxtb	r2, r2
 80072ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d0:	1c5a      	adds	r2, r3, #1
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072da:	b29b      	uxth	r3, r3
 80072dc:	3b01      	subs	r3, #1
 80072de:	b29a      	uxth	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072e4:	2301      	movs	r3, #1
 80072e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072e8:	f7fb fd08 	bl	8002cfc <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d803      	bhi.n	8007300 <HAL_SPI_TransmitReceive+0x2c6>
 80072f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d102      	bne.n	8007306 <HAL_SPI_TransmitReceive+0x2cc>
 8007300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007302:	2b00      	cmp	r3, #0
 8007304:	d103      	bne.n	800730e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007306:	2303      	movs	r3, #3
 8007308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800730c:	e029      	b.n	8007362 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007312:	b29b      	uxth	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d1a2      	bne.n	800725e <HAL_SPI_TransmitReceive+0x224>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800731c:	b29b      	uxth	r3, r3
 800731e:	2b00      	cmp	r3, #0
 8007320:	d19d      	bne.n	800725e <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007324:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007326:	68f8      	ldr	r0, [r7, #12]
 8007328:	f000 f893 	bl	8007452 <SPI_EndRxTxTransaction>
 800732c:	4603      	mov	r3, r0
 800732e:	2b00      	cmp	r3, #0
 8007330:	d006      	beq.n	8007340 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2220      	movs	r2, #32
 800733c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800733e:	e010      	b.n	8007362 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10b      	bne.n	8007360 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007348:	2300      	movs	r3, #0
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	617b      	str	r3, [r7, #20]
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	e000      	b.n	8007362 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007360:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2201      	movs	r2, #1
 8007366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007372:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007376:	4618      	mov	r0, r3
 8007378:	3730      	adds	r7, #48	; 0x30
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	60f8      	str	r0, [r7, #12]
 8007386:	60b9      	str	r1, [r7, #8]
 8007388:	603b      	str	r3, [r7, #0]
 800738a:	4613      	mov	r3, r2
 800738c:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800738e:	e04c      	b.n	800742a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007396:	d048      	beq.n	800742a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8007398:	f7fb fcb0 	bl	8002cfc <HAL_GetTick>
 800739c:	4602      	mov	r2, r0
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	683a      	ldr	r2, [r7, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d902      	bls.n	80073ae <SPI_WaitFlagStateUntilTimeout+0x30>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d13d      	bne.n	800742a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	685a      	ldr	r2, [r3, #4]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80073bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073c6:	d111      	bne.n	80073ec <SPI_WaitFlagStateUntilTimeout+0x6e>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d0:	d004      	beq.n	80073dc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073da:	d107      	bne.n	80073ec <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073f4:	d10f      	bne.n	8007416 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007404:	601a      	str	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007414:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e00f      	b.n	800744a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	4013      	ands	r3, r2
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	429a      	cmp	r2, r3
 8007438:	bf0c      	ite	eq
 800743a:	2301      	moveq	r3, #1
 800743c:	2300      	movne	r3, #0
 800743e:	b2db      	uxtb	r3, r3
 8007440:	461a      	mov	r2, r3
 8007442:	79fb      	ldrb	r3, [r7, #7]
 8007444:	429a      	cmp	r2, r3
 8007446:	d1a3      	bne.n	8007390 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3710      	adds	r7, #16
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}

08007452 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b086      	sub	sp, #24
 8007456:	af02      	add	r7, sp, #8
 8007458:	60f8      	str	r0, [r7, #12]
 800745a:	60b9      	str	r1, [r7, #8]
 800745c:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	2200      	movs	r2, #0
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f7ff ff88 	bl	800737e <SPI_WaitFlagStateUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d007      	beq.n	8007484 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007478:	f043 0220 	orr.w	r2, r3, #32
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007480:	2303      	movs	r3, #3
 8007482:	e000      	b.n	8007486 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d101      	bne.n	80074a0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e01d      	b.n	80074dc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d106      	bne.n	80074ba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f815 	bl	80074e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2202      	movs	r2, #2
 80074be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f000 f961 	bl	8007794 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074da:	2300      	movs	r3, #0
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3708      	adds	r7, #8
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074ec:	bf00      	nop
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bc80      	pop	{r7}
 80074f4:	4770      	bx	lr

080074f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b085      	sub	sp, #20
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	f042 0201 	orr.w	r2, r2, #1
 800750c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	f003 0307 	and.w	r3, r3, #7
 8007518:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2b06      	cmp	r3, #6
 800751e:	d007      	beq.n	8007530 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f042 0201 	orr.w	r2, r2, #1
 800752e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	bc80      	pop	{r7}
 800753a:	4770      	bx	lr

0800753c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	f003 0302 	and.w	r3, r3, #2
 800754e:	2b02      	cmp	r3, #2
 8007550:	d122      	bne.n	8007598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	f003 0302 	and.w	r3, r3, #2
 800755c:	2b02      	cmp	r3, #2
 800755e:	d11b      	bne.n	8007598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f06f 0202 	mvn.w	r2, #2
 8007568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	f003 0303 	and.w	r3, r3, #3
 800757a:	2b00      	cmp	r3, #0
 800757c:	d003      	beq.n	8007586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f8ed 	bl	800775e <HAL_TIM_IC_CaptureCallback>
 8007584:	e005      	b.n	8007592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f8e0 	bl	800774c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f8ef 	bl	8007770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	691b      	ldr	r3, [r3, #16]
 800759e:	f003 0304 	and.w	r3, r3, #4
 80075a2:	2b04      	cmp	r3, #4
 80075a4:	d122      	bne.n	80075ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b04      	cmp	r3, #4
 80075b2:	d11b      	bne.n	80075ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f06f 0204 	mvn.w	r2, #4
 80075bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2202      	movs	r2, #2
 80075c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d003      	beq.n	80075da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075d2:	6878      	ldr	r0, [r7, #4]
 80075d4:	f000 f8c3 	bl	800775e <HAL_TIM_IC_CaptureCallback>
 80075d8:	e005      	b.n	80075e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f8b6 	bl	800774c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f8c5 	bl	8007770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2200      	movs	r2, #0
 80075ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	691b      	ldr	r3, [r3, #16]
 80075f2:	f003 0308 	and.w	r3, r3, #8
 80075f6:	2b08      	cmp	r3, #8
 80075f8:	d122      	bne.n	8007640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b08      	cmp	r3, #8
 8007606:	d11b      	bne.n	8007640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f06f 0208 	mvn.w	r2, #8
 8007610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2204      	movs	r2, #4
 8007616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	f003 0303 	and.w	r3, r3, #3
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f000 f899 	bl	800775e <HAL_TIM_IC_CaptureCallback>
 800762c:	e005      	b.n	800763a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f000 f88c 	bl	800774c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 f89b 	bl	8007770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b10      	cmp	r3, #16
 800764c:	d122      	bne.n	8007694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b10      	cmp	r3, #16
 800765a:	d11b      	bne.n	8007694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0210 	mvn.w	r2, #16
 8007664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2208      	movs	r2, #8
 800766a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	69db      	ldr	r3, [r3, #28]
 8007672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f86f 	bl	800775e <HAL_TIM_IC_CaptureCallback>
 8007680:	e005      	b.n	800768e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f862 	bl	800774c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f871 	bl	8007770 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0301 	and.w	r3, r3, #1
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d10e      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0301 	and.w	r3, r3, #1
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d107      	bne.n	80076c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0201 	mvn.w	r2, #1
 80076b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fa fdc2 	bl	8002244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ca:	2b80      	cmp	r3, #128	; 0x80
 80076cc:	d10e      	bne.n	80076ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	68db      	ldr	r3, [r3, #12]
 80076d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076d8:	2b80      	cmp	r3, #128	; 0x80
 80076da:	d107      	bne.n	80076ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f000 f8bf 	bl	800786a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076f6:	2b40      	cmp	r3, #64	; 0x40
 80076f8:	d10e      	bne.n	8007718 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007704:	2b40      	cmp	r3, #64	; 0x40
 8007706:	d107      	bne.n	8007718 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007710:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f835 	bl	8007782 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	f003 0320 	and.w	r3, r3, #32
 8007722:	2b20      	cmp	r3, #32
 8007724:	d10e      	bne.n	8007744 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	68db      	ldr	r3, [r3, #12]
 800772c:	f003 0320 	and.w	r3, r3, #32
 8007730:	2b20      	cmp	r3, #32
 8007732:	d107      	bne.n	8007744 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f06f 0220 	mvn.w	r2, #32
 800773c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 f88a 	bl	8007858 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007744:	bf00      	nop
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	bc80      	pop	{r7}
 800775c:	4770      	bx	lr

0800775e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800775e:	b480      	push	{r7}
 8007760:	b083      	sub	sp, #12
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	bc80      	pop	{r7}
 800776e:	4770      	bx	lr

08007770 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	bc80      	pop	{r7}
 8007780:	4770      	bx	lr

08007782 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	bc80      	pop	{r7}
 8007792:	4770      	bx	lr

08007794 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	4a29      	ldr	r2, [pc, #164]	; (800784c <TIM_Base_SetConfig+0xb8>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00b      	beq.n	80077c4 <TIM_Base_SetConfig+0x30>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077b2:	d007      	beq.n	80077c4 <TIM_Base_SetConfig+0x30>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4a26      	ldr	r2, [pc, #152]	; (8007850 <TIM_Base_SetConfig+0xbc>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d003      	beq.n	80077c4 <TIM_Base_SetConfig+0x30>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4a25      	ldr	r2, [pc, #148]	; (8007854 <TIM_Base_SetConfig+0xc0>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d108      	bne.n	80077d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	68fa      	ldr	r2, [r7, #12]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a1c      	ldr	r2, [pc, #112]	; (800784c <TIM_Base_SetConfig+0xb8>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00b      	beq.n	80077f6 <TIM_Base_SetConfig+0x62>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e4:	d007      	beq.n	80077f6 <TIM_Base_SetConfig+0x62>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a19      	ldr	r2, [pc, #100]	; (8007850 <TIM_Base_SetConfig+0xbc>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d003      	beq.n	80077f6 <TIM_Base_SetConfig+0x62>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	4a18      	ldr	r2, [pc, #96]	; (8007854 <TIM_Base_SetConfig+0xc0>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d108      	bne.n	8007808 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	4313      	orrs	r3, r2
 8007806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	695b      	ldr	r3, [r3, #20]
 8007812:	4313      	orrs	r3, r2
 8007814:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	689a      	ldr	r2, [r3, #8]
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	4a07      	ldr	r2, [pc, #28]	; (800784c <TIM_Base_SetConfig+0xb8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d103      	bne.n	800783c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	691a      	ldr	r2, [r3, #16]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	615a      	str	r2, [r3, #20]
}
 8007842:	bf00      	nop
 8007844:	3714      	adds	r7, #20
 8007846:	46bd      	mov	sp, r7
 8007848:	bc80      	pop	{r7}
 800784a:	4770      	bx	lr
 800784c:	40012c00 	.word	0x40012c00
 8007850:	40000400 	.word	0x40000400
 8007854:	40000800 	.word	0x40000800

08007858 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	bc80      	pop	{r7}
 8007868:	4770      	bx	lr

0800786a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800786a:	b480      	push	{r7}
 800786c:	b083      	sub	sp, #12
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007872:	bf00      	nop
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	bc80      	pop	{r7}
 800787a:	4770      	bx	lr

0800787c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	4603      	mov	r3, r0
 8007884:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800788a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800788e:	2b84      	cmp	r3, #132	; 0x84
 8007890:	d005      	beq.n	800789e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007892:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4413      	add	r3, r2
 800789a:	3303      	adds	r3, #3
 800789c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800789e:	68fb      	ldr	r3, [r7, #12]
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3714      	adds	r7, #20
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bc80      	pop	{r7}
 80078a8:	4770      	bx	lr

080078aa <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80078aa:	b480      	push	{r7}
 80078ac:	b083      	sub	sp, #12
 80078ae:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078b0:	f3ef 8305 	mrs	r3, IPSR
 80078b4:	607b      	str	r3, [r7, #4]
  return(result);
 80078b6:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	bf14      	ite	ne
 80078bc:	2301      	movne	r3, #1
 80078be:	2300      	moveq	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bc80      	pop	{r7}
 80078ca:	4770      	bx	lr

080078cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80078d0:	f001 fb14 	bl	8008efc <vTaskStartScheduler>
  
  return osOK;
 80078d4:	2300      	movs	r3, #0
}
 80078d6:	4618      	mov	r0, r3
 80078d8:	bd80      	pop	{r7, pc}

080078da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80078da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078dc:	b089      	sub	sp, #36	; 0x24
 80078de:	af04      	add	r7, sp, #16
 80078e0:	6078      	str	r0, [r7, #4]
 80078e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d020      	beq.n	800792e <osThreadCreate+0x54>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	699b      	ldr	r3, [r3, #24]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d01c      	beq.n	800792e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685c      	ldr	r4, [r3, #4]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681d      	ldr	r5, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	691e      	ldr	r6, [r3, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007906:	4618      	mov	r0, r3
 8007908:	f7ff ffb8 	bl	800787c <makeFreeRtosPriority>
 800790c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	695b      	ldr	r3, [r3, #20]
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007916:	9202      	str	r2, [sp, #8]
 8007918:	9301      	str	r3, [sp, #4]
 800791a:	9100      	str	r1, [sp, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	4632      	mov	r2, r6
 8007920:	4629      	mov	r1, r5
 8007922:	4620      	mov	r0, r4
 8007924:	f001 f8b6 	bl	8008a94 <xTaskCreateStatic>
 8007928:	4603      	mov	r3, r0
 800792a:	60fb      	str	r3, [r7, #12]
 800792c:	e01c      	b.n	8007968 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685c      	ldr	r4, [r3, #4]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800793a:	b29e      	uxth	r6, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007942:	4618      	mov	r0, r3
 8007944:	f7ff ff9a 	bl	800787c <makeFreeRtosPriority>
 8007948:	4602      	mov	r2, r0
 800794a:	f107 030c 	add.w	r3, r7, #12
 800794e:	9301      	str	r3, [sp, #4]
 8007950:	9200      	str	r2, [sp, #0]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	4632      	mov	r2, r6
 8007956:	4629      	mov	r1, r5
 8007958:	4620      	mov	r0, r4
 800795a:	f001 f8f4 	bl	8008b46 <xTaskCreate>
 800795e:	4603      	mov	r3, r0
 8007960:	2b01      	cmp	r3, #1
 8007962:	d001      	beq.n	8007968 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007964:	2300      	movs	r3, #0
 8007966:	e000      	b.n	800796a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007968:	68fb      	ldr	r3, [r7, #12]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3714      	adds	r7, #20
 800796e:	46bd      	mov	sp, r7
 8007970:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08007974 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b086      	sub	sp, #24
 8007978:	af02      	add	r7, sp, #8
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	460b      	mov	r3, r1
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d013      	beq.n	80079b2 <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 800798a:	7afb      	ldrb	r3, [r7, #11]
 800798c:	2b01      	cmp	r3, #1
 800798e:	d101      	bne.n	8007994 <osTimerCreate+0x20>
 8007990:	2101      	movs	r1, #1
 8007992:	e000      	b.n	8007996 <osTimerCreate+0x22>
 8007994:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800799e:	9201      	str	r2, [sp, #4]
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	460a      	mov	r2, r1
 80079a6:	2101      	movs	r1, #1
 80079a8:	480b      	ldr	r0, [pc, #44]	; (80079d8 <osTimerCreate+0x64>)
 80079aa:	f002 f862 	bl	8009a72 <xTimerCreateStatic>
 80079ae:	4603      	mov	r3, r0
 80079b0:	e00e      	b.n	80079d0 <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 80079b2:	7afb      	ldrb	r3, [r7, #11]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d101      	bne.n	80079bc <osTimerCreate+0x48>
 80079b8:	2201      	movs	r2, #1
 80079ba:	e000      	b.n	80079be <osTimerCreate+0x4a>
 80079bc:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80079c2:	9300      	str	r3, [sp, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2101      	movs	r1, #1
 80079c8:	4803      	ldr	r0, [pc, #12]	; (80079d8 <osTimerCreate+0x64>)
 80079ca:	f002 f831 	bl	8009a30 <xTimerCreate>
 80079ce:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80079d0:	4618      	mov	r0, r3
 80079d2:	3710      	adds	r7, #16
 80079d4:	46bd      	mov	sp, r7
 80079d6:	bd80      	pop	{r7, pc}
 80079d8:	0800b2e8 	.word	0x0800b2e8

080079dc <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b088      	sub	sp, #32
 80079e0:	af02      	add	r7, sp, #8
 80079e2:	6078      	str	r0, [r7, #4]
 80079e4:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80079e6:	2300      	movs	r3, #0
 80079e8:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <osTimerStart+0x20>
    ticks = 1;
 80079f8:	2301      	movs	r3, #1
 80079fa:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80079fc:	f7ff ff55 	bl	80078aa <inHandlerMode>
 8007a00:	4603      	mov	r3, r0
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01b      	beq.n	8007a3e <osTimerStart+0x62>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8007a06:	f107 020c 	add.w	r2, r7, #12
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	9300      	str	r3, [sp, #0]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	2109      	movs	r1, #9
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f002 f899 	bl	8009b4c <xTimerGenericCommand>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d002      	beq.n	8007a26 <osTimerStart+0x4a>
    {
      result = osErrorOS;
 8007a20:	23ff      	movs	r3, #255	; 0xff
 8007a22:	617b      	str	r3, [r7, #20]
 8007a24:	e018      	b.n	8007a58 <osTimerStart+0x7c>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d015      	beq.n	8007a58 <osTimerStart+0x7c>
 8007a2c:	4b0d      	ldr	r3, [pc, #52]	; (8007a64 <osTimerStart+0x88>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	e00c      	b.n	8007a58 <osTimerStart+0x7c>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	2300      	movs	r3, #0
 8007a44:	693a      	ldr	r2, [r7, #16]
 8007a46:	2104      	movs	r1, #4
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f002 f87f 	bl	8009b4c <xTimerGenericCommand>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d001      	beq.n	8007a58 <osTimerStart+0x7c>
      result = osErrorOS;
 8007a54:	23ff      	movs	r3, #255	; 0xff
 8007a56:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8007a58:	697b      	ldr	r3, [r7, #20]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3718      	adds	r7, #24
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	e000ed04 	.word	0xe000ed04

08007a68 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b086      	sub	sp, #24
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	3303      	adds	r3, #3
 8007a76:	f023 0303 	bic.w	r3, r3, #3
 8007a7a:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 8007a7c:	2014      	movs	r0, #20
 8007a7e:	f002 fcf1 	bl	800a464 <pvPortMalloc>
 8007a82:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d046      	beq.n	8007b18 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f002 fcde 	bl	800a464 <pvPortMalloc>
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d02b      	beq.n	8007b0e <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	fb02 f303 	mul.w	r3, r2, r3
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	f002 fccf 	bl	800a464 <pvPortMalloc>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 8007acc:	697b      	ldr	r3, [r7, #20]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d011      	beq.n	8007af8 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	613b      	str	r3, [r7, #16]
 8007ad8:	e008      	b.n	8007aec <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	4413      	add	r3, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	613b      	str	r3, [r7, #16]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d3f1      	bcc.n	8007ada <osPoolCreate+0x72>
 8007af6:	e00f      	b.n	8007b18 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 8007af8:	697b      	ldr	r3, [r7, #20]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	4618      	mov	r0, r3
 8007afe:	f002 fd73 	bl	800a5e8 <vPortFree>
        vPortFree(thePool);
 8007b02:	6978      	ldr	r0, [r7, #20]
 8007b04:	f002 fd70 	bl	800a5e8 <vPortFree>
        thePool = NULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	617b      	str	r3, [r7, #20]
 8007b0c:	e004      	b.n	8007b18 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 8007b0e:	6978      	ldr	r0, [r7, #20]
 8007b10:	f002 fd6a 	bl	800a5e8 <vPortFree>
      thePool = NULL;
 8007b14:	2300      	movs	r3, #0
 8007b16:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 8007b18:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}

08007b22 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b08a      	sub	sp, #40	; 0x28
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 8007b2e:	2300      	movs	r3, #0
 8007b30:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 8007b32:	f7ff feba 	bl	80078aa <inHandlerMode>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d00e      	beq.n	8007b5a <osPoolAlloc+0x38>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007b3c:	f3ef 8211 	mrs	r2, BASEPRI
 8007b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b44:	f383 8811 	msr	BASEPRI, r3
 8007b48:	f3bf 8f6f 	isb	sy
 8007b4c:	f3bf 8f4f 	dsb	sy
 8007b50:	617a      	str	r2, [r7, #20]
 8007b52:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007b54:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
 8007b58:	e001      	b.n	8007b5e <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 8007b5a:	f002 fb8d 	bl	800a278 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007b5e:	2300      	movs	r3, #0
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	e029      	b.n	8007bb8 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	6892      	ldr	r2, [r2, #8]
 8007b70:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b74:	fb02 f201 	mul.w	r2, r2, r1
 8007b78:	1a9b      	subs	r3, r3, r2
 8007b7a:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	4413      	add	r3, r2
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d113      	bne.n	8007bb2 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685a      	ldr	r2, [r3, #4]
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	4413      	add	r3, r2
 8007b92:	2201      	movs	r2, #1
 8007b94:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	fb02 f303 	mul.w	r3, r2, r3
 8007ba6:	440b      	add	r3, r1
 8007ba8:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	611a      	str	r2, [r3, #16]
      break;
 8007bb0:	e007      	b.n	8007bc2 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 8007bb2:	69fb      	ldr	r3, [r7, #28]
 8007bb4:	3301      	adds	r3, #1
 8007bb6:	61fb      	str	r3, [r7, #28]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	69fa      	ldr	r2, [r7, #28]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d3d0      	bcc.n	8007b64 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 8007bc2:	f7ff fe72 	bl	80078aa <inHandlerMode>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 8007bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bce:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	e001      	b.n	8007bdc <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 8007bd8:	f002 fb7c 	bl	800a2d4 <vPortExitCritical>
  }
  
  return p;
 8007bdc:	6a3b      	ldr	r3, [r7, #32]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3728      	adds	r7, #40	; 0x28
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 8007be6:	b480      	push	{r7}
 8007be8:	b085      	sub	sp, #20
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d101      	bne.n	8007bfa <osPoolFree+0x14>
    return osErrorParameter;
 8007bf6:	2380      	movs	r3, #128	; 0x80
 8007bf8:	e030      	b.n	8007c5c <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d101      	bne.n	8007c04 <osPoolFree+0x1e>
    return osErrorParameter;
 8007c00:	2380      	movs	r3, #128	; 0x80
 8007c02:	e02b      	b.n	8007c5c <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d201      	bcs.n	8007c12 <osPoolFree+0x2c>
    return osErrorParameter;
 8007c0e:	2380      	movs	r3, #128	; 0x80
 8007c10:	e024      	b.n	8007c5c <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	6812      	ldr	r2, [r2, #0]
 8007c18:	1a9b      	subs	r3, r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	68da      	ldr	r2, [r3, #12]
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c26:	fb02 f201 	mul.w	r2, r2, r1
 8007c2a:	1a9b      	subs	r3, r3, r2
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <osPoolFree+0x4e>
    return osErrorParameter;
 8007c30:	2380      	movs	r3, #128	; 0x80
 8007c32:	e013      	b.n	8007c5c <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3e:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d301      	bcc.n	8007c4e <osPoolFree+0x68>
    return osErrorParameter;
 8007c4a:	2380      	movs	r3, #128	; 0x80
 8007c4c:	e006      	b.n	8007c5c <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685a      	ldr	r2, [r3, #4]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	4413      	add	r3, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 8007c5a:	2300      	movs	r3, #0
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3714      	adds	r7, #20
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr

08007c66 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8007c66:	b590      	push	{r4, r7, lr}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af02      	add	r7, sp, #8
 8007c6c:	6078      	str	r0, [r7, #4]
 8007c6e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d012      	beq.n	8007c9e <osMessageCreate+0x38>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	68db      	ldr	r3, [r3, #12]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00e      	beq.n	8007c9e <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6818      	ldr	r0, [r3, #0]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6859      	ldr	r1, [r3, #4]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68dc      	ldr	r4, [r3, #12]
 8007c90:	2300      	movs	r3, #0
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	4623      	mov	r3, r4
 8007c96:	f000 f9db 	bl	8008050 <xQueueGenericCreateStatic>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	e008      	b.n	8007cb0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	4619      	mov	r1, r3
 8007caa:	f000 fa43 	bl	8008134 <xQueueGenericCreate>
 8007cae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd90      	pop	{r4, r7, pc}

08007cb8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <osMessagePut+0x1e>
    ticks = 1;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8007cd6:	f7ff fde8 	bl	80078aa <inHandlerMode>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d018      	beq.n	8007d12 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8007ce0:	f107 0210 	add.w	r2, r7, #16
 8007ce4:	f107 0108 	add.w	r1, r7, #8
 8007ce8:	2300      	movs	r3, #0
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 fb78 	bl	80083e0 <xQueueGenericSendFromISR>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d001      	beq.n	8007cfa <osMessagePut+0x42>
      return osErrorOS;
 8007cf6:	23ff      	movs	r3, #255	; 0xff
 8007cf8:	e018      	b.n	8007d2c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d014      	beq.n	8007d2a <osMessagePut+0x72>
 8007d00:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <osMessagePut+0x7c>)
 8007d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d06:	601a      	str	r2, [r3, #0]
 8007d08:	f3bf 8f4f 	dsb	sy
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	e00b      	b.n	8007d2a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8007d12:	f107 0108 	add.w	r1, r7, #8
 8007d16:	2300      	movs	r3, #0
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 fa66 	bl	80081ec <xQueueGenericSend>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b01      	cmp	r3, #1
 8007d24:	d001      	beq.n	8007d2a <osMessagePut+0x72>
      return osErrorOS;
 8007d26:	23ff      	movs	r3, #255	; 0xff
 8007d28:	e000      	b.n	8007d2c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8007d2a:	2300      	movs	r3, #0
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3718      	adds	r7, #24
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}
 8007d34:	e000ed04 	.word	0xe000ed04

08007d38 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8007d38:	b590      	push	{r4, r7, lr}
 8007d3a:	b08b      	sub	sp, #44	; 0x2c
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10a      	bne.n	8007d68 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8007d52:	2380      	movs	r3, #128	; 0x80
 8007d54:	617b      	str	r3, [r7, #20]
    return event;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	461c      	mov	r4, r3
 8007d5a:	f107 0314 	add.w	r3, r7, #20
 8007d5e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007d62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007d66:	e054      	b.n	8007e12 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d103      	bne.n	8007d80 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8007d78:	f04f 33ff 	mov.w	r3, #4294967295
 8007d7c:	627b      	str	r3, [r7, #36]	; 0x24
 8007d7e:	e009      	b.n	8007d94 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d006      	beq.n	8007d94 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8007d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d101      	bne.n	8007d94 <osMessageGet+0x5c>
      ticks = 1;
 8007d90:	2301      	movs	r3, #1
 8007d92:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8007d94:	f7ff fd89 	bl	80078aa <inHandlerMode>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d01c      	beq.n	8007dd8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8007d9e:	f107 0220 	add.w	r2, r7, #32
 8007da2:	f107 0314 	add.w	r3, r7, #20
 8007da6:	3304      	adds	r3, #4
 8007da8:	4619      	mov	r1, r3
 8007daa:	68b8      	ldr	r0, [r7, #8]
 8007dac:	f000 fc88 	bl	80086c0 <xQueueReceiveFromISR>
 8007db0:	4603      	mov	r3, r0
 8007db2:	2b01      	cmp	r3, #1
 8007db4:	d102      	bne.n	8007dbc <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8007db6:	2310      	movs	r3, #16
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	e001      	b.n	8007dc0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8007dc0:	6a3b      	ldr	r3, [r7, #32]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d01d      	beq.n	8007e02 <osMessageGet+0xca>
 8007dc6:	4b15      	ldr	r3, [pc, #84]	; (8007e1c <osMessageGet+0xe4>)
 8007dc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dcc:	601a      	str	r2, [r3, #0]
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	e014      	b.n	8007e02 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8007dd8:	f107 0314 	add.w	r3, r7, #20
 8007ddc:	3304      	adds	r3, #4
 8007dde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007de0:	4619      	mov	r1, r3
 8007de2:	68b8      	ldr	r0, [r7, #8]
 8007de4:	f000 fb90 	bl	8008508 <xQueueReceive>
 8007de8:	4603      	mov	r3, r0
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d102      	bne.n	8007df4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8007dee:	2310      	movs	r3, #16
 8007df0:	617b      	str	r3, [r7, #20]
 8007df2:	e006      	b.n	8007e02 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <osMessageGet+0xc6>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	e000      	b.n	8007e00 <osMessageGet+0xc8>
 8007dfe:	2340      	movs	r3, #64	; 0x40
 8007e00:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	461c      	mov	r4, r3
 8007e06:	f107 0314 	add.w	r3, r7, #20
 8007e0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	372c      	adds	r7, #44	; 0x2c
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd90      	pop	{r4, r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	e000ed04 	.word	0xe000ed04

08007e20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f103 0208 	add.w	r2, r3, #8
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f04f 32ff 	mov.w	r2, #4294967295
 8007e38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f103 0208 	add.w	r2, r3, #8
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f103 0208 	add.w	r2, r3, #8
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bc80      	pop	{r7}
 8007e5c:	4770      	bx	lr

08007e5e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e5e:	b480      	push	{r7}
 8007e60:	b083      	sub	sp, #12
 8007e62:	af00      	add	r7, sp, #0
 8007e64:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bc80      	pop	{r7}
 8007e74:	4770      	bx	lr

08007e76 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e76:	b480      	push	{r7}
 8007e78:	b085      	sub	sp, #20
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	689a      	ldr	r2, [r3, #8]
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	683a      	ldr	r2, [r7, #0]
 8007e9a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	683a      	ldr	r2, [r7, #0]
 8007ea0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	601a      	str	r2, [r3, #0]
}
 8007eb2:	bf00      	nop
 8007eb4:	3714      	adds	r7, #20
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr

08007ebc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed2:	d103      	bne.n	8007edc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	691b      	ldr	r3, [r3, #16]
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	e00c      	b.n	8007ef6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	3308      	adds	r3, #8
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	e002      	b.n	8007eea <vListInsert+0x2e>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	60fb      	str	r3, [r7, #12]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68ba      	ldr	r2, [r7, #8]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d2f6      	bcs.n	8007ee4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	1c5a      	adds	r2, r3, #1
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	601a      	str	r2, [r3, #0]
}
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bc80      	pop	{r7}
 8007f2a:	4770      	bx	lr

08007f2c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b085      	sub	sp, #20
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	691b      	ldr	r3, [r3, #16]
 8007f38:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6892      	ldr	r2, [r2, #8]
 8007f42:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6852      	ldr	r2, [r2, #4]
 8007f4c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	687a      	ldr	r2, [r7, #4]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d103      	bne.n	8007f60 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2200      	movs	r2, #0
 8007f64:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	1e5a      	subs	r2, r3, #1
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3714      	adds	r7, #20
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bc80      	pop	{r7}
 8007f7c:	4770      	bx	lr
	...

08007f80 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d109      	bne.n	8007fa8 <xQueueGenericReset+0x28>
	__asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	e7fe      	b.n	8007fa6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8007fa8:	f002 f966 	bl	800a278 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb4:	68f9      	ldr	r1, [r7, #12]
 8007fb6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fb8:	fb01 f303 	mul.w	r3, r1, r3
 8007fbc:	441a      	add	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fd8:	3b01      	subs	r3, #1
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007fde:	fb01 f303 	mul.w	r3, r1, r3
 8007fe2:	441a      	add	r2, r3
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	22ff      	movs	r2, #255	; 0xff
 8007fec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	22ff      	movs	r2, #255	; 0xff
 8007ff4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d114      	bne.n	8008028 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	691b      	ldr	r3, [r3, #16]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d01a      	beq.n	800803c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3310      	adds	r3, #16
 800800a:	4618      	mov	r0, r3
 800800c:	f001 fa06 	bl	800941c <xTaskRemoveFromEventList>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	d012      	beq.n	800803c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008016:	4b0d      	ldr	r3, [pc, #52]	; (800804c <xQueueGenericReset+0xcc>)
 8008018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	f3bf 8f4f 	dsb	sy
 8008022:	f3bf 8f6f 	isb	sy
 8008026:	e009      	b.n	800803c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	3310      	adds	r3, #16
 800802c:	4618      	mov	r0, r3
 800802e:	f7ff fef7 	bl	8007e20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	3324      	adds	r3, #36	; 0x24
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff fef2 	bl	8007e20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800803c:	f002 f94a 	bl	800a2d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008040:	2301      	movs	r3, #1
}
 8008042:	4618      	mov	r0, r3
 8008044:	3710      	adds	r7, #16
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	e000ed04 	.word	0xe000ed04

08008050 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008050:	b580      	push	{r7, lr}
 8008052:	b08e      	sub	sp, #56	; 0x38
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
 800805c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d109      	bne.n	8008078 <xQueueGenericCreateStatic+0x28>
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	f383 8811 	msr	BASEPRI, r3
 800806c:	f3bf 8f6f 	isb	sy
 8008070:	f3bf 8f4f 	dsb	sy
 8008074:	62bb      	str	r3, [r7, #40]	; 0x28
 8008076:	e7fe      	b.n	8008076 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d109      	bne.n	8008092 <xQueueGenericCreateStatic+0x42>
 800807e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	627b      	str	r3, [r7, #36]	; 0x24
 8008090:	e7fe      	b.n	8008090 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d002      	beq.n	800809e <xQueueGenericCreateStatic+0x4e>
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <xQueueGenericCreateStatic+0x52>
 800809e:	2301      	movs	r3, #1
 80080a0:	e000      	b.n	80080a4 <xQueueGenericCreateStatic+0x54>
 80080a2:	2300      	movs	r3, #0
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d109      	bne.n	80080bc <xQueueGenericCreateStatic+0x6c>
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	623b      	str	r3, [r7, #32]
 80080ba:	e7fe      	b.n	80080ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d102      	bne.n	80080c8 <xQueueGenericCreateStatic+0x78>
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d101      	bne.n	80080cc <xQueueGenericCreateStatic+0x7c>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <xQueueGenericCreateStatic+0x7e>
 80080cc:	2300      	movs	r3, #0
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d109      	bne.n	80080e6 <xQueueGenericCreateStatic+0x96>
 80080d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d6:	f383 8811 	msr	BASEPRI, r3
 80080da:	f3bf 8f6f 	isb	sy
 80080de:	f3bf 8f4f 	dsb	sy
 80080e2:	61fb      	str	r3, [r7, #28]
 80080e4:	e7fe      	b.n	80080e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80080e6:	2348      	movs	r3, #72	; 0x48
 80080e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b48      	cmp	r3, #72	; 0x48
 80080ee:	d009      	beq.n	8008104 <xQueueGenericCreateStatic+0xb4>
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	e7fe      	b.n	8008102 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d00d      	beq.n	800812a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800810e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008116:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800811a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800811c:	9300      	str	r3, [sp, #0]
 800811e:	4613      	mov	r3, r2
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	68b9      	ldr	r1, [r7, #8]
 8008124:	68f8      	ldr	r0, [r7, #12]
 8008126:	f000 f842 	bl	80081ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800812c:	4618      	mov	r0, r3
 800812e:	3730      	adds	r7, #48	; 0x30
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b08a      	sub	sp, #40	; 0x28
 8008138:	af02      	add	r7, sp, #8
 800813a:	60f8      	str	r0, [r7, #12]
 800813c:	60b9      	str	r1, [r7, #8]
 800813e:	4613      	mov	r3, r2
 8008140:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d109      	bne.n	800815c <xQueueGenericCreate+0x28>
 8008148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	e7fe      	b.n	800815a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d102      	bne.n	8008168 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008162:	2300      	movs	r3, #0
 8008164:	61fb      	str	r3, [r7, #28]
 8008166:	e004      	b.n	8008172 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	68ba      	ldr	r2, [r7, #8]
 800816c:	fb02 f303 	mul.w	r3, r2, r3
 8008170:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	3348      	adds	r3, #72	; 0x48
 8008176:	4618      	mov	r0, r3
 8008178:	f002 f974 	bl	800a464 <pvPortMalloc>
 800817c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800817e:	69bb      	ldr	r3, [r7, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00f      	beq.n	80081a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	3348      	adds	r3, #72	; 0x48
 8008188:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800818a:	69bb      	ldr	r3, [r7, #24]
 800818c:	2200      	movs	r2, #0
 800818e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008192:	79fa      	ldrb	r2, [r7, #7]
 8008194:	69bb      	ldr	r3, [r7, #24]
 8008196:	9300      	str	r3, [sp, #0]
 8008198:	4613      	mov	r3, r2
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	68b9      	ldr	r1, [r7, #8]
 800819e:	68f8      	ldr	r0, [r7, #12]
 80081a0:	f000 f805 	bl	80081ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80081a4:	69bb      	ldr	r3, [r7, #24]
	}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3720      	adds	r7, #32
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}

080081ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80081ae:	b580      	push	{r7, lr}
 80081b0:	b084      	sub	sp, #16
 80081b2:	af00      	add	r7, sp, #0
 80081b4:	60f8      	str	r0, [r7, #12]
 80081b6:	60b9      	str	r1, [r7, #8]
 80081b8:	607a      	str	r2, [r7, #4]
 80081ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d103      	bne.n	80081ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80081c2:	69bb      	ldr	r3, [r7, #24]
 80081c4:	69ba      	ldr	r2, [r7, #24]
 80081c6:	601a      	str	r2, [r3, #0]
 80081c8:	e002      	b.n	80081d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80081ca:	69bb      	ldr	r3, [r7, #24]
 80081cc:	687a      	ldr	r2, [r7, #4]
 80081ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80081d0:	69bb      	ldr	r3, [r7, #24]
 80081d2:	68fa      	ldr	r2, [r7, #12]
 80081d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80081d6:	69bb      	ldr	r3, [r7, #24]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80081dc:	2101      	movs	r1, #1
 80081de:	69b8      	ldr	r0, [r7, #24]
 80081e0:	f7ff fece 	bl	8007f80 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80081e4:	bf00      	nop
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08e      	sub	sp, #56	; 0x38
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	607a      	str	r2, [r7, #4]
 80081f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80081fa:	2300      	movs	r3, #0
 80081fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008204:	2b00      	cmp	r3, #0
 8008206:	d109      	bne.n	800821c <xQueueGenericSend+0x30>
 8008208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820c:	f383 8811 	msr	BASEPRI, r3
 8008210:	f3bf 8f6f 	isb	sy
 8008214:	f3bf 8f4f 	dsb	sy
 8008218:	62bb      	str	r3, [r7, #40]	; 0x28
 800821a:	e7fe      	b.n	800821a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d103      	bne.n	800822a <xQueueGenericSend+0x3e>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008226:	2b00      	cmp	r3, #0
 8008228:	d101      	bne.n	800822e <xQueueGenericSend+0x42>
 800822a:	2301      	movs	r3, #1
 800822c:	e000      	b.n	8008230 <xQueueGenericSend+0x44>
 800822e:	2300      	movs	r3, #0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d109      	bne.n	8008248 <xQueueGenericSend+0x5c>
 8008234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008238:	f383 8811 	msr	BASEPRI, r3
 800823c:	f3bf 8f6f 	isb	sy
 8008240:	f3bf 8f4f 	dsb	sy
 8008244:	627b      	str	r3, [r7, #36]	; 0x24
 8008246:	e7fe      	b.n	8008246 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d103      	bne.n	8008256 <xQueueGenericSend+0x6a>
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008252:	2b01      	cmp	r3, #1
 8008254:	d101      	bne.n	800825a <xQueueGenericSend+0x6e>
 8008256:	2301      	movs	r3, #1
 8008258:	e000      	b.n	800825c <xQueueGenericSend+0x70>
 800825a:	2300      	movs	r3, #0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d109      	bne.n	8008274 <xQueueGenericSend+0x88>
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	623b      	str	r3, [r7, #32]
 8008272:	e7fe      	b.n	8008272 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008274:	f001 fa8c 	bl	8009790 <xTaskGetSchedulerState>
 8008278:	4603      	mov	r3, r0
 800827a:	2b00      	cmp	r3, #0
 800827c:	d102      	bne.n	8008284 <xQueueGenericSend+0x98>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <xQueueGenericSend+0x9c>
 8008284:	2301      	movs	r3, #1
 8008286:	e000      	b.n	800828a <xQueueGenericSend+0x9e>
 8008288:	2300      	movs	r3, #0
 800828a:	2b00      	cmp	r3, #0
 800828c:	d109      	bne.n	80082a2 <xQueueGenericSend+0xb6>
 800828e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	61fb      	str	r3, [r7, #28]
 80082a0:	e7fe      	b.n	80082a0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80082a2:	f001 ffe9 	bl	800a278 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80082a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d302      	bcc.n	80082b8 <xQueueGenericSend+0xcc>
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d129      	bne.n	800830c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082b8:	683a      	ldr	r2, [r7, #0]
 80082ba:	68b9      	ldr	r1, [r7, #8]
 80082bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80082be:	f000 fa7c 	bl	80087ba <prvCopyDataToQueue>
 80082c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d010      	beq.n	80082ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ce:	3324      	adds	r3, #36	; 0x24
 80082d0:	4618      	mov	r0, r3
 80082d2:	f001 f8a3 	bl	800941c <xTaskRemoveFromEventList>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d013      	beq.n	8008304 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80082dc:	4b3f      	ldr	r3, [pc, #252]	; (80083dc <xQueueGenericSend+0x1f0>)
 80082de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	f3bf 8f4f 	dsb	sy
 80082e8:	f3bf 8f6f 	isb	sy
 80082ec:	e00a      	b.n	8008304 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80082ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d007      	beq.n	8008304 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80082f4:	4b39      	ldr	r3, [pc, #228]	; (80083dc <xQueueGenericSend+0x1f0>)
 80082f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008304:	f001 ffe6 	bl	800a2d4 <vPortExitCritical>
				return pdPASS;
 8008308:	2301      	movs	r3, #1
 800830a:	e063      	b.n	80083d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d103      	bne.n	800831a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008312:	f001 ffdf 	bl	800a2d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008316:	2300      	movs	r3, #0
 8008318:	e05c      	b.n	80083d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	2b00      	cmp	r3, #0
 800831e:	d106      	bne.n	800832e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008320:	f107 0314 	add.w	r3, r7, #20
 8008324:	4618      	mov	r0, r3
 8008326:	f001 f8db 	bl	80094e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800832a:	2301      	movs	r3, #1
 800832c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800832e:	f001 ffd1 	bl	800a2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008332:	f000 fe47 	bl	8008fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008336:	f001 ff9f 	bl	800a278 <vPortEnterCritical>
 800833a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008340:	b25b      	sxtb	r3, r3
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d103      	bne.n	8008350 <xQueueGenericSend+0x164>
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008352:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008356:	b25b      	sxtb	r3, r3
 8008358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800835c:	d103      	bne.n	8008366 <xQueueGenericSend+0x17a>
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	2200      	movs	r2, #0
 8008362:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008366:	f001 ffb5 	bl	800a2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800836a:	1d3a      	adds	r2, r7, #4
 800836c:	f107 0314 	add.w	r3, r7, #20
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f001 f8ca 	bl	800950c <xTaskCheckForTimeOut>
 8008378:	4603      	mov	r3, r0
 800837a:	2b00      	cmp	r3, #0
 800837c:	d124      	bne.n	80083c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800837e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008380:	f000 fb13 	bl	80089aa <prvIsQueueFull>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d018      	beq.n	80083bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800838a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800838c:	3310      	adds	r3, #16
 800838e:	687a      	ldr	r2, [r7, #4]
 8008390:	4611      	mov	r1, r2
 8008392:	4618      	mov	r0, r3
 8008394:	f000 fff4 	bl	8009380 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008398:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800839a:	f000 fa9e 	bl	80088da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800839e:	f000 fe1f 	bl	8008fe0 <xTaskResumeAll>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f47f af7c 	bne.w	80082a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80083aa:	4b0c      	ldr	r3, [pc, #48]	; (80083dc <xQueueGenericSend+0x1f0>)
 80083ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b0:	601a      	str	r2, [r3, #0]
 80083b2:	f3bf 8f4f 	dsb	sy
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	e772      	b.n	80082a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80083bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083be:	f000 fa8c 	bl	80088da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80083c2:	f000 fe0d 	bl	8008fe0 <xTaskResumeAll>
 80083c6:	e76c      	b.n	80082a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80083c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80083ca:	f000 fa86 	bl	80088da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80083ce:	f000 fe07 	bl	8008fe0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80083d2:	2300      	movs	r3, #0
		}
	}
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3738      	adds	r7, #56	; 0x38
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08e      	sub	sp, #56	; 0x38
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d109      	bne.n	800840c <xQueueGenericSendFromISR+0x2c>
 80083f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	627b      	str	r3, [r7, #36]	; 0x24
 800840a:	e7fe      	b.n	800840a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d103      	bne.n	800841a <xQueueGenericSendFromISR+0x3a>
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <xQueueGenericSendFromISR+0x3e>
 800841a:	2301      	movs	r3, #1
 800841c:	e000      	b.n	8008420 <xQueueGenericSendFromISR+0x40>
 800841e:	2300      	movs	r3, #0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d109      	bne.n	8008438 <xQueueGenericSendFromISR+0x58>
 8008424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008428:	f383 8811 	msr	BASEPRI, r3
 800842c:	f3bf 8f6f 	isb	sy
 8008430:	f3bf 8f4f 	dsb	sy
 8008434:	623b      	str	r3, [r7, #32]
 8008436:	e7fe      	b.n	8008436 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	2b02      	cmp	r3, #2
 800843c:	d103      	bne.n	8008446 <xQueueGenericSendFromISR+0x66>
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008442:	2b01      	cmp	r3, #1
 8008444:	d101      	bne.n	800844a <xQueueGenericSendFromISR+0x6a>
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <xQueueGenericSendFromISR+0x6c>
 800844a:	2300      	movs	r3, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d109      	bne.n	8008464 <xQueueGenericSendFromISR+0x84>
 8008450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008454:	f383 8811 	msr	BASEPRI, r3
 8008458:	f3bf 8f6f 	isb	sy
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	61fb      	str	r3, [r7, #28]
 8008462:	e7fe      	b.n	8008462 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008464:	f001 ffc2 	bl	800a3ec <vPortValidateInterruptPriority>
	__asm volatile
 8008468:	f3ef 8211 	mrs	r2, BASEPRI
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	61ba      	str	r2, [r7, #24]
 800847e:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008480:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008482:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800848c:	429a      	cmp	r2, r3
 800848e:	d302      	bcc.n	8008496 <xQueueGenericSendFromISR+0xb6>
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	2b02      	cmp	r3, #2
 8008494:	d12c      	bne.n	80084f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800849c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80084a0:	683a      	ldr	r2, [r7, #0]
 80084a2:	68b9      	ldr	r1, [r7, #8]
 80084a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80084a6:	f000 f988 	bl	80087ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80084aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80084ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b2:	d112      	bne.n	80084da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d016      	beq.n	80084ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084be:	3324      	adds	r3, #36	; 0x24
 80084c0:	4618      	mov	r0, r3
 80084c2:	f000 ffab 	bl	800941c <xTaskRemoveFromEventList>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00e      	beq.n	80084ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d00b      	beq.n	80084ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2201      	movs	r2, #1
 80084d6:	601a      	str	r2, [r3, #0]
 80084d8:	e007      	b.n	80084ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80084da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80084de:	3301      	adds	r3, #1
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	b25a      	sxtb	r2, r3
 80084e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80084ea:	2301      	movs	r3, #1
 80084ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80084ee:	e001      	b.n	80084f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80084f0:	2300      	movs	r3, #0
 80084f2:	637b      	str	r3, [r7, #52]	; 0x34
 80084f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084f6:	613b      	str	r3, [r7, #16]
	__asm volatile
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80084fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008500:	4618      	mov	r0, r3
 8008502:	3738      	adds	r7, #56	; 0x38
 8008504:	46bd      	mov	sp, r7
 8008506:	bd80      	pop	{r7, pc}

08008508 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08c      	sub	sp, #48	; 0x30
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008514:	2300      	movs	r3, #0
 8008516:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800851c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <xQueueReceive+0x2e>
	__asm volatile
 8008522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008526:	f383 8811 	msr	BASEPRI, r3
 800852a:	f3bf 8f6f 	isb	sy
 800852e:	f3bf 8f4f 	dsb	sy
 8008532:	623b      	str	r3, [r7, #32]
 8008534:	e7fe      	b.n	8008534 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d103      	bne.n	8008544 <xQueueReceive+0x3c>
 800853c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800853e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008540:	2b00      	cmp	r3, #0
 8008542:	d101      	bne.n	8008548 <xQueueReceive+0x40>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <xQueueReceive+0x42>
 8008548:	2300      	movs	r3, #0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d109      	bne.n	8008562 <xQueueReceive+0x5a>
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	61fb      	str	r3, [r7, #28]
 8008560:	e7fe      	b.n	8008560 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008562:	f001 f915 	bl	8009790 <xTaskGetSchedulerState>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <xQueueReceive+0x6a>
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <xQueueReceive+0x6e>
 8008572:	2301      	movs	r3, #1
 8008574:	e000      	b.n	8008578 <xQueueReceive+0x70>
 8008576:	2300      	movs	r3, #0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d109      	bne.n	8008590 <xQueueReceive+0x88>
 800857c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008580:	f383 8811 	msr	BASEPRI, r3
 8008584:	f3bf 8f6f 	isb	sy
 8008588:	f3bf 8f4f 	dsb	sy
 800858c:	61bb      	str	r3, [r7, #24]
 800858e:	e7fe      	b.n	800858e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8008590:	f001 fe72 	bl	800a278 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008598:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800859a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859c:	2b00      	cmp	r3, #0
 800859e:	d01f      	beq.n	80085e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80085a0:	68b9      	ldr	r1, [r7, #8]
 80085a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80085a4:	f000 f973 	bl	800888e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085aa:	1e5a      	subs	r2, r3, #1
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00f      	beq.n	80085d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ba:	3310      	adds	r3, #16
 80085bc:	4618      	mov	r0, r3
 80085be:	f000 ff2d 	bl	800941c <xTaskRemoveFromEventList>
 80085c2:	4603      	mov	r3, r0
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d007      	beq.n	80085d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80085c8:	4b3c      	ldr	r3, [pc, #240]	; (80086bc <xQueueReceive+0x1b4>)
 80085ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085ce:	601a      	str	r2, [r3, #0]
 80085d0:	f3bf 8f4f 	dsb	sy
 80085d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80085d8:	f001 fe7c 	bl	800a2d4 <vPortExitCritical>
				return pdPASS;
 80085dc:	2301      	movs	r3, #1
 80085de:	e069      	b.n	80086b4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d103      	bne.n	80085ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80085e6:	f001 fe75 	bl	800a2d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80085ea:	2300      	movs	r3, #0
 80085ec:	e062      	b.n	80086b4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80085ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d106      	bne.n	8008602 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085f4:	f107 0310 	add.w	r3, r7, #16
 80085f8:	4618      	mov	r0, r3
 80085fa:	f000 ff71 	bl	80094e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80085fe:	2301      	movs	r3, #1
 8008600:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008602:	f001 fe67 	bl	800a2d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008606:	f000 fcdd 	bl	8008fc4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800860a:	f001 fe35 	bl	800a278 <vPortEnterCritical>
 800860e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008610:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008614:	b25b      	sxtb	r3, r3
 8008616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861a:	d103      	bne.n	8008624 <xQueueReceive+0x11c>
 800861c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800861e:	2200      	movs	r2, #0
 8008620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008626:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800862a:	b25b      	sxtb	r3, r3
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d103      	bne.n	800863a <xQueueReceive+0x132>
 8008632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800863a:	f001 fe4b 	bl	800a2d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800863e:	1d3a      	adds	r2, r7, #4
 8008640:	f107 0310 	add.w	r3, r7, #16
 8008644:	4611      	mov	r1, r2
 8008646:	4618      	mov	r0, r3
 8008648:	f000 ff60 	bl	800950c <xTaskCheckForTimeOut>
 800864c:	4603      	mov	r3, r0
 800864e:	2b00      	cmp	r3, #0
 8008650:	d123      	bne.n	800869a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008652:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008654:	f000 f993 	bl	800897e <prvIsQueueEmpty>
 8008658:	4603      	mov	r3, r0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d017      	beq.n	800868e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800865e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008660:	3324      	adds	r3, #36	; 0x24
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	4611      	mov	r1, r2
 8008666:	4618      	mov	r0, r3
 8008668:	f000 fe8a 	bl	8009380 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800866c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800866e:	f000 f934 	bl	80088da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008672:	f000 fcb5 	bl	8008fe0 <xTaskResumeAll>
 8008676:	4603      	mov	r3, r0
 8008678:	2b00      	cmp	r3, #0
 800867a:	d189      	bne.n	8008590 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800867c:	4b0f      	ldr	r3, [pc, #60]	; (80086bc <xQueueReceive+0x1b4>)
 800867e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008682:	601a      	str	r2, [r3, #0]
 8008684:	f3bf 8f4f 	dsb	sy
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	e780      	b.n	8008590 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800868e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008690:	f000 f923 	bl	80088da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008694:	f000 fca4 	bl	8008fe0 <xTaskResumeAll>
 8008698:	e77a      	b.n	8008590 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800869a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800869c:	f000 f91d 	bl	80088da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086a0:	f000 fc9e 	bl	8008fe0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80086a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80086a6:	f000 f96a 	bl	800897e <prvIsQueueEmpty>
 80086aa:	4603      	mov	r3, r0
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f43f af6f 	beq.w	8008590 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80086b2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3730      	adds	r7, #48	; 0x30
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	e000ed04 	.word	0xe000ed04

080086c0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08e      	sub	sp, #56	; 0x38
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80086d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d109      	bne.n	80086ea <xQueueReceiveFromISR+0x2a>
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	623b      	str	r3, [r7, #32]
 80086e8:	e7fe      	b.n	80086e8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d103      	bne.n	80086f8 <xQueueReceiveFromISR+0x38>
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <xQueueReceiveFromISR+0x3c>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <xQueueReceiveFromISR+0x3e>
 80086fc:	2300      	movs	r3, #0
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <xQueueReceiveFromISR+0x56>
 8008702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	61fb      	str	r3, [r7, #28]
 8008714:	e7fe      	b.n	8008714 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008716:	f001 fe69 	bl	800a3ec <vPortValidateInterruptPriority>
	__asm volatile
 800871a:	f3ef 8211 	mrs	r2, BASEPRI
 800871e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	61ba      	str	r2, [r7, #24]
 8008730:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8008732:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008734:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800873c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873e:	2b00      	cmp	r3, #0
 8008740:	d02f      	beq.n	80087a2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8008742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008744:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800874c:	68b9      	ldr	r1, [r7, #8]
 800874e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008750:	f000 f89d 	bl	800888e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	1e5a      	subs	r2, r3, #1
 8008758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800875c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008764:	d112      	bne.n	800878c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d016      	beq.n	800879c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800876e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008770:	3310      	adds	r3, #16
 8008772:	4618      	mov	r0, r3
 8008774:	f000 fe52 	bl	800941c <xTaskRemoveFromEventList>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00e      	beq.n	800879c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d00b      	beq.n	800879c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	601a      	str	r2, [r3, #0]
 800878a:	e007      	b.n	800879c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800878c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008790:	3301      	adds	r3, #1
 8008792:	b2db      	uxtb	r3, r3
 8008794:	b25a      	sxtb	r2, r3
 8008796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800879c:	2301      	movs	r3, #1
 800879e:	637b      	str	r3, [r7, #52]	; 0x34
 80087a0:	e001      	b.n	80087a6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	637b      	str	r3, [r7, #52]	; 0x34
 80087a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80087b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3738      	adds	r7, #56	; 0x38
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b086      	sub	sp, #24
 80087be:	af00      	add	r7, sp, #0
 80087c0:	60f8      	str	r0, [r7, #12]
 80087c2:	60b9      	str	r1, [r7, #8]
 80087c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80087c6:	2300      	movs	r3, #0
 80087c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10d      	bne.n	80087f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d14d      	bne.n	800887c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f000 fff1 	bl	80097cc <xTaskPriorityDisinherit>
 80087ea:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	605a      	str	r2, [r3, #4]
 80087f2:	e043      	b.n	800887c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d119      	bne.n	800882e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6898      	ldr	r0, [r3, #8]
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008802:	461a      	mov	r2, r3
 8008804:	68b9      	ldr	r1, [r7, #8]
 8008806:	f002 f82b 	bl	800a860 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	689a      	ldr	r2, [r3, #8]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	441a      	add	r2, r3
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d32b      	bcc.n	800887c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681a      	ldr	r2, [r3, #0]
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	609a      	str	r2, [r3, #8]
 800882c:	e026      	b.n	800887c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	68d8      	ldr	r0, [r3, #12]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008836:	461a      	mov	r2, r3
 8008838:	68b9      	ldr	r1, [r7, #8]
 800883a:	f002 f811 	bl	800a860 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	68da      	ldr	r2, [r3, #12]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008846:	425b      	negs	r3, r3
 8008848:	441a      	add	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	68da      	ldr	r2, [r3, #12]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d207      	bcs.n	800886a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	425b      	negs	r3, r3
 8008864:	441a      	add	r2, r3
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	2b02      	cmp	r3, #2
 800886e:	d105      	bne.n	800887c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008870:	693b      	ldr	r3, [r7, #16]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	3b01      	subs	r3, #1
 800887a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008884:	697b      	ldr	r3, [r7, #20]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b082      	sub	sp, #8
 8008892:	af00      	add	r7, sp, #0
 8008894:	6078      	str	r0, [r7, #4]
 8008896:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889c:	2b00      	cmp	r3, #0
 800889e:	d018      	beq.n	80088d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a8:	441a      	add	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	685b      	ldr	r3, [r3, #4]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d303      	bcc.n	80088c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68d9      	ldr	r1, [r3, #12]
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ca:	461a      	mov	r2, r3
 80088cc:	6838      	ldr	r0, [r7, #0]
 80088ce:	f001 ffc7 	bl	800a860 <memcpy>
	}
}
 80088d2:	bf00      	nop
 80088d4:	3708      	adds	r7, #8
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}

080088da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80088da:	b580      	push	{r7, lr}
 80088dc:	b084      	sub	sp, #16
 80088de:	af00      	add	r7, sp, #0
 80088e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80088e2:	f001 fcc9 	bl	800a278 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80088ee:	e011      	b.n	8008914 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d012      	beq.n	800891e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3324      	adds	r3, #36	; 0x24
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fd8d 	bl	800941c <xTaskRemoveFromEventList>
 8008902:	4603      	mov	r3, r0
 8008904:	2b00      	cmp	r3, #0
 8008906:	d001      	beq.n	800890c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008908:	f000 fe60 	bl	80095cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800890c:	7bfb      	ldrb	r3, [r7, #15]
 800890e:	3b01      	subs	r3, #1
 8008910:	b2db      	uxtb	r3, r3
 8008912:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008914:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008918:	2b00      	cmp	r3, #0
 800891a:	dce9      	bgt.n	80088f0 <prvUnlockQueue+0x16>
 800891c:	e000      	b.n	8008920 <prvUnlockQueue+0x46>
					break;
 800891e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	22ff      	movs	r2, #255	; 0xff
 8008924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008928:	f001 fcd4 	bl	800a2d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800892c:	f001 fca4 	bl	800a278 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008936:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008938:	e011      	b.n	800895e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	691b      	ldr	r3, [r3, #16]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d012      	beq.n	8008968 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	3310      	adds	r3, #16
 8008946:	4618      	mov	r0, r3
 8008948:	f000 fd68 	bl	800941c <xTaskRemoveFromEventList>
 800894c:	4603      	mov	r3, r0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008952:	f000 fe3b 	bl	80095cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008956:	7bbb      	ldrb	r3, [r7, #14]
 8008958:	3b01      	subs	r3, #1
 800895a:	b2db      	uxtb	r3, r3
 800895c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800895e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008962:	2b00      	cmp	r3, #0
 8008964:	dce9      	bgt.n	800893a <prvUnlockQueue+0x60>
 8008966:	e000      	b.n	800896a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008968:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	22ff      	movs	r2, #255	; 0xff
 800896e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008972:	f001 fcaf 	bl	800a2d4 <vPortExitCritical>
}
 8008976:	bf00      	nop
 8008978:	3710      	adds	r7, #16
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b084      	sub	sp, #16
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008986:	f001 fc77 	bl	800a278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	2b00      	cmp	r3, #0
 8008990:	d102      	bne.n	8008998 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008992:	2301      	movs	r3, #1
 8008994:	60fb      	str	r3, [r7, #12]
 8008996:	e001      	b.n	800899c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008998:	2300      	movs	r3, #0
 800899a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800899c:	f001 fc9a 	bl	800a2d4 <vPortExitCritical>

	return xReturn;
 80089a0:	68fb      	ldr	r3, [r7, #12]
}
 80089a2:	4618      	mov	r0, r3
 80089a4:	3710      	adds	r7, #16
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd80      	pop	{r7, pc}

080089aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80089aa:	b580      	push	{r7, lr}
 80089ac:	b084      	sub	sp, #16
 80089ae:	af00      	add	r7, sp, #0
 80089b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80089b2:	f001 fc61 	bl	800a278 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089be:	429a      	cmp	r2, r3
 80089c0:	d102      	bne.n	80089c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80089c2:	2301      	movs	r3, #1
 80089c4:	60fb      	str	r3, [r7, #12]
 80089c6:	e001      	b.n	80089cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80089c8:	2300      	movs	r3, #0
 80089ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80089cc:	f001 fc82 	bl	800a2d4 <vPortExitCritical>

	return xReturn;
 80089d0:	68fb      	ldr	r3, [r7, #12]
}
 80089d2:	4618      	mov	r0, r3
 80089d4:	3710      	adds	r7, #16
 80089d6:	46bd      	mov	sp, r7
 80089d8:	bd80      	pop	{r7, pc}
	...

080089dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80089dc:	b480      	push	{r7}
 80089de:	b085      	sub	sp, #20
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089e6:	2300      	movs	r3, #0
 80089e8:	60fb      	str	r3, [r7, #12]
 80089ea:	e014      	b.n	8008a16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089ec:	4a0e      	ldr	r2, [pc, #56]	; (8008a28 <vQueueAddToRegistry+0x4c>)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d10b      	bne.n	8008a10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089f8:	490b      	ldr	r1, [pc, #44]	; (8008a28 <vQueueAddToRegistry+0x4c>)
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	683a      	ldr	r2, [r7, #0]
 80089fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a02:	4a09      	ldr	r2, [pc, #36]	; (8008a28 <vQueueAddToRegistry+0x4c>)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	4413      	add	r3, r2
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008a0e:	e005      	b.n	8008a1c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	3301      	adds	r3, #1
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2b07      	cmp	r3, #7
 8008a1a:	d9e7      	bls.n	80089ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a1c:	bf00      	nop
 8008a1e:	3714      	adds	r7, #20
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bc80      	pop	{r7}
 8008a24:	4770      	bx	lr
 8008a26:	bf00      	nop
 8008a28:	20001458 	.word	0x20001458

08008a2c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	60b9      	str	r1, [r7, #8]
 8008a36:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a3c:	f001 fc1c 	bl	800a278 <vPortEnterCritical>
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a46:	b25b      	sxtb	r3, r3
 8008a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a4c:	d103      	bne.n	8008a56 <vQueueWaitForMessageRestricted+0x2a>
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a5c:	b25b      	sxtb	r3, r3
 8008a5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a62:	d103      	bne.n	8008a6c <vQueueWaitForMessageRestricted+0x40>
 8008a64:	697b      	ldr	r3, [r7, #20]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a6c:	f001 fc32 	bl	800a2d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d106      	bne.n	8008a86 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	3324      	adds	r3, #36	; 0x24
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	68b9      	ldr	r1, [r7, #8]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fca1 	bl	80093c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a86:	6978      	ldr	r0, [r7, #20]
 8008a88:	f7ff ff27 	bl	80088da <prvUnlockQueue>
	}
 8008a8c:	bf00      	nop
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08e      	sub	sp, #56	; 0x38
 8008a98:	af04      	add	r7, sp, #16
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	607a      	str	r2, [r7, #4]
 8008aa0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d109      	bne.n	8008abc <xTaskCreateStatic+0x28>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	623b      	str	r3, [r7, #32]
 8008aba:	e7fe      	b.n	8008aba <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8008abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d109      	bne.n	8008ad6 <xTaskCreateStatic+0x42>
 8008ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	61fb      	str	r3, [r7, #28]
 8008ad4:	e7fe      	b.n	8008ad4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008ad6:	2354      	movs	r3, #84	; 0x54
 8008ad8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008ada:	693b      	ldr	r3, [r7, #16]
 8008adc:	2b54      	cmp	r3, #84	; 0x54
 8008ade:	d009      	beq.n	8008af4 <xTaskCreateStatic+0x60>
 8008ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae4:	f383 8811 	msr	BASEPRI, r3
 8008ae8:	f3bf 8f6f 	isb	sy
 8008aec:	f3bf 8f4f 	dsb	sy
 8008af0:	61bb      	str	r3, [r7, #24]
 8008af2:	e7fe      	b.n	8008af2 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d01e      	beq.n	8008b38 <xTaskCreateStatic+0xa4>
 8008afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d01b      	beq.n	8008b38 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008b12:	2300      	movs	r3, #0
 8008b14:	9303      	str	r3, [sp, #12]
 8008b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b18:	9302      	str	r3, [sp, #8]
 8008b1a:	f107 0314 	add.w	r3, r7, #20
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	68b9      	ldr	r1, [r7, #8]
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 f850 	bl	8008bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b32:	f000 f8cb 	bl	8008ccc <prvAddNewTaskToReadyList>
 8008b36:	e001      	b.n	8008b3c <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008b3c:	697b      	ldr	r3, [r7, #20]
	}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3728      	adds	r7, #40	; 0x28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b08c      	sub	sp, #48	; 0x30
 8008b4a:	af04      	add	r7, sp, #16
 8008b4c:	60f8      	str	r0, [r7, #12]
 8008b4e:	60b9      	str	r1, [r7, #8]
 8008b50:	603b      	str	r3, [r7, #0]
 8008b52:	4613      	mov	r3, r2
 8008b54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	009b      	lsls	r3, r3, #2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f001 fc82 	bl	800a464 <pvPortMalloc>
 8008b60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d00e      	beq.n	8008b86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8008b68:	2054      	movs	r0, #84	; 0x54
 8008b6a:	f001 fc7b 	bl	800a464 <pvPortMalloc>
 8008b6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8008b7c:	e005      	b.n	8008b8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b7e:	6978      	ldr	r0, [r7, #20]
 8008b80:	f001 fd32 	bl	800a5e8 <vPortFree>
 8008b84:	e001      	b.n	8008b8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b8a:	69fb      	ldr	r3, [r7, #28]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d017      	beq.n	8008bc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b98:	88fa      	ldrh	r2, [r7, #6]
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	9303      	str	r3, [sp, #12]
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	9302      	str	r3, [sp, #8]
 8008ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ba4:	9301      	str	r3, [sp, #4]
 8008ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	683b      	ldr	r3, [r7, #0]
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	68f8      	ldr	r0, [r7, #12]
 8008bb0:	f000 f80e 	bl	8008bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bb4:	69f8      	ldr	r0, [r7, #28]
 8008bb6:	f000 f889 	bl	8008ccc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	61bb      	str	r3, [r7, #24]
 8008bbe:	e002      	b.n	8008bc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8008bc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008bc6:	69bb      	ldr	r3, [r7, #24]
	}
 8008bc8:	4618      	mov	r0, r3
 8008bca:	3720      	adds	r7, #32
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd80      	pop	{r7, pc}

08008bd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	60f8      	str	r0, [r7, #12]
 8008bd8:	60b9      	str	r1, [r7, #8]
 8008bda:	607a      	str	r2, [r7, #4]
 8008bdc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008be8:	3b01      	subs	r3, #1
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	4413      	add	r3, r2
 8008bee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	f023 0307 	bic.w	r3, r3, #7
 8008bf6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bf8:	69bb      	ldr	r3, [r7, #24]
 8008bfa:	f003 0307 	and.w	r3, r3, #7
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <prvInitialiseNewTask+0x46>
 8008c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c06:	f383 8811 	msr	BASEPRI, r3
 8008c0a:	f3bf 8f6f 	isb	sy
 8008c0e:	f3bf 8f4f 	dsb	sy
 8008c12:	617b      	str	r3, [r7, #20]
 8008c14:	e7fe      	b.n	8008c14 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c16:	2300      	movs	r3, #0
 8008c18:	61fb      	str	r3, [r7, #28]
 8008c1a:	e012      	b.n	8008c42 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008c1c:	68ba      	ldr	r2, [r7, #8]
 8008c1e:	69fb      	ldr	r3, [r7, #28]
 8008c20:	4413      	add	r3, r2
 8008c22:	7819      	ldrb	r1, [r3, #0]
 8008c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	4413      	add	r3, r2
 8008c2a:	3334      	adds	r3, #52	; 0x34
 8008c2c:	460a      	mov	r2, r1
 8008c2e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8008c30:	68ba      	ldr	r2, [r7, #8]
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	4413      	add	r3, r2
 8008c36:	781b      	ldrb	r3, [r3, #0]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d006      	beq.n	8008c4a <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	69fb      	ldr	r3, [r7, #28]
 8008c44:	2b0f      	cmp	r3, #15
 8008c46:	d9e9      	bls.n	8008c1c <prvInitialiseNewTask+0x4c>
 8008c48:	e000      	b.n	8008c4c <prvInitialiseNewTask+0x7c>
		{
			break;
 8008c4a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	2b06      	cmp	r3, #6
 8008c58:	d901      	bls.n	8008c5e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c5a:	2306      	movs	r3, #6
 8008c5c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c62:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c68:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c72:	3304      	adds	r3, #4
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7ff f8f2 	bl	8007e5e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c7c:	3318      	adds	r3, #24
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7ff f8ed 	bl	8007e5e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c88:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c8c:	f1c3 0207 	rsb	r2, r3, #7
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c98:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	68f9      	ldr	r1, [r7, #12]
 8008cac:	69b8      	ldr	r0, [r7, #24]
 8008cae:	f001 f9f5 	bl	800a09c <pxPortInitialiseStack>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb6:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8008cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d002      	beq.n	8008cc4 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008cc4:	bf00      	nop
 8008cc6:	3720      	adds	r7, #32
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}

08008ccc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cd4:	f001 fad0 	bl	800a278 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cd8:	4b2a      	ldr	r3, [pc, #168]	; (8008d84 <prvAddNewTaskToReadyList+0xb8>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	4a29      	ldr	r2, [pc, #164]	; (8008d84 <prvAddNewTaskToReadyList+0xb8>)
 8008ce0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008ce2:	4b29      	ldr	r3, [pc, #164]	; (8008d88 <prvAddNewTaskToReadyList+0xbc>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d109      	bne.n	8008cfe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cea:	4a27      	ldr	r2, [pc, #156]	; (8008d88 <prvAddNewTaskToReadyList+0xbc>)
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cf0:	4b24      	ldr	r3, [pc, #144]	; (8008d84 <prvAddNewTaskToReadyList+0xb8>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d110      	bne.n	8008d1a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cf8:	f000 fc8c 	bl	8009614 <prvInitialiseTaskLists>
 8008cfc:	e00d      	b.n	8008d1a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cfe:	4b23      	ldr	r3, [pc, #140]	; (8008d8c <prvAddNewTaskToReadyList+0xc0>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d109      	bne.n	8008d1a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008d06:	4b20      	ldr	r3, [pc, #128]	; (8008d88 <prvAddNewTaskToReadyList+0xbc>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d802      	bhi.n	8008d1a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008d14:	4a1c      	ldr	r2, [pc, #112]	; (8008d88 <prvAddNewTaskToReadyList+0xbc>)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008d1a:	4b1d      	ldr	r3, [pc, #116]	; (8008d90 <prvAddNewTaskToReadyList+0xc4>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	4a1b      	ldr	r2, [pc, #108]	; (8008d90 <prvAddNewTaskToReadyList+0xc4>)
 8008d22:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d28:	2201      	movs	r2, #1
 8008d2a:	409a      	lsls	r2, r3
 8008d2c:	4b19      	ldr	r3, [pc, #100]	; (8008d94 <prvAddNewTaskToReadyList+0xc8>)
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4313      	orrs	r3, r2
 8008d32:	4a18      	ldr	r2, [pc, #96]	; (8008d94 <prvAddNewTaskToReadyList+0xc8>)
 8008d34:	6013      	str	r3, [r2, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	4413      	add	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	4a15      	ldr	r2, [pc, #84]	; (8008d98 <prvAddNewTaskToReadyList+0xcc>)
 8008d44:	441a      	add	r2, r3
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	3304      	adds	r3, #4
 8008d4a:	4619      	mov	r1, r3
 8008d4c:	4610      	mov	r0, r2
 8008d4e:	f7ff f892 	bl	8007e76 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d52:	f001 fabf 	bl	800a2d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d56:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <prvAddNewTaskToReadyList+0xc0>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d00e      	beq.n	8008d7c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d5e:	4b0a      	ldr	r3, [pc, #40]	; (8008d88 <prvAddNewTaskToReadyList+0xbc>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d207      	bcs.n	8008d7c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d6c:	4b0b      	ldr	r3, [pc, #44]	; (8008d9c <prvAddNewTaskToReadyList+0xd0>)
 8008d6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d72:	601a      	str	r2, [r3, #0]
 8008d74:	f3bf 8f4f 	dsb	sy
 8008d78:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d7c:	bf00      	nop
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	200004c8 	.word	0x200004c8
 8008d88:	200003c8 	.word	0x200003c8
 8008d8c:	200004d4 	.word	0x200004d4
 8008d90:	200004e4 	.word	0x200004e4
 8008d94:	200004d0 	.word	0x200004d0
 8008d98:	200003cc 	.word	0x200003cc
 8008d9c:	e000ed04 	.word	0xe000ed04

08008da0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	; 0x28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8008daa:	2300      	movs	r3, #0
 8008dac:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d109      	bne.n	8008dc8 <vTaskDelayUntil+0x28>
 8008db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db8:	f383 8811 	msr	BASEPRI, r3
 8008dbc:	f3bf 8f6f 	isb	sy
 8008dc0:	f3bf 8f4f 	dsb	sy
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	e7fe      	b.n	8008dc6 <vTaskDelayUntil+0x26>
		configASSERT( ( xTimeIncrement > 0U ) );
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d109      	bne.n	8008de2 <vTaskDelayUntil+0x42>
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	613b      	str	r3, [r7, #16]
 8008de0:	e7fe      	b.n	8008de0 <vTaskDelayUntil+0x40>
		configASSERT( uxSchedulerSuspended == 0 );
 8008de2:	4b29      	ldr	r3, [pc, #164]	; (8008e88 <vTaskDelayUntil+0xe8>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d009      	beq.n	8008dfe <vTaskDelayUntil+0x5e>
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	e7fe      	b.n	8008dfc <vTaskDelayUntil+0x5c>

		vTaskSuspendAll();
 8008dfe:	f000 f8e1 	bl	8008fc4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008e02:	4b22      	ldr	r3, [pc, #136]	; (8008e8c <vTaskDelayUntil+0xec>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	683a      	ldr	r2, [r7, #0]
 8008e0e:	4413      	add	r3, r2
 8008e10:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	6a3a      	ldr	r2, [r7, #32]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d20b      	bcs.n	8008e34 <vTaskDelayUntil+0x94>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	69fa      	ldr	r2, [r7, #28]
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d211      	bcs.n	8008e4a <vTaskDelayUntil+0xaa>
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	6a3b      	ldr	r3, [r7, #32]
 8008e2a:	429a      	cmp	r2, r3
 8008e2c:	d90d      	bls.n	8008e4a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
 8008e32:	e00a      	b.n	8008e4a <vTaskDelayUntil+0xaa>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d303      	bcc.n	8008e46 <vTaskDelayUntil+0xa6>
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	d901      	bls.n	8008e4a <vTaskDelayUntil+0xaa>
				{
					xShouldDelay = pdTRUE;
 8008e46:	2301      	movs	r3, #1
 8008e48:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	69fa      	ldr	r2, [r7, #28]
 8008e4e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d006      	beq.n	8008e64 <vTaskDelayUntil+0xc4>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	6a3b      	ldr	r3, [r7, #32]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	2100      	movs	r1, #0
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fd38 	bl	80098d4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008e64:	f000 f8bc 	bl	8008fe0 <xTaskResumeAll>
 8008e68:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e6a:	69bb      	ldr	r3, [r7, #24]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d107      	bne.n	8008e80 <vTaskDelayUntil+0xe0>
		{
			portYIELD_WITHIN_API();
 8008e70:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <vTaskDelayUntil+0xf0>)
 8008e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e76:	601a      	str	r2, [r3, #0]
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e80:	bf00      	nop
 8008e82:	3728      	adds	r7, #40	; 0x28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	200004f0 	.word	0x200004f0
 8008e8c:	200004cc 	.word	0x200004cc
 8008e90:	e000ed04 	.word	0xe000ed04

08008e94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d016      	beq.n	8008ed4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ea6:	4b13      	ldr	r3, [pc, #76]	; (8008ef4 <vTaskDelay+0x60>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d009      	beq.n	8008ec2 <vTaskDelay+0x2e>
 8008eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb2:	f383 8811 	msr	BASEPRI, r3
 8008eb6:	f3bf 8f6f 	isb	sy
 8008eba:	f3bf 8f4f 	dsb	sy
 8008ebe:	60bb      	str	r3, [r7, #8]
 8008ec0:	e7fe      	b.n	8008ec0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008ec2:	f000 f87f 	bl	8008fc4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008ec6:	2100      	movs	r1, #0
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 fd03 	bl	80098d4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008ece:	f000 f887 	bl	8008fe0 <xTaskResumeAll>
 8008ed2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d107      	bne.n	8008eea <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8008eda:	4b07      	ldr	r3, [pc, #28]	; (8008ef8 <vTaskDelay+0x64>)
 8008edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	f3bf 8f4f 	dsb	sy
 8008ee6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	200004f0 	.word	0x200004f0
 8008ef8:	e000ed04 	.word	0xe000ed04

08008efc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b08a      	sub	sp, #40	; 0x28
 8008f00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f06:	2300      	movs	r3, #0
 8008f08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f0a:	463a      	mov	r2, r7
 8008f0c:	1d39      	adds	r1, r7, #4
 8008f0e:	f107 0308 	add.w	r3, r7, #8
 8008f12:	4618      	mov	r0, r3
 8008f14:	f7f8 fad4 	bl	80014c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f18:	6839      	ldr	r1, [r7, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	68ba      	ldr	r2, [r7, #8]
 8008f1e:	9202      	str	r2, [sp, #8]
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	2300      	movs	r3, #0
 8008f28:	460a      	mov	r2, r1
 8008f2a:	4920      	ldr	r1, [pc, #128]	; (8008fac <vTaskStartScheduler+0xb0>)
 8008f2c:	4820      	ldr	r0, [pc, #128]	; (8008fb0 <vTaskStartScheduler+0xb4>)
 8008f2e:	f7ff fdb1 	bl	8008a94 <xTaskCreateStatic>
 8008f32:	4602      	mov	r2, r0
 8008f34:	4b1f      	ldr	r3, [pc, #124]	; (8008fb4 <vTaskStartScheduler+0xb8>)
 8008f36:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f38:	4b1e      	ldr	r3, [pc, #120]	; (8008fb4 <vTaskStartScheduler+0xb8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d002      	beq.n	8008f46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f40:	2301      	movs	r3, #1
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	e001      	b.n	8008f4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f46:	2300      	movs	r3, #0
 8008f48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d102      	bne.n	8008f56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f50:	f000 fd26 	bl	80099a0 <xTimerCreateTimerTask>
 8008f54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d115      	bne.n	8008f88 <vTaskStartScheduler+0x8c>
 8008f5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008f6e:	4b12      	ldr	r3, [pc, #72]	; (8008fb8 <vTaskStartScheduler+0xbc>)
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008f76:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <vTaskStartScheduler+0xc0>)
 8008f78:	2201      	movs	r2, #1
 8008f7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8008f7c:	4b10      	ldr	r3, [pc, #64]	; (8008fc0 <vTaskStartScheduler+0xc4>)
 8008f7e:	2200      	movs	r2, #0
 8008f80:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008f82:	f001 f909 	bl	800a198 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008f86:	e00d      	b.n	8008fa4 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f8e:	d109      	bne.n	8008fa4 <vTaskStartScheduler+0xa8>
 8008f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	60fb      	str	r3, [r7, #12]
 8008fa2:	e7fe      	b.n	8008fa2 <vTaskStartScheduler+0xa6>
}
 8008fa4:	bf00      	nop
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	0800b2ec 	.word	0x0800b2ec
 8008fb0:	080095e5 	.word	0x080095e5
 8008fb4:	200004ec 	.word	0x200004ec
 8008fb8:	200004e8 	.word	0x200004e8
 8008fbc:	200004d4 	.word	0x200004d4
 8008fc0:	200004cc 	.word	0x200004cc

08008fc4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008fc8:	4b04      	ldr	r3, [pc, #16]	; (8008fdc <vTaskSuspendAll+0x18>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	3301      	adds	r3, #1
 8008fce:	4a03      	ldr	r2, [pc, #12]	; (8008fdc <vTaskSuspendAll+0x18>)
 8008fd0:	6013      	str	r3, [r2, #0]
}
 8008fd2:	bf00      	nop
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bc80      	pop	{r7}
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	200004f0 	.word	0x200004f0

08008fe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b084      	sub	sp, #16
 8008fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008fea:	2300      	movs	r3, #0
 8008fec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008fee:	4b41      	ldr	r3, [pc, #260]	; (80090f4 <xTaskResumeAll+0x114>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d109      	bne.n	800900a <xTaskResumeAll+0x2a>
 8008ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	603b      	str	r3, [r7, #0]
 8009008:	e7fe      	b.n	8009008 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800900a:	f001 f935 	bl	800a278 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800900e:	4b39      	ldr	r3, [pc, #228]	; (80090f4 <xTaskResumeAll+0x114>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3b01      	subs	r3, #1
 8009014:	4a37      	ldr	r2, [pc, #220]	; (80090f4 <xTaskResumeAll+0x114>)
 8009016:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009018:	4b36      	ldr	r3, [pc, #216]	; (80090f4 <xTaskResumeAll+0x114>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d161      	bne.n	80090e4 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009020:	4b35      	ldr	r3, [pc, #212]	; (80090f8 <xTaskResumeAll+0x118>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d05d      	beq.n	80090e4 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009028:	e02e      	b.n	8009088 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800902a:	4b34      	ldr	r3, [pc, #208]	; (80090fc <xTaskResumeAll+0x11c>)
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	68db      	ldr	r3, [r3, #12]
 8009030:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	3318      	adds	r3, #24
 8009036:	4618      	mov	r0, r3
 8009038:	f7fe ff78 	bl	8007f2c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	3304      	adds	r3, #4
 8009040:	4618      	mov	r0, r3
 8009042:	f7fe ff73 	bl	8007f2c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800904a:	2201      	movs	r2, #1
 800904c:	409a      	lsls	r2, r3
 800904e:	4b2c      	ldr	r3, [pc, #176]	; (8009100 <xTaskResumeAll+0x120>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4313      	orrs	r3, r2
 8009054:	4a2a      	ldr	r2, [pc, #168]	; (8009100 <xTaskResumeAll+0x120>)
 8009056:	6013      	str	r3, [r2, #0]
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905c:	4613      	mov	r3, r2
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	009b      	lsls	r3, r3, #2
 8009064:	4a27      	ldr	r2, [pc, #156]	; (8009104 <xTaskResumeAll+0x124>)
 8009066:	441a      	add	r2, r3
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	3304      	adds	r3, #4
 800906c:	4619      	mov	r1, r3
 800906e:	4610      	mov	r0, r2
 8009070:	f7fe ff01 	bl	8007e76 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009078:	4b23      	ldr	r3, [pc, #140]	; (8009108 <xTaskResumeAll+0x128>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907e:	429a      	cmp	r2, r3
 8009080:	d302      	bcc.n	8009088 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8009082:	4b22      	ldr	r3, [pc, #136]	; (800910c <xTaskResumeAll+0x12c>)
 8009084:	2201      	movs	r2, #1
 8009086:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009088:	4b1c      	ldr	r3, [pc, #112]	; (80090fc <xTaskResumeAll+0x11c>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1cc      	bne.n	800902a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d001      	beq.n	800909a <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009096:	f000 fb57 	bl	8009748 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800909a:	4b1d      	ldr	r3, [pc, #116]	; (8009110 <xTaskResumeAll+0x130>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d010      	beq.n	80090c8 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090a6:	f000 f845 	bl	8009134 <xTaskIncrementTick>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80090b0:	4b16      	ldr	r3, [pc, #88]	; (800910c <xTaskResumeAll+0x12c>)
 80090b2:	2201      	movs	r2, #1
 80090b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	3b01      	subs	r3, #1
 80090ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1f1      	bne.n	80090a6 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80090c2:	4b13      	ldr	r3, [pc, #76]	; (8009110 <xTaskResumeAll+0x130>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80090c8:	4b10      	ldr	r3, [pc, #64]	; (800910c <xTaskResumeAll+0x12c>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d009      	beq.n	80090e4 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80090d0:	2301      	movs	r3, #1
 80090d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80090d4:	4b0f      	ldr	r3, [pc, #60]	; (8009114 <xTaskResumeAll+0x134>)
 80090d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80090e4:	f001 f8f6 	bl	800a2d4 <vPortExitCritical>

	return xAlreadyYielded;
 80090e8:	68bb      	ldr	r3, [r7, #8]
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3710      	adds	r7, #16
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	200004f0 	.word	0x200004f0
 80090f8:	200004c8 	.word	0x200004c8
 80090fc:	20000488 	.word	0x20000488
 8009100:	200004d0 	.word	0x200004d0
 8009104:	200003cc 	.word	0x200003cc
 8009108:	200003c8 	.word	0x200003c8
 800910c:	200004dc 	.word	0x200004dc
 8009110:	200004d8 	.word	0x200004d8
 8009114:	e000ed04 	.word	0xe000ed04

08009118 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800911e:	4b04      	ldr	r3, [pc, #16]	; (8009130 <xTaskGetTickCount+0x18>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009124:	687b      	ldr	r3, [r7, #4]
}
 8009126:	4618      	mov	r0, r3
 8009128:	370c      	adds	r7, #12
 800912a:	46bd      	mov	sp, r7
 800912c:	bc80      	pop	{r7}
 800912e:	4770      	bx	lr
 8009130:	200004cc 	.word	0x200004cc

08009134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b086      	sub	sp, #24
 8009138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800913a:	2300      	movs	r3, #0
 800913c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800913e:	4b50      	ldr	r3, [pc, #320]	; (8009280 <xTaskIncrementTick+0x14c>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	2b00      	cmp	r3, #0
 8009144:	f040 808c 	bne.w	8009260 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009148:	4b4e      	ldr	r3, [pc, #312]	; (8009284 <xTaskIncrementTick+0x150>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3301      	adds	r3, #1
 800914e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009150:	4a4c      	ldr	r2, [pc, #304]	; (8009284 <xTaskIncrementTick+0x150>)
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d11f      	bne.n	800919c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800915c:	4b4a      	ldr	r3, [pc, #296]	; (8009288 <xTaskIncrementTick+0x154>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d009      	beq.n	800917a <xTaskIncrementTick+0x46>
 8009166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	e7fe      	b.n	8009178 <xTaskIncrementTick+0x44>
 800917a:	4b43      	ldr	r3, [pc, #268]	; (8009288 <xTaskIncrementTick+0x154>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	60fb      	str	r3, [r7, #12]
 8009180:	4b42      	ldr	r3, [pc, #264]	; (800928c <xTaskIncrementTick+0x158>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a40      	ldr	r2, [pc, #256]	; (8009288 <xTaskIncrementTick+0x154>)
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	4a40      	ldr	r2, [pc, #256]	; (800928c <xTaskIncrementTick+0x158>)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6013      	str	r3, [r2, #0]
 800918e:	4b40      	ldr	r3, [pc, #256]	; (8009290 <xTaskIncrementTick+0x15c>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	3301      	adds	r3, #1
 8009194:	4a3e      	ldr	r2, [pc, #248]	; (8009290 <xTaskIncrementTick+0x15c>)
 8009196:	6013      	str	r3, [r2, #0]
 8009198:	f000 fad6 	bl	8009748 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800919c:	4b3d      	ldr	r3, [pc, #244]	; (8009294 <xTaskIncrementTick+0x160>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	693a      	ldr	r2, [r7, #16]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d34d      	bcc.n	8009242 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091a6:	4b38      	ldr	r3, [pc, #224]	; (8009288 <xTaskIncrementTick+0x154>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d101      	bne.n	80091b4 <xTaskIncrementTick+0x80>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e000      	b.n	80091b6 <xTaskIncrementTick+0x82>
 80091b4:	2300      	movs	r3, #0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d004      	beq.n	80091c4 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091ba:	4b36      	ldr	r3, [pc, #216]	; (8009294 <xTaskIncrementTick+0x160>)
 80091bc:	f04f 32ff 	mov.w	r2, #4294967295
 80091c0:	601a      	str	r2, [r3, #0]
					break;
 80091c2:	e03e      	b.n	8009242 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80091c4:	4b30      	ldr	r3, [pc, #192]	; (8009288 <xTaskIncrementTick+0x154>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	68db      	ldr	r3, [r3, #12]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80091d4:	693a      	ldr	r2, [r7, #16]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d203      	bcs.n	80091e4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80091dc:	4a2d      	ldr	r2, [pc, #180]	; (8009294 <xTaskIncrementTick+0x160>)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	6013      	str	r3, [r2, #0]
						break;
 80091e2:	e02e      	b.n	8009242 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	3304      	adds	r3, #4
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe fe9f 	bl	8007f2c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d004      	beq.n	8009200 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	3318      	adds	r3, #24
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fe fe96 	bl	8007f2c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009204:	2201      	movs	r2, #1
 8009206:	409a      	lsls	r2, r3
 8009208:	4b23      	ldr	r3, [pc, #140]	; (8009298 <xTaskIncrementTick+0x164>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4313      	orrs	r3, r2
 800920e:	4a22      	ldr	r2, [pc, #136]	; (8009298 <xTaskIncrementTick+0x164>)
 8009210:	6013      	str	r3, [r2, #0]
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009216:	4613      	mov	r3, r2
 8009218:	009b      	lsls	r3, r3, #2
 800921a:	4413      	add	r3, r2
 800921c:	009b      	lsls	r3, r3, #2
 800921e:	4a1f      	ldr	r2, [pc, #124]	; (800929c <xTaskIncrementTick+0x168>)
 8009220:	441a      	add	r2, r3
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	3304      	adds	r3, #4
 8009226:	4619      	mov	r1, r3
 8009228:	4610      	mov	r0, r2
 800922a:	f7fe fe24 	bl	8007e76 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009232:	4b1b      	ldr	r3, [pc, #108]	; (80092a0 <xTaskIncrementTick+0x16c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009238:	429a      	cmp	r2, r3
 800923a:	d3b4      	bcc.n	80091a6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800923c:	2301      	movs	r3, #1
 800923e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009240:	e7b1      	b.n	80091a6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009242:	4b17      	ldr	r3, [pc, #92]	; (80092a0 <xTaskIncrementTick+0x16c>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009248:	4914      	ldr	r1, [pc, #80]	; (800929c <xTaskIncrementTick+0x168>)
 800924a:	4613      	mov	r3, r2
 800924c:	009b      	lsls	r3, r3, #2
 800924e:	4413      	add	r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b01      	cmp	r3, #1
 8009258:	d907      	bls.n	800926a <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800925a:	2301      	movs	r3, #1
 800925c:	617b      	str	r3, [r7, #20]
 800925e:	e004      	b.n	800926a <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009260:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <xTaskIncrementTick+0x170>)
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3301      	adds	r3, #1
 8009266:	4a0f      	ldr	r2, [pc, #60]	; (80092a4 <xTaskIncrementTick+0x170>)
 8009268:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800926a:	4b0f      	ldr	r3, [pc, #60]	; (80092a8 <xTaskIncrementTick+0x174>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8009272:	2301      	movs	r3, #1
 8009274:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8009276:	697b      	ldr	r3, [r7, #20]
}
 8009278:	4618      	mov	r0, r3
 800927a:	3718      	adds	r7, #24
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	200004f0 	.word	0x200004f0
 8009284:	200004cc 	.word	0x200004cc
 8009288:	20000480 	.word	0x20000480
 800928c:	20000484 	.word	0x20000484
 8009290:	200004e0 	.word	0x200004e0
 8009294:	200004e8 	.word	0x200004e8
 8009298:	200004d0 	.word	0x200004d0
 800929c:	200003cc 	.word	0x200003cc
 80092a0:	200003c8 	.word	0x200003c8
 80092a4:	200004d8 	.word	0x200004d8
 80092a8:	200004dc 	.word	0x200004dc

080092ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092b2:	4b2e      	ldr	r3, [pc, #184]	; (800936c <vTaskSwitchContext+0xc0>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d003      	beq.n	80092c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80092ba:	4b2d      	ldr	r3, [pc, #180]	; (8009370 <vTaskSwitchContext+0xc4>)
 80092bc:	2201      	movs	r2, #1
 80092be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80092c0:	e04f      	b.n	8009362 <vTaskSwitchContext+0xb6>
		xYieldPending = pdFALSE;
 80092c2:	4b2b      	ldr	r3, [pc, #172]	; (8009370 <vTaskSwitchContext+0xc4>)
 80092c4:	2200      	movs	r2, #0
 80092c6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80092c8:	4b2a      	ldr	r3, [pc, #168]	; (8009374 <vTaskSwitchContext+0xc8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	4b29      	ldr	r3, [pc, #164]	; (8009374 <vTaskSwitchContext+0xc8>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d808      	bhi.n	80092ea <vTaskSwitchContext+0x3e>
 80092d8:	4b26      	ldr	r3, [pc, #152]	; (8009374 <vTaskSwitchContext+0xc8>)
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	4b25      	ldr	r3, [pc, #148]	; (8009374 <vTaskSwitchContext+0xc8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3334      	adds	r3, #52	; 0x34
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7f8 f8e1 	bl	80014ac <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80092ea:	4b23      	ldr	r3, [pc, #140]	; (8009378 <vTaskSwitchContext+0xcc>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	fab3 f383 	clz	r3, r3
 80092f6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80092f8:	7afb      	ldrb	r3, [r7, #11]
 80092fa:	f1c3 031f 	rsb	r3, r3, #31
 80092fe:	617b      	str	r3, [r7, #20]
 8009300:	491e      	ldr	r1, [pc, #120]	; (800937c <vTaskSwitchContext+0xd0>)
 8009302:	697a      	ldr	r2, [r7, #20]
 8009304:	4613      	mov	r3, r2
 8009306:	009b      	lsls	r3, r3, #2
 8009308:	4413      	add	r3, r2
 800930a:	009b      	lsls	r3, r3, #2
 800930c:	440b      	add	r3, r1
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d109      	bne.n	8009328 <vTaskSwitchContext+0x7c>
	__asm volatile
 8009314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009318:	f383 8811 	msr	BASEPRI, r3
 800931c:	f3bf 8f6f 	isb	sy
 8009320:	f3bf 8f4f 	dsb	sy
 8009324:	607b      	str	r3, [r7, #4]
 8009326:	e7fe      	b.n	8009326 <vTaskSwitchContext+0x7a>
 8009328:	697a      	ldr	r2, [r7, #20]
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a12      	ldr	r2, [pc, #72]	; (800937c <vTaskSwitchContext+0xd0>)
 8009334:	4413      	add	r3, r2
 8009336:	613b      	str	r3, [r7, #16]
 8009338:	693b      	ldr	r3, [r7, #16]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	685a      	ldr	r2, [r3, #4]
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	605a      	str	r2, [r3, #4]
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	3308      	adds	r3, #8
 800934a:	429a      	cmp	r2, r3
 800934c:	d104      	bne.n	8009358 <vTaskSwitchContext+0xac>
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	685a      	ldr	r2, [r3, #4]
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	605a      	str	r2, [r3, #4]
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	685b      	ldr	r3, [r3, #4]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	4a05      	ldr	r2, [pc, #20]	; (8009374 <vTaskSwitchContext+0xc8>)
 8009360:	6013      	str	r3, [r2, #0]
}
 8009362:	bf00      	nop
 8009364:	3718      	adds	r7, #24
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}
 800936a:	bf00      	nop
 800936c:	200004f0 	.word	0x200004f0
 8009370:	200004dc 	.word	0x200004dc
 8009374:	200003c8 	.word	0x200003c8
 8009378:	200004d0 	.word	0x200004d0
 800937c:	200003cc 	.word	0x200003cc

08009380 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b084      	sub	sp, #16
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
 8009388:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d109      	bne.n	80093a4 <vTaskPlaceOnEventList+0x24>
 8009390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	e7fe      	b.n	80093a2 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093a4:	4b07      	ldr	r3, [pc, #28]	; (80093c4 <vTaskPlaceOnEventList+0x44>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	3318      	adds	r3, #24
 80093aa:	4619      	mov	r1, r3
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f7fe fd85 	bl	8007ebc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093b2:	2101      	movs	r1, #1
 80093b4:	6838      	ldr	r0, [r7, #0]
 80093b6:	f000 fa8d 	bl	80098d4 <prvAddCurrentTaskToDelayedList>
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	200003c8 	.word	0x200003c8

080093c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b086      	sub	sp, #24
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	60f8      	str	r0, [r7, #12]
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d109      	bne.n	80093ee <vTaskPlaceOnEventListRestricted+0x26>
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	617b      	str	r3, [r7, #20]
 80093ec:	e7fe      	b.n	80093ec <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093ee:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <vTaskPlaceOnEventListRestricted+0x50>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	3318      	adds	r3, #24
 80093f4:	4619      	mov	r1, r3
 80093f6:	68f8      	ldr	r0, [r7, #12]
 80093f8:	f7fe fd3d 	bl	8007e76 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d002      	beq.n	8009408 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8009402:	f04f 33ff 	mov.w	r3, #4294967295
 8009406:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009408:	6879      	ldr	r1, [r7, #4]
 800940a:	68b8      	ldr	r0, [r7, #8]
 800940c:	f000 fa62 	bl	80098d4 <prvAddCurrentTaskToDelayedList>
	}
 8009410:	bf00      	nop
 8009412:	3718      	adds	r7, #24
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}
 8009418:	200003c8 	.word	0x200003c8

0800941c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	68db      	ldr	r3, [r3, #12]
 800942a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d109      	bne.n	8009446 <xTaskRemoveFromEventList+0x2a>
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60fb      	str	r3, [r7, #12]
 8009444:	e7fe      	b.n	8009444 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	3318      	adds	r3, #24
 800944a:	4618      	mov	r0, r3
 800944c:	f7fe fd6e 	bl	8007f2c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009450:	4b1d      	ldr	r3, [pc, #116]	; (80094c8 <xTaskRemoveFromEventList+0xac>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d11c      	bne.n	8009492 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	3304      	adds	r3, #4
 800945c:	4618      	mov	r0, r3
 800945e:	f7fe fd65 	bl	8007f2c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009462:	693b      	ldr	r3, [r7, #16]
 8009464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009466:	2201      	movs	r2, #1
 8009468:	409a      	lsls	r2, r3
 800946a:	4b18      	ldr	r3, [pc, #96]	; (80094cc <xTaskRemoveFromEventList+0xb0>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4313      	orrs	r3, r2
 8009470:	4a16      	ldr	r2, [pc, #88]	; (80094cc <xTaskRemoveFromEventList+0xb0>)
 8009472:	6013      	str	r3, [r2, #0]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4a13      	ldr	r2, [pc, #76]	; (80094d0 <xTaskRemoveFromEventList+0xb4>)
 8009482:	441a      	add	r2, r3
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	3304      	adds	r3, #4
 8009488:	4619      	mov	r1, r3
 800948a:	4610      	mov	r0, r2
 800948c:	f7fe fcf3 	bl	8007e76 <vListInsertEnd>
 8009490:	e005      	b.n	800949e <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	3318      	adds	r3, #24
 8009496:	4619      	mov	r1, r3
 8009498:	480e      	ldr	r0, [pc, #56]	; (80094d4 <xTaskRemoveFromEventList+0xb8>)
 800949a:	f7fe fcec 	bl	8007e76 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094a2:	4b0d      	ldr	r3, [pc, #52]	; (80094d8 <xTaskRemoveFromEventList+0xbc>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d905      	bls.n	80094b8 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094ac:	2301      	movs	r3, #1
 80094ae:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094b0:	4b0a      	ldr	r3, [pc, #40]	; (80094dc <xTaskRemoveFromEventList+0xc0>)
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e001      	b.n	80094bc <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 80094b8:	2300      	movs	r3, #0
 80094ba:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80094bc:	697b      	ldr	r3, [r7, #20]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3718      	adds	r7, #24
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	200004f0 	.word	0x200004f0
 80094cc:	200004d0 	.word	0x200004d0
 80094d0:	200003cc 	.word	0x200003cc
 80094d4:	20000488 	.word	0x20000488
 80094d8:	200003c8 	.word	0x200003c8
 80094dc:	200004dc 	.word	0x200004dc

080094e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80094e8:	4b06      	ldr	r3, [pc, #24]	; (8009504 <vTaskInternalSetTimeOutState+0x24>)
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80094f0:	4b05      	ldr	r3, [pc, #20]	; (8009508 <vTaskInternalSetTimeOutState+0x28>)
 80094f2:	681a      	ldr	r2, [r3, #0]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	605a      	str	r2, [r3, #4]
}
 80094f8:	bf00      	nop
 80094fa:	370c      	adds	r7, #12
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bc80      	pop	{r7}
 8009500:	4770      	bx	lr
 8009502:	bf00      	nop
 8009504:	200004e0 	.word	0x200004e0
 8009508:	200004cc 	.word	0x200004cc

0800950c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b088      	sub	sp, #32
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d109      	bne.n	8009530 <xTaskCheckForTimeOut+0x24>
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	613b      	str	r3, [r7, #16]
 800952e:	e7fe      	b.n	800952e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d109      	bne.n	800954a <xTaskCheckForTimeOut+0x3e>
 8009536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800953a:	f383 8811 	msr	BASEPRI, r3
 800953e:	f3bf 8f6f 	isb	sy
 8009542:	f3bf 8f4f 	dsb	sy
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	e7fe      	b.n	8009548 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800954a:	f000 fe95 	bl	800a278 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800954e:	4b1d      	ldr	r3, [pc, #116]	; (80095c4 <xTaskCheckForTimeOut+0xb8>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	69ba      	ldr	r2, [r7, #24]
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009566:	d102      	bne.n	800956e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009568:	2300      	movs	r3, #0
 800956a:	61fb      	str	r3, [r7, #28]
 800956c:	e023      	b.n	80095b6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	4b15      	ldr	r3, [pc, #84]	; (80095c8 <xTaskCheckForTimeOut+0xbc>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	429a      	cmp	r2, r3
 8009578:	d007      	beq.n	800958a <xTaskCheckForTimeOut+0x7e>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	69ba      	ldr	r2, [r7, #24]
 8009580:	429a      	cmp	r2, r3
 8009582:	d302      	bcc.n	800958a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009584:	2301      	movs	r3, #1
 8009586:	61fb      	str	r3, [r7, #28]
 8009588:	e015      	b.n	80095b6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	697a      	ldr	r2, [r7, #20]
 8009590:	429a      	cmp	r2, r3
 8009592:	d20b      	bcs.n	80095ac <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	681a      	ldr	r2, [r3, #0]
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	1ad2      	subs	r2, r2, r3
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f7ff ff9d 	bl	80094e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095a6:	2300      	movs	r3, #0
 80095a8:	61fb      	str	r3, [r7, #28]
 80095aa:	e004      	b.n	80095b6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095b2:	2301      	movs	r3, #1
 80095b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80095b6:	f000 fe8d 	bl	800a2d4 <vPortExitCritical>

	return xReturn;
 80095ba:	69fb      	ldr	r3, [r7, #28]
}
 80095bc:	4618      	mov	r0, r3
 80095be:	3720      	adds	r7, #32
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}
 80095c4:	200004cc 	.word	0x200004cc
 80095c8:	200004e0 	.word	0x200004e0

080095cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80095cc:	b480      	push	{r7}
 80095ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80095d0:	4b03      	ldr	r3, [pc, #12]	; (80095e0 <vTaskMissedYield+0x14>)
 80095d2:	2201      	movs	r2, #1
 80095d4:	601a      	str	r2, [r3, #0]
}
 80095d6:	bf00      	nop
 80095d8:	46bd      	mov	sp, r7
 80095da:	bc80      	pop	{r7}
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	200004dc 	.word	0x200004dc

080095e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b082      	sub	sp, #8
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80095ec:	f000 f852 	bl	8009694 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80095f0:	4b06      	ldr	r3, [pc, #24]	; (800960c <prvIdleTask+0x28>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d9f9      	bls.n	80095ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80095f8:	4b05      	ldr	r3, [pc, #20]	; (8009610 <prvIdleTask+0x2c>)
 80095fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	f3bf 8f4f 	dsb	sy
 8009604:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009608:	e7f0      	b.n	80095ec <prvIdleTask+0x8>
 800960a:	bf00      	nop
 800960c:	200003cc 	.word	0x200003cc
 8009610:	e000ed04 	.word	0xe000ed04

08009614 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800961a:	2300      	movs	r3, #0
 800961c:	607b      	str	r3, [r7, #4]
 800961e:	e00c      	b.n	800963a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009620:	687a      	ldr	r2, [r7, #4]
 8009622:	4613      	mov	r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	4a12      	ldr	r2, [pc, #72]	; (8009674 <prvInitialiseTaskLists+0x60>)
 800962c:	4413      	add	r3, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f7fe fbf6 	bl	8007e20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	3301      	adds	r3, #1
 8009638:	607b      	str	r3, [r7, #4]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b06      	cmp	r3, #6
 800963e:	d9ef      	bls.n	8009620 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009640:	480d      	ldr	r0, [pc, #52]	; (8009678 <prvInitialiseTaskLists+0x64>)
 8009642:	f7fe fbed 	bl	8007e20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009646:	480d      	ldr	r0, [pc, #52]	; (800967c <prvInitialiseTaskLists+0x68>)
 8009648:	f7fe fbea 	bl	8007e20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800964c:	480c      	ldr	r0, [pc, #48]	; (8009680 <prvInitialiseTaskLists+0x6c>)
 800964e:	f7fe fbe7 	bl	8007e20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009652:	480c      	ldr	r0, [pc, #48]	; (8009684 <prvInitialiseTaskLists+0x70>)
 8009654:	f7fe fbe4 	bl	8007e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009658:	480b      	ldr	r0, [pc, #44]	; (8009688 <prvInitialiseTaskLists+0x74>)
 800965a:	f7fe fbe1 	bl	8007e20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800965e:	4b0b      	ldr	r3, [pc, #44]	; (800968c <prvInitialiseTaskLists+0x78>)
 8009660:	4a05      	ldr	r2, [pc, #20]	; (8009678 <prvInitialiseTaskLists+0x64>)
 8009662:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009664:	4b0a      	ldr	r3, [pc, #40]	; (8009690 <prvInitialiseTaskLists+0x7c>)
 8009666:	4a05      	ldr	r2, [pc, #20]	; (800967c <prvInitialiseTaskLists+0x68>)
 8009668:	601a      	str	r2, [r3, #0]
}
 800966a:	bf00      	nop
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}
 8009672:	bf00      	nop
 8009674:	200003cc 	.word	0x200003cc
 8009678:	20000458 	.word	0x20000458
 800967c:	2000046c 	.word	0x2000046c
 8009680:	20000488 	.word	0x20000488
 8009684:	2000049c 	.word	0x2000049c
 8009688:	200004b4 	.word	0x200004b4
 800968c:	20000480 	.word	0x20000480
 8009690:	20000484 	.word	0x20000484

08009694 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800969a:	e019      	b.n	80096d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800969c:	f000 fdec 	bl	800a278 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <prvCheckTasksWaitingTermination+0x4c>)
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	68db      	ldr	r3, [r3, #12]
 80096a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	3304      	adds	r3, #4
 80096ac:	4618      	mov	r0, r3
 80096ae:	f7fe fc3d 	bl	8007f2c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096b2:	4b0c      	ldr	r3, [pc, #48]	; (80096e4 <prvCheckTasksWaitingTermination+0x50>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	4a0a      	ldr	r2, [pc, #40]	; (80096e4 <prvCheckTasksWaitingTermination+0x50>)
 80096ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096bc:	4b0a      	ldr	r3, [pc, #40]	; (80096e8 <prvCheckTasksWaitingTermination+0x54>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	3b01      	subs	r3, #1
 80096c2:	4a09      	ldr	r2, [pc, #36]	; (80096e8 <prvCheckTasksWaitingTermination+0x54>)
 80096c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80096c6:	f000 fe05 	bl	800a2d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f80e 	bl	80096ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096d0:	4b05      	ldr	r3, [pc, #20]	; (80096e8 <prvCheckTasksWaitingTermination+0x54>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d1e1      	bne.n	800969c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80096d8:	bf00      	nop
 80096da:	3708      	adds	r7, #8
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	2000049c 	.word	0x2000049c
 80096e4:	200004c8 	.word	0x200004c8
 80096e8:	200004b0 	.word	0x200004b0

080096ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d108      	bne.n	8009710 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009702:	4618      	mov	r0, r3
 8009704:	f000 ff70 	bl	800a5e8 <vPortFree>
				vPortFree( pxTCB );
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 ff6d 	bl	800a5e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800970e:	e017      	b.n	8009740 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009716:	2b01      	cmp	r3, #1
 8009718:	d103      	bne.n	8009722 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 ff64 	bl	800a5e8 <vPortFree>
	}
 8009720:	e00e      	b.n	8009740 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009728:	2b02      	cmp	r3, #2
 800972a:	d009      	beq.n	8009740 <prvDeleteTCB+0x54>
 800972c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009730:	f383 8811 	msr	BASEPRI, r3
 8009734:	f3bf 8f6f 	isb	sy
 8009738:	f3bf 8f4f 	dsb	sy
 800973c:	60fb      	str	r3, [r7, #12]
 800973e:	e7fe      	b.n	800973e <prvDeleteTCB+0x52>
	}
 8009740:	bf00      	nop
 8009742:	3710      	adds	r7, #16
 8009744:	46bd      	mov	sp, r7
 8009746:	bd80      	pop	{r7, pc}

08009748 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800974e:	4b0e      	ldr	r3, [pc, #56]	; (8009788 <prvResetNextTaskUnblockTime+0x40>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <prvResetNextTaskUnblockTime+0x14>
 8009758:	2301      	movs	r3, #1
 800975a:	e000      	b.n	800975e <prvResetNextTaskUnblockTime+0x16>
 800975c:	2300      	movs	r3, #0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d004      	beq.n	800976c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009762:	4b0a      	ldr	r3, [pc, #40]	; (800978c <prvResetNextTaskUnblockTime+0x44>)
 8009764:	f04f 32ff 	mov.w	r2, #4294967295
 8009768:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800976a:	e008      	b.n	800977e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800976c:	4b06      	ldr	r3, [pc, #24]	; (8009788 <prvResetNextTaskUnblockTime+0x40>)
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	68db      	ldr	r3, [r3, #12]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	4a04      	ldr	r2, [pc, #16]	; (800978c <prvResetNextTaskUnblockTime+0x44>)
 800977c:	6013      	str	r3, [r2, #0]
}
 800977e:	bf00      	nop
 8009780:	370c      	adds	r7, #12
 8009782:	46bd      	mov	sp, r7
 8009784:	bc80      	pop	{r7}
 8009786:	4770      	bx	lr
 8009788:	20000480 	.word	0x20000480
 800978c:	200004e8 	.word	0x200004e8

08009790 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009796:	4b0b      	ldr	r3, [pc, #44]	; (80097c4 <xTaskGetSchedulerState+0x34>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d102      	bne.n	80097a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800979e:	2301      	movs	r3, #1
 80097a0:	607b      	str	r3, [r7, #4]
 80097a2:	e008      	b.n	80097b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80097a4:	4b08      	ldr	r3, [pc, #32]	; (80097c8 <xTaskGetSchedulerState+0x38>)
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d102      	bne.n	80097b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80097ac:	2302      	movs	r3, #2
 80097ae:	607b      	str	r3, [r7, #4]
 80097b0:	e001      	b.n	80097b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80097b2:	2300      	movs	r3, #0
 80097b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80097b6:	687b      	ldr	r3, [r7, #4]
	}
 80097b8:	4618      	mov	r0, r3
 80097ba:	370c      	adds	r7, #12
 80097bc:	46bd      	mov	sp, r7
 80097be:	bc80      	pop	{r7}
 80097c0:	4770      	bx	lr
 80097c2:	bf00      	nop
 80097c4:	200004d4 	.word	0x200004d4
 80097c8:	200004f0 	.word	0x200004f0

080097cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80097d8:	2300      	movs	r3, #0
 80097da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d06c      	beq.n	80098bc <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097e2:	4b39      	ldr	r3, [pc, #228]	; (80098c8 <xTaskPriorityDisinherit+0xfc>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	693a      	ldr	r2, [r7, #16]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d009      	beq.n	8009800 <xTaskPriorityDisinherit+0x34>
 80097ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f0:	f383 8811 	msr	BASEPRI, r3
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	f3bf 8f4f 	dsb	sy
 80097fc:	60fb      	str	r3, [r7, #12]
 80097fe:	e7fe      	b.n	80097fe <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009804:	2b00      	cmp	r3, #0
 8009806:	d109      	bne.n	800981c <xTaskPriorityDisinherit+0x50>
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	60bb      	str	r3, [r7, #8]
 800981a:	e7fe      	b.n	800981a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009820:	1e5a      	subs	r2, r3, #1
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800982e:	429a      	cmp	r2, r3
 8009830:	d044      	beq.n	80098bc <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009836:	2b00      	cmp	r3, #0
 8009838:	d140      	bne.n	80098bc <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800983a:	693b      	ldr	r3, [r7, #16]
 800983c:	3304      	adds	r3, #4
 800983e:	4618      	mov	r0, r3
 8009840:	f7fe fb74 	bl	8007f2c <uxListRemove>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d115      	bne.n	8009876 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800984e:	491f      	ldr	r1, [pc, #124]	; (80098cc <xTaskPriorityDisinherit+0x100>)
 8009850:	4613      	mov	r3, r2
 8009852:	009b      	lsls	r3, r3, #2
 8009854:	4413      	add	r3, r2
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	440b      	add	r3, r1
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d10a      	bne.n	8009876 <xTaskPriorityDisinherit+0xaa>
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009864:	2201      	movs	r2, #1
 8009866:	fa02 f303 	lsl.w	r3, r2, r3
 800986a:	43da      	mvns	r2, r3
 800986c:	4b18      	ldr	r3, [pc, #96]	; (80098d0 <xTaskPriorityDisinherit+0x104>)
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4013      	ands	r3, r2
 8009872:	4a17      	ldr	r2, [pc, #92]	; (80098d0 <xTaskPriorityDisinherit+0x104>)
 8009874:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009882:	f1c3 0207 	rsb	r2, r3, #7
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800988e:	2201      	movs	r2, #1
 8009890:	409a      	lsls	r2, r3
 8009892:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <xTaskPriorityDisinherit+0x104>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4313      	orrs	r3, r2
 8009898:	4a0d      	ldr	r2, [pc, #52]	; (80098d0 <xTaskPriorityDisinherit+0x104>)
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4a08      	ldr	r2, [pc, #32]	; (80098cc <xTaskPriorityDisinherit+0x100>)
 80098aa:	441a      	add	r2, r3
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	3304      	adds	r3, #4
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f7fe fadf 	bl	8007e76 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098b8:	2301      	movs	r3, #1
 80098ba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098bc:	697b      	ldr	r3, [r7, #20]
	}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	200003c8 	.word	0x200003c8
 80098cc:	200003cc 	.word	0x200003cc
 80098d0:	200004d0 	.word	0x200004d0

080098d4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80098de:	4b29      	ldr	r3, [pc, #164]	; (8009984 <prvAddCurrentTaskToDelayedList+0xb0>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098e4:	4b28      	ldr	r3, [pc, #160]	; (8009988 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	3304      	adds	r3, #4
 80098ea:	4618      	mov	r0, r3
 80098ec:	f7fe fb1e 	bl	8007f2c <uxListRemove>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d10b      	bne.n	800990e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80098f6:	4b24      	ldr	r3, [pc, #144]	; (8009988 <prvAddCurrentTaskToDelayedList+0xb4>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098fc:	2201      	movs	r2, #1
 80098fe:	fa02 f303 	lsl.w	r3, r2, r3
 8009902:	43da      	mvns	r2, r3
 8009904:	4b21      	ldr	r3, [pc, #132]	; (800998c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	4013      	ands	r3, r2
 800990a:	4a20      	ldr	r2, [pc, #128]	; (800998c <prvAddCurrentTaskToDelayedList+0xb8>)
 800990c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009914:	d10a      	bne.n	800992c <prvAddCurrentTaskToDelayedList+0x58>
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d007      	beq.n	800992c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800991c:	4b1a      	ldr	r3, [pc, #104]	; (8009988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3304      	adds	r3, #4
 8009922:	4619      	mov	r1, r3
 8009924:	481a      	ldr	r0, [pc, #104]	; (8009990 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009926:	f7fe faa6 	bl	8007e76 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800992a:	e026      	b.n	800997a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800992c:	68fa      	ldr	r2, [r7, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4413      	add	r3, r2
 8009932:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009934:	4b14      	ldr	r3, [pc, #80]	; (8009988 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	68ba      	ldr	r2, [r7, #8]
 800993a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	429a      	cmp	r2, r3
 8009942:	d209      	bcs.n	8009958 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009944:	4b13      	ldr	r3, [pc, #76]	; (8009994 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009946:	681a      	ldr	r2, [r3, #0]
 8009948:	4b0f      	ldr	r3, [pc, #60]	; (8009988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3304      	adds	r3, #4
 800994e:	4619      	mov	r1, r3
 8009950:	4610      	mov	r0, r2
 8009952:	f7fe fab3 	bl	8007ebc <vListInsert>
}
 8009956:	e010      	b.n	800997a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009958:	4b0f      	ldr	r3, [pc, #60]	; (8009998 <prvAddCurrentTaskToDelayedList+0xc4>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	4b0a      	ldr	r3, [pc, #40]	; (8009988 <prvAddCurrentTaskToDelayedList+0xb4>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	3304      	adds	r3, #4
 8009962:	4619      	mov	r1, r3
 8009964:	4610      	mov	r0, r2
 8009966:	f7fe faa9 	bl	8007ebc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800996a:	4b0c      	ldr	r3, [pc, #48]	; (800999c <prvAddCurrentTaskToDelayedList+0xc8>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	68ba      	ldr	r2, [r7, #8]
 8009970:	429a      	cmp	r2, r3
 8009972:	d202      	bcs.n	800997a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009974:	4a09      	ldr	r2, [pc, #36]	; (800999c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	6013      	str	r3, [r2, #0]
}
 800997a:	bf00      	nop
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	200004cc 	.word	0x200004cc
 8009988:	200003c8 	.word	0x200003c8
 800998c:	200004d0 	.word	0x200004d0
 8009990:	200004b4 	.word	0x200004b4
 8009994:	20000484 	.word	0x20000484
 8009998:	20000480 	.word	0x20000480
 800999c:	200004e8 	.word	0x200004e8

080099a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b08a      	sub	sp, #40	; 0x28
 80099a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099a6:	2300      	movs	r3, #0
 80099a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099aa:	f000 fb37 	bl	800a01c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099ae:	4b1c      	ldr	r3, [pc, #112]	; (8009a20 <xTimerCreateTimerTask+0x80>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d021      	beq.n	80099fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099be:	1d3a      	adds	r2, r7, #4
 80099c0:	f107 0108 	add.w	r1, r7, #8
 80099c4:	f107 030c 	add.w	r3, r7, #12
 80099c8:	4618      	mov	r0, r3
 80099ca:	f7f7 fd91 	bl	80014f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099ce:	6879      	ldr	r1, [r7, #4]
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	9202      	str	r2, [sp, #8]
 80099d6:	9301      	str	r3, [sp, #4]
 80099d8:	2302      	movs	r3, #2
 80099da:	9300      	str	r3, [sp, #0]
 80099dc:	2300      	movs	r3, #0
 80099de:	460a      	mov	r2, r1
 80099e0:	4910      	ldr	r1, [pc, #64]	; (8009a24 <xTimerCreateTimerTask+0x84>)
 80099e2:	4811      	ldr	r0, [pc, #68]	; (8009a28 <xTimerCreateTimerTask+0x88>)
 80099e4:	f7ff f856 	bl	8008a94 <xTaskCreateStatic>
 80099e8:	4602      	mov	r2, r0
 80099ea:	4b10      	ldr	r3, [pc, #64]	; (8009a2c <xTimerCreateTimerTask+0x8c>)
 80099ec:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80099ee:	4b0f      	ldr	r3, [pc, #60]	; (8009a2c <xTimerCreateTimerTask+0x8c>)
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d001      	beq.n	80099fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80099f6:	2301      	movs	r3, #1
 80099f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d109      	bne.n	8009a14 <xTimerCreateTimerTask+0x74>
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	613b      	str	r3, [r7, #16]
 8009a12:	e7fe      	b.n	8009a12 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8009a14:	697b      	ldr	r3, [r7, #20]
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	20000524 	.word	0x20000524
 8009a24:	0800b2f4 	.word	0x0800b2f4
 8009a28:	08009c65 	.word	0x08009c65
 8009a2c:	20000528 	.word	0x20000528

08009a30 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8009a30:	b580      	push	{r7, lr}
 8009a32:	b088      	sub	sp, #32
 8009a34:	af02      	add	r7, sp, #8
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8009a3e:	202c      	movs	r0, #44	; 0x2c
 8009a40:	f000 fd10 	bl	800a464 <pvPortMalloc>
 8009a44:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8009a46:	697b      	ldr	r3, [r7, #20]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00d      	beq.n	8009a68 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	9301      	str	r3, [sp, #4]
 8009a50:	6a3b      	ldr	r3, [r7, #32]
 8009a52:	9300      	str	r3, [sp, #0]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	687a      	ldr	r2, [r7, #4]
 8009a58:	68b9      	ldr	r1, [r7, #8]
 8009a5a:	68f8      	ldr	r0, [r7, #12]
 8009a5c:	f000 f844 	bl	8009ae8 <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	2200      	movs	r2, #0
 8009a64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8009a68:	697b      	ldr	r3, [r7, #20]
	}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b08a      	sub	sp, #40	; 0x28
 8009a76:	af02      	add	r7, sp, #8
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	60b9      	str	r1, [r7, #8]
 8009a7c:	607a      	str	r2, [r7, #4]
 8009a7e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8009a80:	232c      	movs	r3, #44	; 0x2c
 8009a82:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	2b2c      	cmp	r3, #44	; 0x2c
 8009a88:	d009      	beq.n	8009a9e <xTimerCreateStatic+0x2c>
 8009a8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8e:	f383 8811 	msr	BASEPRI, r3
 8009a92:	f3bf 8f6f 	isb	sy
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	61bb      	str	r3, [r7, #24]
 8009a9c:	e7fe      	b.n	8009a9c <xTimerCreateStatic+0x2a>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d109      	bne.n	8009ab8 <xTimerCreateStatic+0x46>
 8009aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	617b      	str	r3, [r7, #20]
 8009ab6:	e7fe      	b.n	8009ab6 <xTimerCreateStatic+0x44>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aba:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00d      	beq.n	8009ade <xTimerCreateStatic+0x6c>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009ac2:	69fb      	ldr	r3, [r7, #28]
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f000 f809 	bl	8009ae8 <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 8009ade:	69fb      	ldr	r3, [r7, #28]
	}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3720      	adds	r7, #32
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
 8009af4:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d109      	bne.n	8009b10 <prvInitialiseNewTimer+0x28>
 8009afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b00:	f383 8811 	msr	BASEPRI, r3
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	f3bf 8f4f 	dsb	sy
 8009b0c:	617b      	str	r3, [r7, #20]
 8009b0e:	e7fe      	b.n	8009b0e <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8009b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d015      	beq.n	8009b42 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009b16:	f000 fa81 	bl	800a01c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	68fa      	ldr	r2, [r7, #12]
 8009b1e:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8009b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b22:	68ba      	ldr	r2, [r7, #8]
 8009b24:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8009b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	6a3a      	ldr	r2, [r7, #32]
 8009b36:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8009b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe f98e 	bl	8007e5e <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8009b42:	bf00      	nop
 8009b44:	3718      	adds	r7, #24
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
	...

08009b4c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b08a      	sub	sp, #40	; 0x28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	60f8      	str	r0, [r7, #12]
 8009b54:	60b9      	str	r1, [r7, #8]
 8009b56:	607a      	str	r2, [r7, #4]
 8009b58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d109      	bne.n	8009b78 <xTimerGenericCommand+0x2c>
 8009b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b68:	f383 8811 	msr	BASEPRI, r3
 8009b6c:	f3bf 8f6f 	isb	sy
 8009b70:	f3bf 8f4f 	dsb	sy
 8009b74:	623b      	str	r3, [r7, #32]
 8009b76:	e7fe      	b.n	8009b76 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009b78:	4b19      	ldr	r3, [pc, #100]	; (8009be0 <xTimerGenericCommand+0x94>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d02a      	beq.n	8009bd6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	2b05      	cmp	r3, #5
 8009b90:	dc18      	bgt.n	8009bc4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b92:	f7ff fdfd 	bl	8009790 <xTaskGetSchedulerState>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d109      	bne.n	8009bb0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b9c:	4b10      	ldr	r3, [pc, #64]	; (8009be0 <xTimerGenericCommand+0x94>)
 8009b9e:	6818      	ldr	r0, [r3, #0]
 8009ba0:	f107 0114 	add.w	r1, r7, #20
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ba8:	f7fe fb20 	bl	80081ec <xQueueGenericSend>
 8009bac:	6278      	str	r0, [r7, #36]	; 0x24
 8009bae:	e012      	b.n	8009bd6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009bb0:	4b0b      	ldr	r3, [pc, #44]	; (8009be0 <xTimerGenericCommand+0x94>)
 8009bb2:	6818      	ldr	r0, [r3, #0]
 8009bb4:	f107 0114 	add.w	r1, r7, #20
 8009bb8:	2300      	movs	r3, #0
 8009bba:	2200      	movs	r2, #0
 8009bbc:	f7fe fb16 	bl	80081ec <xQueueGenericSend>
 8009bc0:	6278      	str	r0, [r7, #36]	; 0x24
 8009bc2:	e008      	b.n	8009bd6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009bc4:	4b06      	ldr	r3, [pc, #24]	; (8009be0 <xTimerGenericCommand+0x94>)
 8009bc6:	6818      	ldr	r0, [r3, #0]
 8009bc8:	f107 0114 	add.w	r1, r7, #20
 8009bcc:	2300      	movs	r3, #0
 8009bce:	683a      	ldr	r2, [r7, #0]
 8009bd0:	f7fe fc06 	bl	80083e0 <xQueueGenericSendFromISR>
 8009bd4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009bd8:	4618      	mov	r0, r3
 8009bda:	3728      	adds	r7, #40	; 0x28
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	20000524 	.word	0x20000524

08009be4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009bee:	4b1c      	ldr	r3, [pc, #112]	; (8009c60 <prvProcessExpiredTimer+0x7c>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68db      	ldr	r3, [r3, #12]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	3304      	adds	r3, #4
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	f7fe f995 	bl	8007f2c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	69db      	ldr	r3, [r3, #28]
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d121      	bne.n	8009c4e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	699a      	ldr	r2, [r3, #24]
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	18d1      	adds	r1, r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	6978      	ldr	r0, [r7, #20]
 8009c18:	f000 f8c8 	bl	8009dac <prvInsertTimerInActiveList>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d015      	beq.n	8009c4e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c22:	2300      	movs	r3, #0
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	2300      	movs	r3, #0
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	2100      	movs	r1, #0
 8009c2c:	6978      	ldr	r0, [r7, #20]
 8009c2e:	f7ff ff8d 	bl	8009b4c <xTimerGenericCommand>
 8009c32:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c34:	693b      	ldr	r3, [r7, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d109      	bne.n	8009c4e <prvProcessExpiredTimer+0x6a>
 8009c3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c3e:	f383 8811 	msr	BASEPRI, r3
 8009c42:	f3bf 8f6f 	isb	sy
 8009c46:	f3bf 8f4f 	dsb	sy
 8009c4a:	60fb      	str	r3, [r7, #12]
 8009c4c:	e7fe      	b.n	8009c4c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c52:	6978      	ldr	r0, [r7, #20]
 8009c54:	4798      	blx	r3
}
 8009c56:	bf00      	nop
 8009c58:	3718      	adds	r7, #24
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	bd80      	pop	{r7, pc}
 8009c5e:	bf00      	nop
 8009c60:	2000051c 	.word	0x2000051c

08009c64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c6c:	f107 0308 	add.w	r3, r7, #8
 8009c70:	4618      	mov	r0, r3
 8009c72:	f000 f857 	bl	8009d24 <prvGetNextExpireTime>
 8009c76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	68f8      	ldr	r0, [r7, #12]
 8009c7e:	f000 f803 	bl	8009c88 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009c82:	f000 f8d5 	bl	8009e30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009c86:	e7f1      	b.n	8009c6c <prvTimerTask+0x8>

08009c88 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009c92:	f7ff f997 	bl	8008fc4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009c96:	f107 0308 	add.w	r3, r7, #8
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f866 	bl	8009d6c <prvSampleTimeNow>
 8009ca0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d130      	bne.n	8009d0a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d10a      	bne.n	8009cc4 <prvProcessTimerOrBlockTask+0x3c>
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d806      	bhi.n	8009cc4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009cb6:	f7ff f993 	bl	8008fe0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ff91 	bl	8009be4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009cc2:	e024      	b.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d008      	beq.n	8009cdc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cca:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <prvProcessTimerOrBlockTask+0x90>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	bf0c      	ite	eq
 8009cd4:	2301      	moveq	r3, #1
 8009cd6:	2300      	movne	r3, #0
 8009cd8:	b2db      	uxtb	r3, r3
 8009cda:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cdc:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <prvProcessTimerOrBlockTask+0x94>)
 8009cde:	6818      	ldr	r0, [r3, #0]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	683a      	ldr	r2, [r7, #0]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	f7fe fe9f 	bl	8008a2c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cee:	f7ff f977 	bl	8008fe0 <xTaskResumeAll>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d10a      	bne.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009cf8:	4b09      	ldr	r3, [pc, #36]	; (8009d20 <prvProcessTimerOrBlockTask+0x98>)
 8009cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cfe:	601a      	str	r2, [r3, #0]
 8009d00:	f3bf 8f4f 	dsb	sy
 8009d04:	f3bf 8f6f 	isb	sy
}
 8009d08:	e001      	b.n	8009d0e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d0a:	f7ff f969 	bl	8008fe0 <xTaskResumeAll>
}
 8009d0e:	bf00      	nop
 8009d10:	3710      	adds	r7, #16
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}
 8009d16:	bf00      	nop
 8009d18:	20000520 	.word	0x20000520
 8009d1c:	20000524 	.word	0x20000524
 8009d20:	e000ed04 	.word	0xe000ed04

08009d24 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009d24:	b480      	push	{r7}
 8009d26:	b085      	sub	sp, #20
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009d2c:	4b0e      	ldr	r3, [pc, #56]	; (8009d68 <prvGetNextExpireTime+0x44>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bf0c      	ite	eq
 8009d36:	2301      	moveq	r3, #1
 8009d38:	2300      	movne	r3, #0
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d105      	bne.n	8009d56 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009d4a:	4b07      	ldr	r3, [pc, #28]	; (8009d68 <prvGetNextExpireTime+0x44>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e001      	b.n	8009d5a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
}
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	3714      	adds	r7, #20
 8009d60:	46bd      	mov	sp, r7
 8009d62:	bc80      	pop	{r7}
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	2000051c 	.word	0x2000051c

08009d6c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b084      	sub	sp, #16
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009d74:	f7ff f9d0 	bl	8009118 <xTaskGetTickCount>
 8009d78:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009d7a:	4b0b      	ldr	r3, [pc, #44]	; (8009da8 <prvSampleTimeNow+0x3c>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d205      	bcs.n	8009d90 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009d84:	f000 f8ea 	bl	8009f5c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]
 8009d8e:	e002      	b.n	8009d96 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2200      	movs	r2, #0
 8009d94:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009d96:	4a04      	ldr	r2, [pc, #16]	; (8009da8 <prvSampleTimeNow+0x3c>)
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}
 8009da6:	bf00      	nop
 8009da8:	2000052c 	.word	0x2000052c

08009dac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b086      	sub	sp, #24
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	607a      	str	r2, [r7, #4]
 8009db8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	68ba      	ldr	r2, [r7, #8]
 8009dc2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	68fa      	ldr	r2, [r7, #12]
 8009dc8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009dca:	68ba      	ldr	r2, [r7, #8]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	429a      	cmp	r2, r3
 8009dd0:	d812      	bhi.n	8009df8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	1ad2      	subs	r2, r2, r3
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	699b      	ldr	r3, [r3, #24]
 8009ddc:	429a      	cmp	r2, r3
 8009dde:	d302      	bcc.n	8009de6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009de0:	2301      	movs	r3, #1
 8009de2:	617b      	str	r3, [r7, #20]
 8009de4:	e01b      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009de6:	4b10      	ldr	r3, [pc, #64]	; (8009e28 <prvInsertTimerInActiveList+0x7c>)
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	3304      	adds	r3, #4
 8009dee:	4619      	mov	r1, r3
 8009df0:	4610      	mov	r0, r2
 8009df2:	f7fe f863 	bl	8007ebc <vListInsert>
 8009df6:	e012      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	429a      	cmp	r2, r3
 8009dfe:	d206      	bcs.n	8009e0e <prvInsertTimerInActiveList+0x62>
 8009e00:	68ba      	ldr	r2, [r7, #8]
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d302      	bcc.n	8009e0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	e007      	b.n	8009e1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e0e:	4b07      	ldr	r3, [pc, #28]	; (8009e2c <prvInsertTimerInActiveList+0x80>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	3304      	adds	r3, #4
 8009e16:	4619      	mov	r1, r3
 8009e18:	4610      	mov	r0, r2
 8009e1a:	f7fe f84f 	bl	8007ebc <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e1e:	697b      	ldr	r3, [r7, #20]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3718      	adds	r7, #24
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	20000520 	.word	0x20000520
 8009e2c:	2000051c 	.word	0x2000051c

08009e30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b08c      	sub	sp, #48	; 0x30
 8009e34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009e36:	e07f      	b.n	8009f38 <prvProcessReceivedCommands+0x108>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	db7b      	blt.n	8009f36 <prvProcessReceivedCommands+0x106>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d004      	beq.n	8009e54 <prvProcessReceivedCommands+0x24>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4c:	3304      	adds	r3, #4
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe f86c 	bl	8007f2c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e54:	1d3b      	adds	r3, r7, #4
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7ff ff88 	bl	8009d6c <prvSampleTimeNow>
 8009e5c:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	2b09      	cmp	r3, #9
 8009e62:	d869      	bhi.n	8009f38 <prvProcessReceivedCommands+0x108>
 8009e64:	a201      	add	r2, pc, #4	; (adr r2, 8009e6c <prvProcessReceivedCommands+0x3c>)
 8009e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e6a:	bf00      	nop
 8009e6c:	08009e95 	.word	0x08009e95
 8009e70:	08009e95 	.word	0x08009e95
 8009e74:	08009e95 	.word	0x08009e95
 8009e78:	08009f39 	.word	0x08009f39
 8009e7c:	08009eef 	.word	0x08009eef
 8009e80:	08009f25 	.word	0x08009f25
 8009e84:	08009e95 	.word	0x08009e95
 8009e88:	08009e95 	.word	0x08009e95
 8009e8c:	08009f39 	.word	0x08009f39
 8009e90:	08009eef 	.word	0x08009eef
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009e94:	68fa      	ldr	r2, [r7, #12]
 8009e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e98:	699b      	ldr	r3, [r3, #24]
 8009e9a:	18d1      	adds	r1, r2, r3
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a3a      	ldr	r2, [r7, #32]
 8009ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ea2:	f7ff ff83 	bl	8009dac <prvInsertTimerInActiveList>
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d045      	beq.n	8009f38 <prvProcessReceivedCommands+0x108>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009eb2:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d13d      	bne.n	8009f38 <prvProcessReceivedCommands+0x108>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009ebc:	68fa      	ldr	r2, [r7, #12]
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec0:	699b      	ldr	r3, [r3, #24]
 8009ec2:	441a      	add	r2, r3
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	2300      	movs	r3, #0
 8009eca:	2100      	movs	r1, #0
 8009ecc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009ece:	f7ff fe3d 	bl	8009b4c <xTimerGenericCommand>
 8009ed2:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d12e      	bne.n	8009f38 <prvProcessReceivedCommands+0x108>
 8009eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ede:	f383 8811 	msr	BASEPRI, r3
 8009ee2:	f3bf 8f6f 	isb	sy
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	61bb      	str	r3, [r7, #24]
 8009eec:	e7fe      	b.n	8009eec <prvProcessReceivedCommands+0xbc>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009eee:	68fa      	ldr	r2, [r7, #12]
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef6:	699b      	ldr	r3, [r3, #24]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d109      	bne.n	8009f10 <prvProcessReceivedCommands+0xe0>
 8009efc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	617b      	str	r3, [r7, #20]
 8009f0e:	e7fe      	b.n	8009f0e <prvProcessReceivedCommands+0xde>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f12:	699a      	ldr	r2, [r3, #24]
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	18d1      	adds	r1, r2, r3
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	6a3a      	ldr	r2, [r7, #32]
 8009f1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f1e:	f7ff ff45 	bl	8009dac <prvInsertTimerInActiveList>
					break;
 8009f22:	e009      	b.n	8009f38 <prvProcessReceivedCommands+0x108>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d104      	bne.n	8009f38 <prvProcessReceivedCommands+0x108>
						{
							vPortFree( pxTimer );
 8009f2e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f30:	f000 fb5a 	bl	800a5e8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009f34:	e000      	b.n	8009f38 <prvProcessReceivedCommands+0x108>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009f36:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009f38:	4b07      	ldr	r3, [pc, #28]	; (8009f58 <prvProcessReceivedCommands+0x128>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f107 0108 	add.w	r1, r7, #8
 8009f40:	2200      	movs	r2, #0
 8009f42:	4618      	mov	r0, r3
 8009f44:	f7fe fae0 	bl	8008508 <xQueueReceive>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	f47f af74 	bne.w	8009e38 <prvProcessReceivedCommands+0x8>
	}
}
 8009f50:	bf00      	nop
 8009f52:	3728      	adds	r7, #40	; 0x28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	20000524 	.word	0x20000524

08009f5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b088      	sub	sp, #32
 8009f60:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f62:	e044      	b.n	8009fee <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f64:	4b2b      	ldr	r3, [pc, #172]	; (800a014 <prvSwitchTimerLists+0xb8>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f6e:	4b29      	ldr	r3, [pc, #164]	; (800a014 <prvSwitchTimerLists+0xb8>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	68db      	ldr	r3, [r3, #12]
 8009f76:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	3304      	adds	r3, #4
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f7fd ffd5 	bl	8007f2c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	69db      	ldr	r3, [r3, #28]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d12d      	bne.n	8009fee <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	4413      	add	r3, r2
 8009f9a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d90e      	bls.n	8009fc2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	68ba      	ldr	r2, [r7, #8]
 8009fa8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fb0:	4b18      	ldr	r3, [pc, #96]	; (800a014 <prvSwitchTimerLists+0xb8>)
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3304      	adds	r3, #4
 8009fb8:	4619      	mov	r1, r3
 8009fba:	4610      	mov	r0, r2
 8009fbc:	f7fd ff7e 	bl	8007ebc <vListInsert>
 8009fc0:	e015      	b.n	8009fee <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	9300      	str	r3, [sp, #0]
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	693a      	ldr	r2, [r7, #16]
 8009fca:	2100      	movs	r1, #0
 8009fcc:	68f8      	ldr	r0, [r7, #12]
 8009fce:	f7ff fdbd 	bl	8009b4c <xTimerGenericCommand>
 8009fd2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d109      	bne.n	8009fee <prvSwitchTimerLists+0x92>
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	e7fe      	b.n	8009fec <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fee:	4b09      	ldr	r3, [pc, #36]	; (800a014 <prvSwitchTimerLists+0xb8>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d1b5      	bne.n	8009f64 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009ff8:	4b06      	ldr	r3, [pc, #24]	; (800a014 <prvSwitchTimerLists+0xb8>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009ffe:	4b06      	ldr	r3, [pc, #24]	; (800a018 <prvSwitchTimerLists+0xbc>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a04      	ldr	r2, [pc, #16]	; (800a014 <prvSwitchTimerLists+0xb8>)
 800a004:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a006:	4a04      	ldr	r2, [pc, #16]	; (800a018 <prvSwitchTimerLists+0xbc>)
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	6013      	str	r3, [r2, #0]
}
 800a00c:	bf00      	nop
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}
 800a014:	2000051c 	.word	0x2000051c
 800a018:	20000520 	.word	0x20000520

0800a01c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a022:	f000 f929 	bl	800a278 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a026:	4b15      	ldr	r3, [pc, #84]	; (800a07c <prvCheckForValidListAndQueue+0x60>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d120      	bne.n	800a070 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a02e:	4814      	ldr	r0, [pc, #80]	; (800a080 <prvCheckForValidListAndQueue+0x64>)
 800a030:	f7fd fef6 	bl	8007e20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a034:	4813      	ldr	r0, [pc, #76]	; (800a084 <prvCheckForValidListAndQueue+0x68>)
 800a036:	f7fd fef3 	bl	8007e20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a03a:	4b13      	ldr	r3, [pc, #76]	; (800a088 <prvCheckForValidListAndQueue+0x6c>)
 800a03c:	4a10      	ldr	r2, [pc, #64]	; (800a080 <prvCheckForValidListAndQueue+0x64>)
 800a03e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a040:	4b12      	ldr	r3, [pc, #72]	; (800a08c <prvCheckForValidListAndQueue+0x70>)
 800a042:	4a10      	ldr	r2, [pc, #64]	; (800a084 <prvCheckForValidListAndQueue+0x68>)
 800a044:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a046:	2300      	movs	r3, #0
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	4b11      	ldr	r3, [pc, #68]	; (800a090 <prvCheckForValidListAndQueue+0x74>)
 800a04c:	4a11      	ldr	r2, [pc, #68]	; (800a094 <prvCheckForValidListAndQueue+0x78>)
 800a04e:	210c      	movs	r1, #12
 800a050:	200a      	movs	r0, #10
 800a052:	f7fd fffd 	bl	8008050 <xQueueGenericCreateStatic>
 800a056:	4602      	mov	r2, r0
 800a058:	4b08      	ldr	r3, [pc, #32]	; (800a07c <prvCheckForValidListAndQueue+0x60>)
 800a05a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a05c:	4b07      	ldr	r3, [pc, #28]	; (800a07c <prvCheckForValidListAndQueue+0x60>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d005      	beq.n	800a070 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <prvCheckForValidListAndQueue+0x60>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	490b      	ldr	r1, [pc, #44]	; (800a098 <prvCheckForValidListAndQueue+0x7c>)
 800a06a:	4618      	mov	r0, r3
 800a06c:	f7fe fcb6 	bl	80089dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a070:	f000 f930 	bl	800a2d4 <vPortExitCritical>
}
 800a074:	bf00      	nop
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20000524 	.word	0x20000524
 800a080:	200004f4 	.word	0x200004f4
 800a084:	20000508 	.word	0x20000508
 800a088:	2000051c 	.word	0x2000051c
 800a08c:	20000520 	.word	0x20000520
 800a090:	200005a8 	.word	0x200005a8
 800a094:	20000530 	.word	0x20000530
 800a098:	0800b2fc 	.word	0x0800b2fc

0800a09c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a09c:	b480      	push	{r7}
 800a09e:	b085      	sub	sp, #20
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3b04      	subs	r3, #4
 800a0ac:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a0b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	3b04      	subs	r3, #4
 800a0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	f023 0201 	bic.w	r2, r3, #1
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	3b04      	subs	r3, #4
 800a0ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a0cc:	4a08      	ldr	r2, [pc, #32]	; (800a0f0 <pxPortInitialiseStack+0x54>)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	3b14      	subs	r3, #20
 800a0d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0d8:	687a      	ldr	r2, [r7, #4]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3b20      	subs	r3, #32
 800a0e2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3714      	adds	r7, #20
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bc80      	pop	{r7}
 800a0ee:	4770      	bx	lr
 800a0f0:	0800a0f5 	.word	0x0800a0f5

0800a0f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0fe:	4b10      	ldr	r3, [pc, #64]	; (800a140 <prvTaskExitError+0x4c>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a106:	d009      	beq.n	800a11c <prvTaskExitError+0x28>
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	60fb      	str	r3, [r7, #12]
 800a11a:	e7fe      	b.n	800a11a <prvTaskExitError+0x26>
 800a11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a120:	f383 8811 	msr	BASEPRI, r3
 800a124:	f3bf 8f6f 	isb	sy
 800a128:	f3bf 8f4f 	dsb	sy
 800a12c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a12e:	bf00      	nop
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0fc      	beq.n	800a130 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a136:	bf00      	nop
 800a138:	3714      	adds	r7, #20
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bc80      	pop	{r7}
 800a13e:	4770      	bx	lr
 800a140:	20000010 	.word	0x20000010
	...

0800a150 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a150:	4b07      	ldr	r3, [pc, #28]	; (800a170 <pxCurrentTCBConst2>)
 800a152:	6819      	ldr	r1, [r3, #0]
 800a154:	6808      	ldr	r0, [r1, #0]
 800a156:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a15a:	f380 8809 	msr	PSP, r0
 800a15e:	f3bf 8f6f 	isb	sy
 800a162:	f04f 0000 	mov.w	r0, #0
 800a166:	f380 8811 	msr	BASEPRI, r0
 800a16a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a16e:	4770      	bx	lr

0800a170 <pxCurrentTCBConst2>:
 800a170:	200003c8 	.word	0x200003c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a174:	bf00      	nop
 800a176:	bf00      	nop

0800a178 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a178:	4806      	ldr	r0, [pc, #24]	; (800a194 <prvPortStartFirstTask+0x1c>)
 800a17a:	6800      	ldr	r0, [r0, #0]
 800a17c:	6800      	ldr	r0, [r0, #0]
 800a17e:	f380 8808 	msr	MSP, r0
 800a182:	b662      	cpsie	i
 800a184:	b661      	cpsie	f
 800a186:	f3bf 8f4f 	dsb	sy
 800a18a:	f3bf 8f6f 	isb	sy
 800a18e:	df00      	svc	0
 800a190:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a192:	bf00      	nop
 800a194:	e000ed08 	.word	0xe000ed08

0800a198 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a19e:	4b31      	ldr	r3, [pc, #196]	; (800a264 <xPortStartScheduler+0xcc>)
 800a1a0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	22ff      	movs	r2, #255	; 0xff
 800a1ae:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	781b      	ldrb	r3, [r3, #0]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a1c0:	b2da      	uxtb	r2, r3
 800a1c2:	4b29      	ldr	r3, [pc, #164]	; (800a268 <xPortStartScheduler+0xd0>)
 800a1c4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a1c6:	4b29      	ldr	r3, [pc, #164]	; (800a26c <xPortStartScheduler+0xd4>)
 800a1c8:	2207      	movs	r2, #7
 800a1ca:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1cc:	e009      	b.n	800a1e2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a1ce:	4b27      	ldr	r3, [pc, #156]	; (800a26c <xPortStartScheduler+0xd4>)
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	4a25      	ldr	r2, [pc, #148]	; (800a26c <xPortStartScheduler+0xd4>)
 800a1d6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	b2db      	uxtb	r3, r3
 800a1dc:	005b      	lsls	r3, r3, #1
 800a1de:	b2db      	uxtb	r3, r3
 800a1e0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1e2:	78fb      	ldrb	r3, [r7, #3]
 800a1e4:	b2db      	uxtb	r3, r3
 800a1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ea:	2b80      	cmp	r3, #128	; 0x80
 800a1ec:	d0ef      	beq.n	800a1ce <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1ee:	4b1f      	ldr	r3, [pc, #124]	; (800a26c <xPortStartScheduler+0xd4>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f1c3 0307 	rsb	r3, r3, #7
 800a1f6:	2b04      	cmp	r3, #4
 800a1f8:	d009      	beq.n	800a20e <xPortStartScheduler+0x76>
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	60bb      	str	r3, [r7, #8]
 800a20c:	e7fe      	b.n	800a20c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a20e:	4b17      	ldr	r3, [pc, #92]	; (800a26c <xPortStartScheduler+0xd4>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	021b      	lsls	r3, r3, #8
 800a214:	4a15      	ldr	r2, [pc, #84]	; (800a26c <xPortStartScheduler+0xd4>)
 800a216:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a218:	4b14      	ldr	r3, [pc, #80]	; (800a26c <xPortStartScheduler+0xd4>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a220:	4a12      	ldr	r2, [pc, #72]	; (800a26c <xPortStartScheduler+0xd4>)
 800a222:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	b2da      	uxtb	r2, r3
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a22c:	4b10      	ldr	r3, [pc, #64]	; (800a270 <xPortStartScheduler+0xd8>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	4a0f      	ldr	r2, [pc, #60]	; (800a270 <xPortStartScheduler+0xd8>)
 800a232:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a236:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a238:	4b0d      	ldr	r3, [pc, #52]	; (800a270 <xPortStartScheduler+0xd8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a0c      	ldr	r2, [pc, #48]	; (800a270 <xPortStartScheduler+0xd8>)
 800a23e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a242:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a244:	f000 f8b0 	bl	800a3a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a248:	4b0a      	ldr	r3, [pc, #40]	; (800a274 <xPortStartScheduler+0xdc>)
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a24e:	f7ff ff93 	bl	800a178 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a252:	f7ff f82b 	bl	80092ac <vTaskSwitchContext>
	prvTaskExitError();
 800a256:	f7ff ff4d 	bl	800a0f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	e000e400 	.word	0xe000e400
 800a268:	200005f0 	.word	0x200005f0
 800a26c:	200005f4 	.word	0x200005f4
 800a270:	e000ed20 	.word	0xe000ed20
 800a274:	20000010 	.word	0x20000010

0800a278 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a282:	f383 8811 	msr	BASEPRI, r3
 800a286:	f3bf 8f6f 	isb	sy
 800a28a:	f3bf 8f4f 	dsb	sy
 800a28e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a290:	4b0e      	ldr	r3, [pc, #56]	; (800a2cc <vPortEnterCritical+0x54>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	3301      	adds	r3, #1
 800a296:	4a0d      	ldr	r2, [pc, #52]	; (800a2cc <vPortEnterCritical+0x54>)
 800a298:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a29a:	4b0c      	ldr	r3, [pc, #48]	; (800a2cc <vPortEnterCritical+0x54>)
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d10e      	bne.n	800a2c0 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a2a2:	4b0b      	ldr	r3, [pc, #44]	; (800a2d0 <vPortEnterCritical+0x58>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d009      	beq.n	800a2c0 <vPortEnterCritical+0x48>
 800a2ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2b0:	f383 8811 	msr	BASEPRI, r3
 800a2b4:	f3bf 8f6f 	isb	sy
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	603b      	str	r3, [r7, #0]
 800a2be:	e7fe      	b.n	800a2be <vPortEnterCritical+0x46>
	}
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	bc80      	pop	{r7}
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	20000010 	.word	0x20000010
 800a2d0:	e000ed04 	.word	0xe000ed04

0800a2d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b083      	sub	sp, #12
 800a2d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2da:	4b10      	ldr	r3, [pc, #64]	; (800a31c <vPortExitCritical+0x48>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d109      	bne.n	800a2f6 <vPortExitCritical+0x22>
 800a2e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2e6:	f383 8811 	msr	BASEPRI, r3
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	f3bf 8f4f 	dsb	sy
 800a2f2:	607b      	str	r3, [r7, #4]
 800a2f4:	e7fe      	b.n	800a2f4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <vPortExitCritical+0x48>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	3b01      	subs	r3, #1
 800a2fc:	4a07      	ldr	r2, [pc, #28]	; (800a31c <vPortExitCritical+0x48>)
 800a2fe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a300:	4b06      	ldr	r3, [pc, #24]	; (800a31c <vPortExitCritical+0x48>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d104      	bne.n	800a312 <vPortExitCritical+0x3e>
 800a308:	2300      	movs	r3, #0
 800a30a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800a312:	bf00      	nop
 800a314:	370c      	adds	r7, #12
 800a316:	46bd      	mov	sp, r7
 800a318:	bc80      	pop	{r7}
 800a31a:	4770      	bx	lr
 800a31c:	20000010 	.word	0x20000010

0800a320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a320:	f3ef 8009 	mrs	r0, PSP
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <pxCurrentTCBConst>)
 800a32a:	681a      	ldr	r2, [r3, #0]
 800a32c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a330:	6010      	str	r0, [r2, #0]
 800a332:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a336:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a33a:	f380 8811 	msr	BASEPRI, r0
 800a33e:	f7fe ffb5 	bl	80092ac <vTaskSwitchContext>
 800a342:	f04f 0000 	mov.w	r0, #0
 800a346:	f380 8811 	msr	BASEPRI, r0
 800a34a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a34e:	6819      	ldr	r1, [r3, #0]
 800a350:	6808      	ldr	r0, [r1, #0]
 800a352:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a356:	f380 8809 	msr	PSP, r0
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	4770      	bx	lr

0800a360 <pxCurrentTCBConst>:
 800a360:	200003c8 	.word	0x200003c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop

0800a368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b082      	sub	sp, #8
 800a36c:	af00      	add	r7, sp, #0
	__asm volatile
 800a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a372:	f383 8811 	msr	BASEPRI, r3
 800a376:	f3bf 8f6f 	isb	sy
 800a37a:	f3bf 8f4f 	dsb	sy
 800a37e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a380:	f7fe fed8 	bl	8009134 <xTaskIncrementTick>
 800a384:	4603      	mov	r3, r0
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a38a:	4b06      	ldr	r3, [pc, #24]	; (800a3a4 <SysTick_Handler+0x3c>)
 800a38c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a390:	601a      	str	r2, [r3, #0]
 800a392:	2300      	movs	r3, #0
 800a394:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800a39c:	bf00      	nop
 800a39e:	3708      	adds	r7, #8
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	e000ed04 	.word	0xe000ed04

0800a3a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <vPortSetupTimerInterrupt+0x30>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a3b2:	4b0a      	ldr	r3, [pc, #40]	; (800a3dc <vPortSetupTimerInterrupt+0x34>)
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a3b8:	4b09      	ldr	r3, [pc, #36]	; (800a3e0 <vPortSetupTimerInterrupt+0x38>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a09      	ldr	r2, [pc, #36]	; (800a3e4 <vPortSetupTimerInterrupt+0x3c>)
 800a3be:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c2:	099b      	lsrs	r3, r3, #6
 800a3c4:	4a08      	ldr	r2, [pc, #32]	; (800a3e8 <vPortSetupTimerInterrupt+0x40>)
 800a3c6:	3b01      	subs	r3, #1
 800a3c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ca:	4b03      	ldr	r3, [pc, #12]	; (800a3d8 <vPortSetupTimerInterrupt+0x30>)
 800a3cc:	2207      	movs	r2, #7
 800a3ce:	601a      	str	r2, [r3, #0]
}
 800a3d0:	bf00      	nop
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bc80      	pop	{r7}
 800a3d6:	4770      	bx	lr
 800a3d8:	e000e010 	.word	0xe000e010
 800a3dc:	e000e018 	.word	0xe000e018
 800a3e0:	20000004 	.word	0x20000004
 800a3e4:	10624dd3 	.word	0x10624dd3
 800a3e8:	e000e014 	.word	0xe000e014

0800a3ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b085      	sub	sp, #20
 800a3f0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3f2:	f3ef 8305 	mrs	r3, IPSR
 800a3f6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2b0f      	cmp	r3, #15
 800a3fc:	d913      	bls.n	800a426 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3fe:	4a15      	ldr	r2, [pc, #84]	; (800a454 <vPortValidateInterruptPriority+0x68>)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	4413      	add	r3, r2
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a408:	4b13      	ldr	r3, [pc, #76]	; (800a458 <vPortValidateInterruptPriority+0x6c>)
 800a40a:	781b      	ldrb	r3, [r3, #0]
 800a40c:	7afa      	ldrb	r2, [r7, #11]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d209      	bcs.n	800a426 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	607b      	str	r3, [r7, #4]
 800a424:	e7fe      	b.n	800a424 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a426:	4b0d      	ldr	r3, [pc, #52]	; (800a45c <vPortValidateInterruptPriority+0x70>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a42e:	4b0c      	ldr	r3, [pc, #48]	; (800a460 <vPortValidateInterruptPriority+0x74>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	429a      	cmp	r2, r3
 800a434:	d909      	bls.n	800a44a <vPortValidateInterruptPriority+0x5e>
 800a436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a43a:	f383 8811 	msr	BASEPRI, r3
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	f3bf 8f4f 	dsb	sy
 800a446:	603b      	str	r3, [r7, #0]
 800a448:	e7fe      	b.n	800a448 <vPortValidateInterruptPriority+0x5c>
	}
 800a44a:	bf00      	nop
 800a44c:	3714      	adds	r7, #20
 800a44e:	46bd      	mov	sp, r7
 800a450:	bc80      	pop	{r7}
 800a452:	4770      	bx	lr
 800a454:	e000e3f0 	.word	0xe000e3f0
 800a458:	200005f0 	.word	0x200005f0
 800a45c:	e000ed0c 	.word	0xe000ed0c
 800a460:	200005f4 	.word	0x200005f4

0800a464 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b08a      	sub	sp, #40	; 0x28
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a46c:	2300      	movs	r3, #0
 800a46e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a470:	f7fe fda8 	bl	8008fc4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a474:	4b57      	ldr	r3, [pc, #348]	; (800a5d4 <pvPortMalloc+0x170>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d101      	bne.n	800a480 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a47c:	f000 f90c 	bl	800a698 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a480:	4b55      	ldr	r3, [pc, #340]	; (800a5d8 <pvPortMalloc+0x174>)
 800a482:	681a      	ldr	r2, [r3, #0]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	4013      	ands	r3, r2
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f040 808c 	bne.w	800a5a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d01c      	beq.n	800a4ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800a494:	2208      	movs	r2, #8
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	4413      	add	r3, r2
 800a49a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f003 0307 	and.w	r3, r3, #7
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d013      	beq.n	800a4ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f023 0307 	bic.w	r3, r3, #7
 800a4ac:	3308      	adds	r3, #8
 800a4ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f003 0307 	and.w	r3, r3, #7
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d009      	beq.n	800a4ce <pvPortMalloc+0x6a>
 800a4ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4be:	f383 8811 	msr	BASEPRI, r3
 800a4c2:	f3bf 8f6f 	isb	sy
 800a4c6:	f3bf 8f4f 	dsb	sy
 800a4ca:	617b      	str	r3, [r7, #20]
 800a4cc:	e7fe      	b.n	800a4cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d068      	beq.n	800a5a6 <pvPortMalloc+0x142>
 800a4d4:	4b41      	ldr	r3, [pc, #260]	; (800a5dc <pvPortMalloc+0x178>)
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	687a      	ldr	r2, [r7, #4]
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	d863      	bhi.n	800a5a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4de:	4b40      	ldr	r3, [pc, #256]	; (800a5e0 <pvPortMalloc+0x17c>)
 800a4e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4e2:	4b3f      	ldr	r3, [pc, #252]	; (800a5e0 <pvPortMalloc+0x17c>)
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4e8:	e004      	b.n	800a4f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f6:	685b      	ldr	r3, [r3, #4]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d903      	bls.n	800a506 <pvPortMalloc+0xa2>
 800a4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1f1      	bne.n	800a4ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a506:	4b33      	ldr	r3, [pc, #204]	; (800a5d4 <pvPortMalloc+0x170>)
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a50c:	429a      	cmp	r2, r3
 800a50e:	d04a      	beq.n	800a5a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a510:	6a3b      	ldr	r3, [r7, #32]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2208      	movs	r2, #8
 800a516:	4413      	add	r3, r2
 800a518:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	6a3b      	ldr	r3, [r7, #32]
 800a520:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a524:	685a      	ldr	r2, [r3, #4]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	1ad2      	subs	r2, r2, r3
 800a52a:	2308      	movs	r3, #8
 800a52c:	005b      	lsls	r3, r3, #1
 800a52e:	429a      	cmp	r2, r3
 800a530:	d91e      	bls.n	800a570 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4413      	add	r3, r2
 800a538:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	f003 0307 	and.w	r3, r3, #7
 800a540:	2b00      	cmp	r3, #0
 800a542:	d009      	beq.n	800a558 <pvPortMalloc+0xf4>
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	613b      	str	r3, [r7, #16]
 800a556:	e7fe      	b.n	800a556 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	1ad2      	subs	r2, r2, r3
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a566:	687a      	ldr	r2, [r7, #4]
 800a568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a56a:	69b8      	ldr	r0, [r7, #24]
 800a56c:	f000 f8f6 	bl	800a75c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a570:	4b1a      	ldr	r3, [pc, #104]	; (800a5dc <pvPortMalloc+0x178>)
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	1ad3      	subs	r3, r2, r3
 800a57a:	4a18      	ldr	r2, [pc, #96]	; (800a5dc <pvPortMalloc+0x178>)
 800a57c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a57e:	4b17      	ldr	r3, [pc, #92]	; (800a5dc <pvPortMalloc+0x178>)
 800a580:	681a      	ldr	r2, [r3, #0]
 800a582:	4b18      	ldr	r3, [pc, #96]	; (800a5e4 <pvPortMalloc+0x180>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	429a      	cmp	r2, r3
 800a588:	d203      	bcs.n	800a592 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a58a:	4b14      	ldr	r3, [pc, #80]	; (800a5dc <pvPortMalloc+0x178>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a15      	ldr	r2, [pc, #84]	; (800a5e4 <pvPortMalloc+0x180>)
 800a590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a594:	685a      	ldr	r2, [r3, #4]
 800a596:	4b10      	ldr	r3, [pc, #64]	; (800a5d8 <pvPortMalloc+0x174>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	431a      	orrs	r2, r3
 800a59c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a59e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5a6:	f7fe fd1b 	bl	8008fe0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	f003 0307 	and.w	r3, r3, #7
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d009      	beq.n	800a5c8 <pvPortMalloc+0x164>
 800a5b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b8:	f383 8811 	msr	BASEPRI, r3
 800a5bc:	f3bf 8f6f 	isb	sy
 800a5c0:	f3bf 8f4f 	dsb	sy
 800a5c4:	60fb      	str	r3, [r7, #12]
 800a5c6:	e7fe      	b.n	800a5c6 <pvPortMalloc+0x162>
	return pvReturn;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3728      	adds	r7, #40	; 0x28
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	bd80      	pop	{r7, pc}
 800a5d2:	bf00      	nop
 800a5d4:	20001200 	.word	0x20001200
 800a5d8:	2000120c 	.word	0x2000120c
 800a5dc:	20001204 	.word	0x20001204
 800a5e0:	200011f8 	.word	0x200011f8
 800a5e4:	20001208 	.word	0x20001208

0800a5e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d046      	beq.n	800a688 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5fa:	2308      	movs	r3, #8
 800a5fc:	425b      	negs	r3, r3
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	4413      	add	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a608:	693b      	ldr	r3, [r7, #16]
 800a60a:	685a      	ldr	r2, [r3, #4]
 800a60c:	4b20      	ldr	r3, [pc, #128]	; (800a690 <vPortFree+0xa8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4013      	ands	r3, r2
 800a612:	2b00      	cmp	r3, #0
 800a614:	d109      	bne.n	800a62a <vPortFree+0x42>
 800a616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a61a:	f383 8811 	msr	BASEPRI, r3
 800a61e:	f3bf 8f6f 	isb	sy
 800a622:	f3bf 8f4f 	dsb	sy
 800a626:	60fb      	str	r3, [r7, #12]
 800a628:	e7fe      	b.n	800a628 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d009      	beq.n	800a646 <vPortFree+0x5e>
 800a632:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a636:	f383 8811 	msr	BASEPRI, r3
 800a63a:	f3bf 8f6f 	isb	sy
 800a63e:	f3bf 8f4f 	dsb	sy
 800a642:	60bb      	str	r3, [r7, #8]
 800a644:	e7fe      	b.n	800a644 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	685a      	ldr	r2, [r3, #4]
 800a64a:	4b11      	ldr	r3, [pc, #68]	; (800a690 <vPortFree+0xa8>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	4013      	ands	r3, r2
 800a650:	2b00      	cmp	r3, #0
 800a652:	d019      	beq.n	800a688 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d115      	bne.n	800a688 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	4b0b      	ldr	r3, [pc, #44]	; (800a690 <vPortFree+0xa8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	43db      	mvns	r3, r3
 800a666:	401a      	ands	r2, r3
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a66c:	f7fe fcaa 	bl	8008fc4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	685a      	ldr	r2, [r3, #4]
 800a674:	4b07      	ldr	r3, [pc, #28]	; (800a694 <vPortFree+0xac>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	4413      	add	r3, r2
 800a67a:	4a06      	ldr	r2, [pc, #24]	; (800a694 <vPortFree+0xac>)
 800a67c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a67e:	6938      	ldr	r0, [r7, #16]
 800a680:	f000 f86c 	bl	800a75c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a684:	f7fe fcac 	bl	8008fe0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a688:	bf00      	nop
 800a68a:	3718      	adds	r7, #24
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	2000120c 	.word	0x2000120c
 800a694:	20001204 	.word	0x20001204

0800a698 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a69e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a6a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6a4:	4b27      	ldr	r3, [pc, #156]	; (800a744 <prvHeapInit+0xac>)
 800a6a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f003 0307 	and.w	r3, r3, #7
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00c      	beq.n	800a6cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3307      	adds	r3, #7
 800a6b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f023 0307 	bic.w	r3, r3, #7
 800a6be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6c0:	68ba      	ldr	r2, [r7, #8]
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	1ad3      	subs	r3, r2, r3
 800a6c6:	4a1f      	ldr	r2, [pc, #124]	; (800a744 <prvHeapInit+0xac>)
 800a6c8:	4413      	add	r3, r2
 800a6ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6d0:	4a1d      	ldr	r2, [pc, #116]	; (800a748 <prvHeapInit+0xb0>)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6d6:	4b1c      	ldr	r3, [pc, #112]	; (800a748 <prvHeapInit+0xb0>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a6e4:	2208      	movs	r2, #8
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	1a9b      	subs	r3, r3, r2
 800a6ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	f023 0307 	bic.w	r3, r3, #7
 800a6f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4a15      	ldr	r2, [pc, #84]	; (800a74c <prvHeapInit+0xb4>)
 800a6f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a6fa:	4b14      	ldr	r3, [pc, #80]	; (800a74c <prvHeapInit+0xb4>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2200      	movs	r2, #0
 800a700:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a702:	4b12      	ldr	r3, [pc, #72]	; (800a74c <prvHeapInit+0xb4>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	1ad2      	subs	r2, r2, r3
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a718:	4b0c      	ldr	r3, [pc, #48]	; (800a74c <prvHeapInit+0xb4>)
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	4a0a      	ldr	r2, [pc, #40]	; (800a750 <prvHeapInit+0xb8>)
 800a726:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	4a09      	ldr	r2, [pc, #36]	; (800a754 <prvHeapInit+0xbc>)
 800a72e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a730:	4b09      	ldr	r3, [pc, #36]	; (800a758 <prvHeapInit+0xc0>)
 800a732:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a736:	601a      	str	r2, [r3, #0]
}
 800a738:	bf00      	nop
 800a73a:	3714      	adds	r7, #20
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bc80      	pop	{r7}
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	200005f8 	.word	0x200005f8
 800a748:	200011f8 	.word	0x200011f8
 800a74c:	20001200 	.word	0x20001200
 800a750:	20001208 	.word	0x20001208
 800a754:	20001204 	.word	0x20001204
 800a758:	2000120c 	.word	0x2000120c

0800a75c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a764:	4b27      	ldr	r3, [pc, #156]	; (800a804 <prvInsertBlockIntoFreeList+0xa8>)
 800a766:	60fb      	str	r3, [r7, #12]
 800a768:	e002      	b.n	800a770 <prvInsertBlockIntoFreeList+0x14>
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	429a      	cmp	r2, r3
 800a778:	d8f7      	bhi.n	800a76a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	4413      	add	r3, r2
 800a786:	687a      	ldr	r2, [r7, #4]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d108      	bne.n	800a79e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	685b      	ldr	r3, [r3, #4]
 800a794:	441a      	add	r2, r3
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	68ba      	ldr	r2, [r7, #8]
 800a7a8:	441a      	add	r2, r3
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d118      	bne.n	800a7e4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	4b14      	ldr	r3, [pc, #80]	; (800a808 <prvInsertBlockIntoFreeList+0xac>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d00d      	beq.n	800a7da <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	685b      	ldr	r3, [r3, #4]
 800a7c8:	441a      	add	r2, r3
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	601a      	str	r2, [r3, #0]
 800a7d8:	e008      	b.n	800a7ec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7da:	4b0b      	ldr	r3, [pc, #44]	; (800a808 <prvInsertBlockIntoFreeList+0xac>)
 800a7dc:	681a      	ldr	r2, [r3, #0]
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e003      	b.n	800a7ec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	429a      	cmp	r2, r3
 800a7f2:	d002      	beq.n	800a7fa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7fa:	bf00      	nop
 800a7fc:	3714      	adds	r7, #20
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bc80      	pop	{r7}
 800a802:	4770      	bx	lr
 800a804:	200011f8 	.word	0x200011f8
 800a808:	20001200 	.word	0x20001200

0800a80c <__errno>:
 800a80c:	4b01      	ldr	r3, [pc, #4]	; (800a814 <__errno+0x8>)
 800a80e:	6818      	ldr	r0, [r3, #0]
 800a810:	4770      	bx	lr
 800a812:	bf00      	nop
 800a814:	20000014 	.word	0x20000014

0800a818 <__libc_init_array>:
 800a818:	b570      	push	{r4, r5, r6, lr}
 800a81a:	2500      	movs	r5, #0
 800a81c:	4e0c      	ldr	r6, [pc, #48]	; (800a850 <__libc_init_array+0x38>)
 800a81e:	4c0d      	ldr	r4, [pc, #52]	; (800a854 <__libc_init_array+0x3c>)
 800a820:	1ba4      	subs	r4, r4, r6
 800a822:	10a4      	asrs	r4, r4, #2
 800a824:	42a5      	cmp	r5, r4
 800a826:	d109      	bne.n	800a83c <__libc_init_array+0x24>
 800a828:	f000 fcac 	bl	800b184 <_init>
 800a82c:	2500      	movs	r5, #0
 800a82e:	4e0a      	ldr	r6, [pc, #40]	; (800a858 <__libc_init_array+0x40>)
 800a830:	4c0a      	ldr	r4, [pc, #40]	; (800a85c <__libc_init_array+0x44>)
 800a832:	1ba4      	subs	r4, r4, r6
 800a834:	10a4      	asrs	r4, r4, #2
 800a836:	42a5      	cmp	r5, r4
 800a838:	d105      	bne.n	800a846 <__libc_init_array+0x2e>
 800a83a:	bd70      	pop	{r4, r5, r6, pc}
 800a83c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a840:	4798      	blx	r3
 800a842:	3501      	adds	r5, #1
 800a844:	e7ee      	b.n	800a824 <__libc_init_array+0xc>
 800a846:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a84a:	4798      	blx	r3
 800a84c:	3501      	adds	r5, #1
 800a84e:	e7f2      	b.n	800a836 <__libc_init_array+0x1e>
 800a850:	0800b380 	.word	0x0800b380
 800a854:	0800b380 	.word	0x0800b380
 800a858:	0800b380 	.word	0x0800b380
 800a85c:	0800b384 	.word	0x0800b384

0800a860 <memcpy>:
 800a860:	b510      	push	{r4, lr}
 800a862:	1e43      	subs	r3, r0, #1
 800a864:	440a      	add	r2, r1
 800a866:	4291      	cmp	r1, r2
 800a868:	d100      	bne.n	800a86c <memcpy+0xc>
 800a86a:	bd10      	pop	{r4, pc}
 800a86c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a870:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a874:	e7f7      	b.n	800a866 <memcpy+0x6>

0800a876 <memset>:
 800a876:	4603      	mov	r3, r0
 800a878:	4402      	add	r2, r0
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d100      	bne.n	800a880 <memset+0xa>
 800a87e:	4770      	bx	lr
 800a880:	f803 1b01 	strb.w	r1, [r3], #1
 800a884:	e7f9      	b.n	800a87a <memset+0x4>
	...

0800a888 <modf>:
 800a888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a88a:	f3c1 5e0a 	ubfx	lr, r1, #20, #11
 800a88e:	f2ae 36ff 	subw	r6, lr, #1023	; 0x3ff
 800a892:	2e13      	cmp	r6, #19
 800a894:	4604      	mov	r4, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4694      	mov	ip, r2
 800a89a:	dc21      	bgt.n	800a8e0 <modf+0x58>
 800a89c:	2e00      	cmp	r6, #0
 800a89e:	da07      	bge.n	800a8b0 <modf+0x28>
 800a8a0:	2000      	movs	r0, #0
 800a8a2:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800a8a6:	e9cc 0100 	strd	r0, r1, [ip]
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8b0:	4f19      	ldr	r7, [pc, #100]	; (800a918 <modf+0x90>)
 800a8b2:	fa47 f606 	asr.w	r6, r7, r6
 800a8b6:	ea01 0706 	and.w	r7, r1, r6
 800a8ba:	ea57 0200 	orrs.w	r2, r7, r0
 800a8be:	d107      	bne.n	800a8d0 <modf+0x48>
 800a8c0:	e9cc 0100 	strd	r0, r1, [ip]
 800a8c4:	4610      	mov	r0, r2
 800a8c6:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800a8ca:	4604      	mov	r4, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	e7ec      	b.n	800a8aa <modf+0x22>
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	ea21 0306 	bic.w	r3, r1, r6
 800a8d6:	e9cc 2300 	strd	r2, r3, [ip]
 800a8da:	f7f5 fc45 	bl	8000168 <__aeabi_dsub>
 800a8de:	e7f4      	b.n	800a8ca <modf+0x42>
 800a8e0:	2e33      	cmp	r6, #51	; 0x33
 800a8e2:	dd06      	ble.n	800a8f2 <modf+0x6a>
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	e9cc 0100 	strd	r0, r1, [ip]
 800a8ea:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a8ee:	4614      	mov	r4, r2
 800a8f0:	e7db      	b.n	800a8aa <modf+0x22>
 800a8f2:	f2ae 4613 	subw	r6, lr, #1043	; 0x413
 800a8f6:	f04f 3eff 	mov.w	lr, #4294967295
 800a8fa:	fa2e fe06 	lsr.w	lr, lr, r6
 800a8fe:	ea1e 0600 	ands.w	r6, lr, r0
 800a902:	d105      	bne.n	800a910 <modf+0x88>
 800a904:	e9cc 0100 	strd	r0, r1, [ip]
 800a908:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800a90c:	4632      	mov	r2, r6
 800a90e:	e7ee      	b.n	800a8ee <modf+0x66>
 800a910:	ea20 060e 	bic.w	r6, r0, lr
 800a914:	4632      	mov	r2, r6
 800a916:	e7de      	b.n	800a8d6 <modf+0x4e>
 800a918:	000fffff 	.word	0x000fffff

0800a91c <siprintf>:
 800a91c:	b40e      	push	{r1, r2, r3}
 800a91e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a922:	b500      	push	{lr}
 800a924:	b09c      	sub	sp, #112	; 0x70
 800a926:	ab1d      	add	r3, sp, #116	; 0x74
 800a928:	9002      	str	r0, [sp, #8]
 800a92a:	9006      	str	r0, [sp, #24]
 800a92c:	9107      	str	r1, [sp, #28]
 800a92e:	9104      	str	r1, [sp, #16]
 800a930:	4808      	ldr	r0, [pc, #32]	; (800a954 <siprintf+0x38>)
 800a932:	4909      	ldr	r1, [pc, #36]	; (800a958 <siprintf+0x3c>)
 800a934:	f853 2b04 	ldr.w	r2, [r3], #4
 800a938:	9105      	str	r1, [sp, #20]
 800a93a:	6800      	ldr	r0, [r0, #0]
 800a93c:	a902      	add	r1, sp, #8
 800a93e:	9301      	str	r3, [sp, #4]
 800a940:	f000 f866 	bl	800aa10 <_svfiprintf_r>
 800a944:	2200      	movs	r2, #0
 800a946:	9b02      	ldr	r3, [sp, #8]
 800a948:	701a      	strb	r2, [r3, #0]
 800a94a:	b01c      	add	sp, #112	; 0x70
 800a94c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a950:	b003      	add	sp, #12
 800a952:	4770      	bx	lr
 800a954:	20000014 	.word	0x20000014
 800a958:	ffff0208 	.word	0xffff0208

0800a95c <__ssputs_r>:
 800a95c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a960:	688e      	ldr	r6, [r1, #8]
 800a962:	4682      	mov	sl, r0
 800a964:	429e      	cmp	r6, r3
 800a966:	460c      	mov	r4, r1
 800a968:	4690      	mov	r8, r2
 800a96a:	4699      	mov	r9, r3
 800a96c:	d837      	bhi.n	800a9de <__ssputs_r+0x82>
 800a96e:	898a      	ldrh	r2, [r1, #12]
 800a970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a974:	d031      	beq.n	800a9da <__ssputs_r+0x7e>
 800a976:	2302      	movs	r3, #2
 800a978:	6825      	ldr	r5, [r4, #0]
 800a97a:	6909      	ldr	r1, [r1, #16]
 800a97c:	1a6f      	subs	r7, r5, r1
 800a97e:	6965      	ldr	r5, [r4, #20]
 800a980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a984:	fb95 f5f3 	sdiv	r5, r5, r3
 800a988:	f109 0301 	add.w	r3, r9, #1
 800a98c:	443b      	add	r3, r7
 800a98e:	429d      	cmp	r5, r3
 800a990:	bf38      	it	cc
 800a992:	461d      	movcc	r5, r3
 800a994:	0553      	lsls	r3, r2, #21
 800a996:	d530      	bpl.n	800a9fa <__ssputs_r+0x9e>
 800a998:	4629      	mov	r1, r5
 800a99a:	f000 fb2d 	bl	800aff8 <_malloc_r>
 800a99e:	4606      	mov	r6, r0
 800a9a0:	b950      	cbnz	r0, 800a9b8 <__ssputs_r+0x5c>
 800a9a2:	230c      	movs	r3, #12
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	f8ca 3000 	str.w	r3, [sl]
 800a9ac:	89a3      	ldrh	r3, [r4, #12]
 800a9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9b2:	81a3      	strh	r3, [r4, #12]
 800a9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b8:	463a      	mov	r2, r7
 800a9ba:	6921      	ldr	r1, [r4, #16]
 800a9bc:	f7ff ff50 	bl	800a860 <memcpy>
 800a9c0:	89a3      	ldrh	r3, [r4, #12]
 800a9c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	6126      	str	r6, [r4, #16]
 800a9ce:	443e      	add	r6, r7
 800a9d0:	6026      	str	r6, [r4, #0]
 800a9d2:	464e      	mov	r6, r9
 800a9d4:	6165      	str	r5, [r4, #20]
 800a9d6:	1bed      	subs	r5, r5, r7
 800a9d8:	60a5      	str	r5, [r4, #8]
 800a9da:	454e      	cmp	r6, r9
 800a9dc:	d900      	bls.n	800a9e0 <__ssputs_r+0x84>
 800a9de:	464e      	mov	r6, r9
 800a9e0:	4632      	mov	r2, r6
 800a9e2:	4641      	mov	r1, r8
 800a9e4:	6820      	ldr	r0, [r4, #0]
 800a9e6:	f000 faa1 	bl	800af2c <memmove>
 800a9ea:	68a3      	ldr	r3, [r4, #8]
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	1b9b      	subs	r3, r3, r6
 800a9f0:	60a3      	str	r3, [r4, #8]
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	441e      	add	r6, r3
 800a9f6:	6026      	str	r6, [r4, #0]
 800a9f8:	e7dc      	b.n	800a9b4 <__ssputs_r+0x58>
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	f000 fb56 	bl	800b0ac <_realloc_r>
 800aa00:	4606      	mov	r6, r0
 800aa02:	2800      	cmp	r0, #0
 800aa04:	d1e2      	bne.n	800a9cc <__ssputs_r+0x70>
 800aa06:	6921      	ldr	r1, [r4, #16]
 800aa08:	4650      	mov	r0, sl
 800aa0a:	f000 faa9 	bl	800af60 <_free_r>
 800aa0e:	e7c8      	b.n	800a9a2 <__ssputs_r+0x46>

0800aa10 <_svfiprintf_r>:
 800aa10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa14:	461d      	mov	r5, r3
 800aa16:	898b      	ldrh	r3, [r1, #12]
 800aa18:	b09d      	sub	sp, #116	; 0x74
 800aa1a:	061f      	lsls	r7, r3, #24
 800aa1c:	4680      	mov	r8, r0
 800aa1e:	460c      	mov	r4, r1
 800aa20:	4616      	mov	r6, r2
 800aa22:	d50f      	bpl.n	800aa44 <_svfiprintf_r+0x34>
 800aa24:	690b      	ldr	r3, [r1, #16]
 800aa26:	b96b      	cbnz	r3, 800aa44 <_svfiprintf_r+0x34>
 800aa28:	2140      	movs	r1, #64	; 0x40
 800aa2a:	f000 fae5 	bl	800aff8 <_malloc_r>
 800aa2e:	6020      	str	r0, [r4, #0]
 800aa30:	6120      	str	r0, [r4, #16]
 800aa32:	b928      	cbnz	r0, 800aa40 <_svfiprintf_r+0x30>
 800aa34:	230c      	movs	r3, #12
 800aa36:	f8c8 3000 	str.w	r3, [r8]
 800aa3a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3e:	e0c8      	b.n	800abd2 <_svfiprintf_r+0x1c2>
 800aa40:	2340      	movs	r3, #64	; 0x40
 800aa42:	6163      	str	r3, [r4, #20]
 800aa44:	2300      	movs	r3, #0
 800aa46:	9309      	str	r3, [sp, #36]	; 0x24
 800aa48:	2320      	movs	r3, #32
 800aa4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa4e:	2330      	movs	r3, #48	; 0x30
 800aa50:	f04f 0b01 	mov.w	fp, #1
 800aa54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa58:	9503      	str	r5, [sp, #12]
 800aa5a:	4637      	mov	r7, r6
 800aa5c:	463d      	mov	r5, r7
 800aa5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800aa62:	b10b      	cbz	r3, 800aa68 <_svfiprintf_r+0x58>
 800aa64:	2b25      	cmp	r3, #37	; 0x25
 800aa66:	d13e      	bne.n	800aae6 <_svfiprintf_r+0xd6>
 800aa68:	ebb7 0a06 	subs.w	sl, r7, r6
 800aa6c:	d00b      	beq.n	800aa86 <_svfiprintf_r+0x76>
 800aa6e:	4653      	mov	r3, sl
 800aa70:	4632      	mov	r2, r6
 800aa72:	4621      	mov	r1, r4
 800aa74:	4640      	mov	r0, r8
 800aa76:	f7ff ff71 	bl	800a95c <__ssputs_r>
 800aa7a:	3001      	adds	r0, #1
 800aa7c:	f000 80a4 	beq.w	800abc8 <_svfiprintf_r+0x1b8>
 800aa80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa82:	4453      	add	r3, sl
 800aa84:	9309      	str	r3, [sp, #36]	; 0x24
 800aa86:	783b      	ldrb	r3, [r7, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	f000 809d 	beq.w	800abc8 <_svfiprintf_r+0x1b8>
 800aa8e:	2300      	movs	r3, #0
 800aa90:	f04f 32ff 	mov.w	r2, #4294967295
 800aa94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa98:	9304      	str	r3, [sp, #16]
 800aa9a:	9307      	str	r3, [sp, #28]
 800aa9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aaa0:	931a      	str	r3, [sp, #104]	; 0x68
 800aaa2:	462f      	mov	r7, r5
 800aaa4:	2205      	movs	r2, #5
 800aaa6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800aaaa:	4850      	ldr	r0, [pc, #320]	; (800abec <_svfiprintf_r+0x1dc>)
 800aaac:	f000 fa30 	bl	800af10 <memchr>
 800aab0:	9b04      	ldr	r3, [sp, #16]
 800aab2:	b9d0      	cbnz	r0, 800aaea <_svfiprintf_r+0xda>
 800aab4:	06d9      	lsls	r1, r3, #27
 800aab6:	bf44      	itt	mi
 800aab8:	2220      	movmi	r2, #32
 800aaba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aabe:	071a      	lsls	r2, r3, #28
 800aac0:	bf44      	itt	mi
 800aac2:	222b      	movmi	r2, #43	; 0x2b
 800aac4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800aac8:	782a      	ldrb	r2, [r5, #0]
 800aaca:	2a2a      	cmp	r2, #42	; 0x2a
 800aacc:	d015      	beq.n	800aafa <_svfiprintf_r+0xea>
 800aace:	462f      	mov	r7, r5
 800aad0:	2000      	movs	r0, #0
 800aad2:	250a      	movs	r5, #10
 800aad4:	9a07      	ldr	r2, [sp, #28]
 800aad6:	4639      	mov	r1, r7
 800aad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aadc:	3b30      	subs	r3, #48	; 0x30
 800aade:	2b09      	cmp	r3, #9
 800aae0:	d94d      	bls.n	800ab7e <_svfiprintf_r+0x16e>
 800aae2:	b1b8      	cbz	r0, 800ab14 <_svfiprintf_r+0x104>
 800aae4:	e00f      	b.n	800ab06 <_svfiprintf_r+0xf6>
 800aae6:	462f      	mov	r7, r5
 800aae8:	e7b8      	b.n	800aa5c <_svfiprintf_r+0x4c>
 800aaea:	4a40      	ldr	r2, [pc, #256]	; (800abec <_svfiprintf_r+0x1dc>)
 800aaec:	463d      	mov	r5, r7
 800aaee:	1a80      	subs	r0, r0, r2
 800aaf0:	fa0b f000 	lsl.w	r0, fp, r0
 800aaf4:	4318      	orrs	r0, r3
 800aaf6:	9004      	str	r0, [sp, #16]
 800aaf8:	e7d3      	b.n	800aaa2 <_svfiprintf_r+0x92>
 800aafa:	9a03      	ldr	r2, [sp, #12]
 800aafc:	1d11      	adds	r1, r2, #4
 800aafe:	6812      	ldr	r2, [r2, #0]
 800ab00:	9103      	str	r1, [sp, #12]
 800ab02:	2a00      	cmp	r2, #0
 800ab04:	db01      	blt.n	800ab0a <_svfiprintf_r+0xfa>
 800ab06:	9207      	str	r2, [sp, #28]
 800ab08:	e004      	b.n	800ab14 <_svfiprintf_r+0x104>
 800ab0a:	4252      	negs	r2, r2
 800ab0c:	f043 0302 	orr.w	r3, r3, #2
 800ab10:	9207      	str	r2, [sp, #28]
 800ab12:	9304      	str	r3, [sp, #16]
 800ab14:	783b      	ldrb	r3, [r7, #0]
 800ab16:	2b2e      	cmp	r3, #46	; 0x2e
 800ab18:	d10c      	bne.n	800ab34 <_svfiprintf_r+0x124>
 800ab1a:	787b      	ldrb	r3, [r7, #1]
 800ab1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab1e:	d133      	bne.n	800ab88 <_svfiprintf_r+0x178>
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	3702      	adds	r7, #2
 800ab24:	1d1a      	adds	r2, r3, #4
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	9203      	str	r2, [sp, #12]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	bfb8      	it	lt
 800ab2e:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	4d2e      	ldr	r5, [pc, #184]	; (800abf0 <_svfiprintf_r+0x1e0>)
 800ab36:	2203      	movs	r2, #3
 800ab38:	7839      	ldrb	r1, [r7, #0]
 800ab3a:	4628      	mov	r0, r5
 800ab3c:	f000 f9e8 	bl	800af10 <memchr>
 800ab40:	b138      	cbz	r0, 800ab52 <_svfiprintf_r+0x142>
 800ab42:	2340      	movs	r3, #64	; 0x40
 800ab44:	1b40      	subs	r0, r0, r5
 800ab46:	fa03 f000 	lsl.w	r0, r3, r0
 800ab4a:	9b04      	ldr	r3, [sp, #16]
 800ab4c:	3701      	adds	r7, #1
 800ab4e:	4303      	orrs	r3, r0
 800ab50:	9304      	str	r3, [sp, #16]
 800ab52:	7839      	ldrb	r1, [r7, #0]
 800ab54:	2206      	movs	r2, #6
 800ab56:	4827      	ldr	r0, [pc, #156]	; (800abf4 <_svfiprintf_r+0x1e4>)
 800ab58:	1c7e      	adds	r6, r7, #1
 800ab5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab5e:	f000 f9d7 	bl	800af10 <memchr>
 800ab62:	2800      	cmp	r0, #0
 800ab64:	d038      	beq.n	800abd8 <_svfiprintf_r+0x1c8>
 800ab66:	4b24      	ldr	r3, [pc, #144]	; (800abf8 <_svfiprintf_r+0x1e8>)
 800ab68:	bb13      	cbnz	r3, 800abb0 <_svfiprintf_r+0x1a0>
 800ab6a:	9b03      	ldr	r3, [sp, #12]
 800ab6c:	3307      	adds	r3, #7
 800ab6e:	f023 0307 	bic.w	r3, r3, #7
 800ab72:	3308      	adds	r3, #8
 800ab74:	9303      	str	r3, [sp, #12]
 800ab76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab78:	444b      	add	r3, r9
 800ab7a:	9309      	str	r3, [sp, #36]	; 0x24
 800ab7c:	e76d      	b.n	800aa5a <_svfiprintf_r+0x4a>
 800ab7e:	fb05 3202 	mla	r2, r5, r2, r3
 800ab82:	2001      	movs	r0, #1
 800ab84:	460f      	mov	r7, r1
 800ab86:	e7a6      	b.n	800aad6 <_svfiprintf_r+0xc6>
 800ab88:	2300      	movs	r3, #0
 800ab8a:	250a      	movs	r5, #10
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	3701      	adds	r7, #1
 800ab90:	9305      	str	r3, [sp, #20]
 800ab92:	4638      	mov	r0, r7
 800ab94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab98:	3a30      	subs	r2, #48	; 0x30
 800ab9a:	2a09      	cmp	r2, #9
 800ab9c:	d903      	bls.n	800aba6 <_svfiprintf_r+0x196>
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d0c8      	beq.n	800ab34 <_svfiprintf_r+0x124>
 800aba2:	9105      	str	r1, [sp, #20]
 800aba4:	e7c6      	b.n	800ab34 <_svfiprintf_r+0x124>
 800aba6:	fb05 2101 	mla	r1, r5, r1, r2
 800abaa:	2301      	movs	r3, #1
 800abac:	4607      	mov	r7, r0
 800abae:	e7f0      	b.n	800ab92 <_svfiprintf_r+0x182>
 800abb0:	ab03      	add	r3, sp, #12
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4622      	mov	r2, r4
 800abb6:	4b11      	ldr	r3, [pc, #68]	; (800abfc <_svfiprintf_r+0x1ec>)
 800abb8:	a904      	add	r1, sp, #16
 800abba:	4640      	mov	r0, r8
 800abbc:	f3af 8000 	nop.w
 800abc0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800abc4:	4681      	mov	r9, r0
 800abc6:	d1d6      	bne.n	800ab76 <_svfiprintf_r+0x166>
 800abc8:	89a3      	ldrh	r3, [r4, #12]
 800abca:	065b      	lsls	r3, r3, #25
 800abcc:	f53f af35 	bmi.w	800aa3a <_svfiprintf_r+0x2a>
 800abd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd2:	b01d      	add	sp, #116	; 0x74
 800abd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abd8:	ab03      	add	r3, sp, #12
 800abda:	9300      	str	r3, [sp, #0]
 800abdc:	4622      	mov	r2, r4
 800abde:	4b07      	ldr	r3, [pc, #28]	; (800abfc <_svfiprintf_r+0x1ec>)
 800abe0:	a904      	add	r1, sp, #16
 800abe2:	4640      	mov	r0, r8
 800abe4:	f000 f882 	bl	800acec <_printf_i>
 800abe8:	e7ea      	b.n	800abc0 <_svfiprintf_r+0x1b0>
 800abea:	bf00      	nop
 800abec:	0800b34c 	.word	0x0800b34c
 800abf0:	0800b352 	.word	0x0800b352
 800abf4:	0800b356 	.word	0x0800b356
 800abf8:	00000000 	.word	0x00000000
 800abfc:	0800a95d 	.word	0x0800a95d

0800ac00 <_printf_common>:
 800ac00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac04:	4691      	mov	r9, r2
 800ac06:	461f      	mov	r7, r3
 800ac08:	688a      	ldr	r2, [r1, #8]
 800ac0a:	690b      	ldr	r3, [r1, #16]
 800ac0c:	4606      	mov	r6, r0
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	bfb8      	it	lt
 800ac12:	4613      	movlt	r3, r2
 800ac14:	f8c9 3000 	str.w	r3, [r9]
 800ac18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ac1c:	460c      	mov	r4, r1
 800ac1e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ac22:	b112      	cbz	r2, 800ac2a <_printf_common+0x2a>
 800ac24:	3301      	adds	r3, #1
 800ac26:	f8c9 3000 	str.w	r3, [r9]
 800ac2a:	6823      	ldr	r3, [r4, #0]
 800ac2c:	0699      	lsls	r1, r3, #26
 800ac2e:	bf42      	ittt	mi
 800ac30:	f8d9 3000 	ldrmi.w	r3, [r9]
 800ac34:	3302      	addmi	r3, #2
 800ac36:	f8c9 3000 	strmi.w	r3, [r9]
 800ac3a:	6825      	ldr	r5, [r4, #0]
 800ac3c:	f015 0506 	ands.w	r5, r5, #6
 800ac40:	d107      	bne.n	800ac52 <_printf_common+0x52>
 800ac42:	f104 0a19 	add.w	sl, r4, #25
 800ac46:	68e3      	ldr	r3, [r4, #12]
 800ac48:	f8d9 2000 	ldr.w	r2, [r9]
 800ac4c:	1a9b      	subs	r3, r3, r2
 800ac4e:	42ab      	cmp	r3, r5
 800ac50:	dc29      	bgt.n	800aca6 <_printf_common+0xa6>
 800ac52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800ac56:	6822      	ldr	r2, [r4, #0]
 800ac58:	3300      	adds	r3, #0
 800ac5a:	bf18      	it	ne
 800ac5c:	2301      	movne	r3, #1
 800ac5e:	0692      	lsls	r2, r2, #26
 800ac60:	d42e      	bmi.n	800acc0 <_printf_common+0xc0>
 800ac62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ac66:	4639      	mov	r1, r7
 800ac68:	4630      	mov	r0, r6
 800ac6a:	47c0      	blx	r8
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	d021      	beq.n	800acb4 <_printf_common+0xb4>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	68e5      	ldr	r5, [r4, #12]
 800ac74:	f003 0306 	and.w	r3, r3, #6
 800ac78:	2b04      	cmp	r3, #4
 800ac7a:	bf18      	it	ne
 800ac7c:	2500      	movne	r5, #0
 800ac7e:	f8d9 2000 	ldr.w	r2, [r9]
 800ac82:	f04f 0900 	mov.w	r9, #0
 800ac86:	bf08      	it	eq
 800ac88:	1aad      	subeq	r5, r5, r2
 800ac8a:	68a3      	ldr	r3, [r4, #8]
 800ac8c:	6922      	ldr	r2, [r4, #16]
 800ac8e:	bf08      	it	eq
 800ac90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ac94:	4293      	cmp	r3, r2
 800ac96:	bfc4      	itt	gt
 800ac98:	1a9b      	subgt	r3, r3, r2
 800ac9a:	18ed      	addgt	r5, r5, r3
 800ac9c:	341a      	adds	r4, #26
 800ac9e:	454d      	cmp	r5, r9
 800aca0:	d11a      	bne.n	800acd8 <_printf_common+0xd8>
 800aca2:	2000      	movs	r0, #0
 800aca4:	e008      	b.n	800acb8 <_printf_common+0xb8>
 800aca6:	2301      	movs	r3, #1
 800aca8:	4652      	mov	r2, sl
 800acaa:	4639      	mov	r1, r7
 800acac:	4630      	mov	r0, r6
 800acae:	47c0      	blx	r8
 800acb0:	3001      	adds	r0, #1
 800acb2:	d103      	bne.n	800acbc <_printf_common+0xbc>
 800acb4:	f04f 30ff 	mov.w	r0, #4294967295
 800acb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acbc:	3501      	adds	r5, #1
 800acbe:	e7c2      	b.n	800ac46 <_printf_common+0x46>
 800acc0:	2030      	movs	r0, #48	; 0x30
 800acc2:	18e1      	adds	r1, r4, r3
 800acc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800acc8:	1c5a      	adds	r2, r3, #1
 800acca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800acce:	4422      	add	r2, r4
 800acd0:	3302      	adds	r3, #2
 800acd2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800acd6:	e7c4      	b.n	800ac62 <_printf_common+0x62>
 800acd8:	2301      	movs	r3, #1
 800acda:	4622      	mov	r2, r4
 800acdc:	4639      	mov	r1, r7
 800acde:	4630      	mov	r0, r6
 800ace0:	47c0      	blx	r8
 800ace2:	3001      	adds	r0, #1
 800ace4:	d0e6      	beq.n	800acb4 <_printf_common+0xb4>
 800ace6:	f109 0901 	add.w	r9, r9, #1
 800acea:	e7d8      	b.n	800ac9e <_printf_common+0x9e>

0800acec <_printf_i>:
 800acec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800acf0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800acf4:	460c      	mov	r4, r1
 800acf6:	7e09      	ldrb	r1, [r1, #24]
 800acf8:	b085      	sub	sp, #20
 800acfa:	296e      	cmp	r1, #110	; 0x6e
 800acfc:	4617      	mov	r7, r2
 800acfe:	4606      	mov	r6, r0
 800ad00:	4698      	mov	r8, r3
 800ad02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad04:	f000 80b3 	beq.w	800ae6e <_printf_i+0x182>
 800ad08:	d822      	bhi.n	800ad50 <_printf_i+0x64>
 800ad0a:	2963      	cmp	r1, #99	; 0x63
 800ad0c:	d036      	beq.n	800ad7c <_printf_i+0x90>
 800ad0e:	d80a      	bhi.n	800ad26 <_printf_i+0x3a>
 800ad10:	2900      	cmp	r1, #0
 800ad12:	f000 80b9 	beq.w	800ae88 <_printf_i+0x19c>
 800ad16:	2958      	cmp	r1, #88	; 0x58
 800ad18:	f000 8083 	beq.w	800ae22 <_printf_i+0x136>
 800ad1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ad24:	e032      	b.n	800ad8c <_printf_i+0xa0>
 800ad26:	2964      	cmp	r1, #100	; 0x64
 800ad28:	d001      	beq.n	800ad2e <_printf_i+0x42>
 800ad2a:	2969      	cmp	r1, #105	; 0x69
 800ad2c:	d1f6      	bne.n	800ad1c <_printf_i+0x30>
 800ad2e:	6820      	ldr	r0, [r4, #0]
 800ad30:	6813      	ldr	r3, [r2, #0]
 800ad32:	0605      	lsls	r5, r0, #24
 800ad34:	f103 0104 	add.w	r1, r3, #4
 800ad38:	d52a      	bpl.n	800ad90 <_printf_i+0xa4>
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	6011      	str	r1, [r2, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	da03      	bge.n	800ad4a <_printf_i+0x5e>
 800ad42:	222d      	movs	r2, #45	; 0x2d
 800ad44:	425b      	negs	r3, r3
 800ad46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ad4a:	486f      	ldr	r0, [pc, #444]	; (800af08 <_printf_i+0x21c>)
 800ad4c:	220a      	movs	r2, #10
 800ad4e:	e039      	b.n	800adc4 <_printf_i+0xd8>
 800ad50:	2973      	cmp	r1, #115	; 0x73
 800ad52:	f000 809d 	beq.w	800ae90 <_printf_i+0x1a4>
 800ad56:	d808      	bhi.n	800ad6a <_printf_i+0x7e>
 800ad58:	296f      	cmp	r1, #111	; 0x6f
 800ad5a:	d020      	beq.n	800ad9e <_printf_i+0xb2>
 800ad5c:	2970      	cmp	r1, #112	; 0x70
 800ad5e:	d1dd      	bne.n	800ad1c <_printf_i+0x30>
 800ad60:	6823      	ldr	r3, [r4, #0]
 800ad62:	f043 0320 	orr.w	r3, r3, #32
 800ad66:	6023      	str	r3, [r4, #0]
 800ad68:	e003      	b.n	800ad72 <_printf_i+0x86>
 800ad6a:	2975      	cmp	r1, #117	; 0x75
 800ad6c:	d017      	beq.n	800ad9e <_printf_i+0xb2>
 800ad6e:	2978      	cmp	r1, #120	; 0x78
 800ad70:	d1d4      	bne.n	800ad1c <_printf_i+0x30>
 800ad72:	2378      	movs	r3, #120	; 0x78
 800ad74:	4865      	ldr	r0, [pc, #404]	; (800af0c <_printf_i+0x220>)
 800ad76:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad7a:	e055      	b.n	800ae28 <_printf_i+0x13c>
 800ad7c:	6813      	ldr	r3, [r2, #0]
 800ad7e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ad82:	1d19      	adds	r1, r3, #4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	6011      	str	r1, [r2, #0]
 800ad88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e08c      	b.n	800aeaa <_printf_i+0x1be>
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ad96:	6011      	str	r1, [r2, #0]
 800ad98:	bf18      	it	ne
 800ad9a:	b21b      	sxthne	r3, r3
 800ad9c:	e7cf      	b.n	800ad3e <_printf_i+0x52>
 800ad9e:	6813      	ldr	r3, [r2, #0]
 800ada0:	6825      	ldr	r5, [r4, #0]
 800ada2:	1d18      	adds	r0, r3, #4
 800ada4:	6010      	str	r0, [r2, #0]
 800ada6:	0628      	lsls	r0, r5, #24
 800ada8:	d501      	bpl.n	800adae <_printf_i+0xc2>
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	e002      	b.n	800adb4 <_printf_i+0xc8>
 800adae:	0668      	lsls	r0, r5, #25
 800adb0:	d5fb      	bpl.n	800adaa <_printf_i+0xbe>
 800adb2:	881b      	ldrh	r3, [r3, #0]
 800adb4:	296f      	cmp	r1, #111	; 0x6f
 800adb6:	bf14      	ite	ne
 800adb8:	220a      	movne	r2, #10
 800adba:	2208      	moveq	r2, #8
 800adbc:	4852      	ldr	r0, [pc, #328]	; (800af08 <_printf_i+0x21c>)
 800adbe:	2100      	movs	r1, #0
 800adc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800adc4:	6865      	ldr	r5, [r4, #4]
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	60a5      	str	r5, [r4, #8]
 800adca:	f2c0 8095 	blt.w	800aef8 <_printf_i+0x20c>
 800adce:	6821      	ldr	r1, [r4, #0]
 800add0:	f021 0104 	bic.w	r1, r1, #4
 800add4:	6021      	str	r1, [r4, #0]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d13d      	bne.n	800ae56 <_printf_i+0x16a>
 800adda:	2d00      	cmp	r5, #0
 800addc:	f040 808e 	bne.w	800aefc <_printf_i+0x210>
 800ade0:	4665      	mov	r5, ip
 800ade2:	2a08      	cmp	r2, #8
 800ade4:	d10b      	bne.n	800adfe <_printf_i+0x112>
 800ade6:	6823      	ldr	r3, [r4, #0]
 800ade8:	07db      	lsls	r3, r3, #31
 800adea:	d508      	bpl.n	800adfe <_printf_i+0x112>
 800adec:	6923      	ldr	r3, [r4, #16]
 800adee:	6862      	ldr	r2, [r4, #4]
 800adf0:	429a      	cmp	r2, r3
 800adf2:	bfde      	ittt	le
 800adf4:	2330      	movle	r3, #48	; 0x30
 800adf6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800adfa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800adfe:	ebac 0305 	sub.w	r3, ip, r5
 800ae02:	6123      	str	r3, [r4, #16]
 800ae04:	f8cd 8000 	str.w	r8, [sp]
 800ae08:	463b      	mov	r3, r7
 800ae0a:	aa03      	add	r2, sp, #12
 800ae0c:	4621      	mov	r1, r4
 800ae0e:	4630      	mov	r0, r6
 800ae10:	f7ff fef6 	bl	800ac00 <_printf_common>
 800ae14:	3001      	adds	r0, #1
 800ae16:	d14d      	bne.n	800aeb4 <_printf_i+0x1c8>
 800ae18:	f04f 30ff 	mov.w	r0, #4294967295
 800ae1c:	b005      	add	sp, #20
 800ae1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae22:	4839      	ldr	r0, [pc, #228]	; (800af08 <_printf_i+0x21c>)
 800ae24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ae28:	6813      	ldr	r3, [r2, #0]
 800ae2a:	6821      	ldr	r1, [r4, #0]
 800ae2c:	1d1d      	adds	r5, r3, #4
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	6015      	str	r5, [r2, #0]
 800ae32:	060a      	lsls	r2, r1, #24
 800ae34:	d50b      	bpl.n	800ae4e <_printf_i+0x162>
 800ae36:	07ca      	lsls	r2, r1, #31
 800ae38:	bf44      	itt	mi
 800ae3a:	f041 0120 	orrmi.w	r1, r1, #32
 800ae3e:	6021      	strmi	r1, [r4, #0]
 800ae40:	b91b      	cbnz	r3, 800ae4a <_printf_i+0x15e>
 800ae42:	6822      	ldr	r2, [r4, #0]
 800ae44:	f022 0220 	bic.w	r2, r2, #32
 800ae48:	6022      	str	r2, [r4, #0]
 800ae4a:	2210      	movs	r2, #16
 800ae4c:	e7b7      	b.n	800adbe <_printf_i+0xd2>
 800ae4e:	064d      	lsls	r5, r1, #25
 800ae50:	bf48      	it	mi
 800ae52:	b29b      	uxthmi	r3, r3
 800ae54:	e7ef      	b.n	800ae36 <_printf_i+0x14a>
 800ae56:	4665      	mov	r5, ip
 800ae58:	fbb3 f1f2 	udiv	r1, r3, r2
 800ae5c:	fb02 3311 	mls	r3, r2, r1, r3
 800ae60:	5cc3      	ldrb	r3, [r0, r3]
 800ae62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ae66:	460b      	mov	r3, r1
 800ae68:	2900      	cmp	r1, #0
 800ae6a:	d1f5      	bne.n	800ae58 <_printf_i+0x16c>
 800ae6c:	e7b9      	b.n	800ade2 <_printf_i+0xf6>
 800ae6e:	6813      	ldr	r3, [r2, #0]
 800ae70:	6825      	ldr	r5, [r4, #0]
 800ae72:	1d18      	adds	r0, r3, #4
 800ae74:	6961      	ldr	r1, [r4, #20]
 800ae76:	6010      	str	r0, [r2, #0]
 800ae78:	0628      	lsls	r0, r5, #24
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	d501      	bpl.n	800ae82 <_printf_i+0x196>
 800ae7e:	6019      	str	r1, [r3, #0]
 800ae80:	e002      	b.n	800ae88 <_printf_i+0x19c>
 800ae82:	066a      	lsls	r2, r5, #25
 800ae84:	d5fb      	bpl.n	800ae7e <_printf_i+0x192>
 800ae86:	8019      	strh	r1, [r3, #0]
 800ae88:	2300      	movs	r3, #0
 800ae8a:	4665      	mov	r5, ip
 800ae8c:	6123      	str	r3, [r4, #16]
 800ae8e:	e7b9      	b.n	800ae04 <_printf_i+0x118>
 800ae90:	6813      	ldr	r3, [r2, #0]
 800ae92:	1d19      	adds	r1, r3, #4
 800ae94:	6011      	str	r1, [r2, #0]
 800ae96:	681d      	ldr	r5, [r3, #0]
 800ae98:	6862      	ldr	r2, [r4, #4]
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	f000 f837 	bl	800af10 <memchr>
 800aea2:	b108      	cbz	r0, 800aea8 <_printf_i+0x1bc>
 800aea4:	1b40      	subs	r0, r0, r5
 800aea6:	6060      	str	r0, [r4, #4]
 800aea8:	6863      	ldr	r3, [r4, #4]
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	2300      	movs	r3, #0
 800aeae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aeb2:	e7a7      	b.n	800ae04 <_printf_i+0x118>
 800aeb4:	6923      	ldr	r3, [r4, #16]
 800aeb6:	462a      	mov	r2, r5
 800aeb8:	4639      	mov	r1, r7
 800aeba:	4630      	mov	r0, r6
 800aebc:	47c0      	blx	r8
 800aebe:	3001      	adds	r0, #1
 800aec0:	d0aa      	beq.n	800ae18 <_printf_i+0x12c>
 800aec2:	6823      	ldr	r3, [r4, #0]
 800aec4:	079b      	lsls	r3, r3, #30
 800aec6:	d413      	bmi.n	800aef0 <_printf_i+0x204>
 800aec8:	68e0      	ldr	r0, [r4, #12]
 800aeca:	9b03      	ldr	r3, [sp, #12]
 800aecc:	4298      	cmp	r0, r3
 800aece:	bfb8      	it	lt
 800aed0:	4618      	movlt	r0, r3
 800aed2:	e7a3      	b.n	800ae1c <_printf_i+0x130>
 800aed4:	2301      	movs	r3, #1
 800aed6:	464a      	mov	r2, r9
 800aed8:	4639      	mov	r1, r7
 800aeda:	4630      	mov	r0, r6
 800aedc:	47c0      	blx	r8
 800aede:	3001      	adds	r0, #1
 800aee0:	d09a      	beq.n	800ae18 <_printf_i+0x12c>
 800aee2:	3501      	adds	r5, #1
 800aee4:	68e3      	ldr	r3, [r4, #12]
 800aee6:	9a03      	ldr	r2, [sp, #12]
 800aee8:	1a9b      	subs	r3, r3, r2
 800aeea:	42ab      	cmp	r3, r5
 800aeec:	dcf2      	bgt.n	800aed4 <_printf_i+0x1e8>
 800aeee:	e7eb      	b.n	800aec8 <_printf_i+0x1dc>
 800aef0:	2500      	movs	r5, #0
 800aef2:	f104 0919 	add.w	r9, r4, #25
 800aef6:	e7f5      	b.n	800aee4 <_printf_i+0x1f8>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d1ac      	bne.n	800ae56 <_printf_i+0x16a>
 800aefc:	7803      	ldrb	r3, [r0, #0]
 800aefe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af02:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af06:	e76c      	b.n	800ade2 <_printf_i+0xf6>
 800af08:	0800b35d 	.word	0x0800b35d
 800af0c:	0800b36e 	.word	0x0800b36e

0800af10 <memchr>:
 800af10:	b510      	push	{r4, lr}
 800af12:	b2c9      	uxtb	r1, r1
 800af14:	4402      	add	r2, r0
 800af16:	4290      	cmp	r0, r2
 800af18:	4603      	mov	r3, r0
 800af1a:	d101      	bne.n	800af20 <memchr+0x10>
 800af1c:	2300      	movs	r3, #0
 800af1e:	e003      	b.n	800af28 <memchr+0x18>
 800af20:	781c      	ldrb	r4, [r3, #0]
 800af22:	3001      	adds	r0, #1
 800af24:	428c      	cmp	r4, r1
 800af26:	d1f6      	bne.n	800af16 <memchr+0x6>
 800af28:	4618      	mov	r0, r3
 800af2a:	bd10      	pop	{r4, pc}

0800af2c <memmove>:
 800af2c:	4288      	cmp	r0, r1
 800af2e:	b510      	push	{r4, lr}
 800af30:	eb01 0302 	add.w	r3, r1, r2
 800af34:	d807      	bhi.n	800af46 <memmove+0x1a>
 800af36:	1e42      	subs	r2, r0, #1
 800af38:	4299      	cmp	r1, r3
 800af3a:	d00a      	beq.n	800af52 <memmove+0x26>
 800af3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af40:	f802 4f01 	strb.w	r4, [r2, #1]!
 800af44:	e7f8      	b.n	800af38 <memmove+0xc>
 800af46:	4283      	cmp	r3, r0
 800af48:	d9f5      	bls.n	800af36 <memmove+0xa>
 800af4a:	1881      	adds	r1, r0, r2
 800af4c:	1ad2      	subs	r2, r2, r3
 800af4e:	42d3      	cmn	r3, r2
 800af50:	d100      	bne.n	800af54 <memmove+0x28>
 800af52:	bd10      	pop	{r4, pc}
 800af54:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af58:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800af5c:	e7f7      	b.n	800af4e <memmove+0x22>
	...

0800af60 <_free_r>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	4605      	mov	r5, r0
 800af64:	2900      	cmp	r1, #0
 800af66:	d043      	beq.n	800aff0 <_free_r+0x90>
 800af68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af6c:	1f0c      	subs	r4, r1, #4
 800af6e:	2b00      	cmp	r3, #0
 800af70:	bfb8      	it	lt
 800af72:	18e4      	addlt	r4, r4, r3
 800af74:	f000 f8d0 	bl	800b118 <__malloc_lock>
 800af78:	4a1e      	ldr	r2, [pc, #120]	; (800aff4 <_free_r+0x94>)
 800af7a:	6813      	ldr	r3, [r2, #0]
 800af7c:	4610      	mov	r0, r2
 800af7e:	b933      	cbnz	r3, 800af8e <_free_r+0x2e>
 800af80:	6063      	str	r3, [r4, #4]
 800af82:	6014      	str	r4, [r2, #0]
 800af84:	4628      	mov	r0, r5
 800af86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af8a:	f000 b8c6 	b.w	800b11a <__malloc_unlock>
 800af8e:	42a3      	cmp	r3, r4
 800af90:	d90b      	bls.n	800afaa <_free_r+0x4a>
 800af92:	6821      	ldr	r1, [r4, #0]
 800af94:	1862      	adds	r2, r4, r1
 800af96:	4293      	cmp	r3, r2
 800af98:	bf01      	itttt	eq
 800af9a:	681a      	ldreq	r2, [r3, #0]
 800af9c:	685b      	ldreq	r3, [r3, #4]
 800af9e:	1852      	addeq	r2, r2, r1
 800afa0:	6022      	streq	r2, [r4, #0]
 800afa2:	6063      	str	r3, [r4, #4]
 800afa4:	6004      	str	r4, [r0, #0]
 800afa6:	e7ed      	b.n	800af84 <_free_r+0x24>
 800afa8:	4613      	mov	r3, r2
 800afaa:	685a      	ldr	r2, [r3, #4]
 800afac:	b10a      	cbz	r2, 800afb2 <_free_r+0x52>
 800afae:	42a2      	cmp	r2, r4
 800afb0:	d9fa      	bls.n	800afa8 <_free_r+0x48>
 800afb2:	6819      	ldr	r1, [r3, #0]
 800afb4:	1858      	adds	r0, r3, r1
 800afb6:	42a0      	cmp	r0, r4
 800afb8:	d10b      	bne.n	800afd2 <_free_r+0x72>
 800afba:	6820      	ldr	r0, [r4, #0]
 800afbc:	4401      	add	r1, r0
 800afbe:	1858      	adds	r0, r3, r1
 800afc0:	4282      	cmp	r2, r0
 800afc2:	6019      	str	r1, [r3, #0]
 800afc4:	d1de      	bne.n	800af84 <_free_r+0x24>
 800afc6:	6810      	ldr	r0, [r2, #0]
 800afc8:	6852      	ldr	r2, [r2, #4]
 800afca:	4401      	add	r1, r0
 800afcc:	6019      	str	r1, [r3, #0]
 800afce:	605a      	str	r2, [r3, #4]
 800afd0:	e7d8      	b.n	800af84 <_free_r+0x24>
 800afd2:	d902      	bls.n	800afda <_free_r+0x7a>
 800afd4:	230c      	movs	r3, #12
 800afd6:	602b      	str	r3, [r5, #0]
 800afd8:	e7d4      	b.n	800af84 <_free_r+0x24>
 800afda:	6820      	ldr	r0, [r4, #0]
 800afdc:	1821      	adds	r1, r4, r0
 800afde:	428a      	cmp	r2, r1
 800afe0:	bf01      	itttt	eq
 800afe2:	6811      	ldreq	r1, [r2, #0]
 800afe4:	6852      	ldreq	r2, [r2, #4]
 800afe6:	1809      	addeq	r1, r1, r0
 800afe8:	6021      	streq	r1, [r4, #0]
 800afea:	6062      	str	r2, [r4, #4]
 800afec:	605c      	str	r4, [r3, #4]
 800afee:	e7c9      	b.n	800af84 <_free_r+0x24>
 800aff0:	bd38      	pop	{r3, r4, r5, pc}
 800aff2:	bf00      	nop
 800aff4:	20001210 	.word	0x20001210

0800aff8 <_malloc_r>:
 800aff8:	b570      	push	{r4, r5, r6, lr}
 800affa:	1ccd      	adds	r5, r1, #3
 800affc:	f025 0503 	bic.w	r5, r5, #3
 800b000:	3508      	adds	r5, #8
 800b002:	2d0c      	cmp	r5, #12
 800b004:	bf38      	it	cc
 800b006:	250c      	movcc	r5, #12
 800b008:	2d00      	cmp	r5, #0
 800b00a:	4606      	mov	r6, r0
 800b00c:	db01      	blt.n	800b012 <_malloc_r+0x1a>
 800b00e:	42a9      	cmp	r1, r5
 800b010:	d903      	bls.n	800b01a <_malloc_r+0x22>
 800b012:	230c      	movs	r3, #12
 800b014:	6033      	str	r3, [r6, #0]
 800b016:	2000      	movs	r0, #0
 800b018:	bd70      	pop	{r4, r5, r6, pc}
 800b01a:	f000 f87d 	bl	800b118 <__malloc_lock>
 800b01e:	4a21      	ldr	r2, [pc, #132]	; (800b0a4 <_malloc_r+0xac>)
 800b020:	6814      	ldr	r4, [r2, #0]
 800b022:	4621      	mov	r1, r4
 800b024:	b991      	cbnz	r1, 800b04c <_malloc_r+0x54>
 800b026:	4c20      	ldr	r4, [pc, #128]	; (800b0a8 <_malloc_r+0xb0>)
 800b028:	6823      	ldr	r3, [r4, #0]
 800b02a:	b91b      	cbnz	r3, 800b034 <_malloc_r+0x3c>
 800b02c:	4630      	mov	r0, r6
 800b02e:	f000 f863 	bl	800b0f8 <_sbrk_r>
 800b032:	6020      	str	r0, [r4, #0]
 800b034:	4629      	mov	r1, r5
 800b036:	4630      	mov	r0, r6
 800b038:	f000 f85e 	bl	800b0f8 <_sbrk_r>
 800b03c:	1c43      	adds	r3, r0, #1
 800b03e:	d124      	bne.n	800b08a <_malloc_r+0x92>
 800b040:	230c      	movs	r3, #12
 800b042:	4630      	mov	r0, r6
 800b044:	6033      	str	r3, [r6, #0]
 800b046:	f000 f868 	bl	800b11a <__malloc_unlock>
 800b04a:	e7e4      	b.n	800b016 <_malloc_r+0x1e>
 800b04c:	680b      	ldr	r3, [r1, #0]
 800b04e:	1b5b      	subs	r3, r3, r5
 800b050:	d418      	bmi.n	800b084 <_malloc_r+0x8c>
 800b052:	2b0b      	cmp	r3, #11
 800b054:	d90f      	bls.n	800b076 <_malloc_r+0x7e>
 800b056:	600b      	str	r3, [r1, #0]
 800b058:	18cc      	adds	r4, r1, r3
 800b05a:	50cd      	str	r5, [r1, r3]
 800b05c:	4630      	mov	r0, r6
 800b05e:	f000 f85c 	bl	800b11a <__malloc_unlock>
 800b062:	f104 000b 	add.w	r0, r4, #11
 800b066:	1d23      	adds	r3, r4, #4
 800b068:	f020 0007 	bic.w	r0, r0, #7
 800b06c:	1ac3      	subs	r3, r0, r3
 800b06e:	d0d3      	beq.n	800b018 <_malloc_r+0x20>
 800b070:	425a      	negs	r2, r3
 800b072:	50e2      	str	r2, [r4, r3]
 800b074:	e7d0      	b.n	800b018 <_malloc_r+0x20>
 800b076:	684b      	ldr	r3, [r1, #4]
 800b078:	428c      	cmp	r4, r1
 800b07a:	bf16      	itet	ne
 800b07c:	6063      	strne	r3, [r4, #4]
 800b07e:	6013      	streq	r3, [r2, #0]
 800b080:	460c      	movne	r4, r1
 800b082:	e7eb      	b.n	800b05c <_malloc_r+0x64>
 800b084:	460c      	mov	r4, r1
 800b086:	6849      	ldr	r1, [r1, #4]
 800b088:	e7cc      	b.n	800b024 <_malloc_r+0x2c>
 800b08a:	1cc4      	adds	r4, r0, #3
 800b08c:	f024 0403 	bic.w	r4, r4, #3
 800b090:	42a0      	cmp	r0, r4
 800b092:	d005      	beq.n	800b0a0 <_malloc_r+0xa8>
 800b094:	1a21      	subs	r1, r4, r0
 800b096:	4630      	mov	r0, r6
 800b098:	f000 f82e 	bl	800b0f8 <_sbrk_r>
 800b09c:	3001      	adds	r0, #1
 800b09e:	d0cf      	beq.n	800b040 <_malloc_r+0x48>
 800b0a0:	6025      	str	r5, [r4, #0]
 800b0a2:	e7db      	b.n	800b05c <_malloc_r+0x64>
 800b0a4:	20001210 	.word	0x20001210
 800b0a8:	20001214 	.word	0x20001214

0800b0ac <_realloc_r>:
 800b0ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ae:	4607      	mov	r7, r0
 800b0b0:	4614      	mov	r4, r2
 800b0b2:	460e      	mov	r6, r1
 800b0b4:	b921      	cbnz	r1, 800b0c0 <_realloc_r+0x14>
 800b0b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	f7ff bf9c 	b.w	800aff8 <_malloc_r>
 800b0c0:	b922      	cbnz	r2, 800b0cc <_realloc_r+0x20>
 800b0c2:	f7ff ff4d 	bl	800af60 <_free_r>
 800b0c6:	4625      	mov	r5, r4
 800b0c8:	4628      	mov	r0, r5
 800b0ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0cc:	f000 f826 	bl	800b11c <_malloc_usable_size_r>
 800b0d0:	42a0      	cmp	r0, r4
 800b0d2:	d20f      	bcs.n	800b0f4 <_realloc_r+0x48>
 800b0d4:	4621      	mov	r1, r4
 800b0d6:	4638      	mov	r0, r7
 800b0d8:	f7ff ff8e 	bl	800aff8 <_malloc_r>
 800b0dc:	4605      	mov	r5, r0
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d0f2      	beq.n	800b0c8 <_realloc_r+0x1c>
 800b0e2:	4631      	mov	r1, r6
 800b0e4:	4622      	mov	r2, r4
 800b0e6:	f7ff fbbb 	bl	800a860 <memcpy>
 800b0ea:	4631      	mov	r1, r6
 800b0ec:	4638      	mov	r0, r7
 800b0ee:	f7ff ff37 	bl	800af60 <_free_r>
 800b0f2:	e7e9      	b.n	800b0c8 <_realloc_r+0x1c>
 800b0f4:	4635      	mov	r5, r6
 800b0f6:	e7e7      	b.n	800b0c8 <_realloc_r+0x1c>

0800b0f8 <_sbrk_r>:
 800b0f8:	b538      	push	{r3, r4, r5, lr}
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	4c05      	ldr	r4, [pc, #20]	; (800b114 <_sbrk_r+0x1c>)
 800b0fe:	4605      	mov	r5, r0
 800b100:	4608      	mov	r0, r1
 800b102:	6023      	str	r3, [r4, #0]
 800b104:	f7f7 fd4c 	bl	8002ba0 <_sbrk>
 800b108:	1c43      	adds	r3, r0, #1
 800b10a:	d102      	bne.n	800b112 <_sbrk_r+0x1a>
 800b10c:	6823      	ldr	r3, [r4, #0]
 800b10e:	b103      	cbz	r3, 800b112 <_sbrk_r+0x1a>
 800b110:	602b      	str	r3, [r5, #0]
 800b112:	bd38      	pop	{r3, r4, r5, pc}
 800b114:	20001498 	.word	0x20001498

0800b118 <__malloc_lock>:
 800b118:	4770      	bx	lr

0800b11a <__malloc_unlock>:
 800b11a:	4770      	bx	lr

0800b11c <_malloc_usable_size_r>:
 800b11c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b120:	1f18      	subs	r0, r3, #4
 800b122:	2b00      	cmp	r3, #0
 800b124:	bfbc      	itt	lt
 800b126:	580b      	ldrlt	r3, [r1, r0]
 800b128:	18c0      	addlt	r0, r0, r3
 800b12a:	4770      	bx	lr

0800b12c <lroundf>:
 800b12c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b130:	2800      	cmp	r0, #0
 800b132:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b136:	b510      	push	{r4, lr}
 800b138:	bfb4      	ite	lt
 800b13a:	f04f 34ff 	movlt.w	r4, #4294967295
 800b13e:	2401      	movge	r4, #1
 800b140:	2a1e      	cmp	r2, #30
 800b142:	dc1b      	bgt.n	800b17c <lroundf+0x50>
 800b144:	2a00      	cmp	r2, #0
 800b146:	da04      	bge.n	800b152 <lroundf+0x26>
 800b148:	3201      	adds	r2, #1
 800b14a:	bf18      	it	ne
 800b14c:	2400      	movne	r4, #0
 800b14e:	4620      	mov	r0, r4
 800b150:	bd10      	pop	{r4, pc}
 800b152:	2a16      	cmp	r2, #22
 800b154:	bfd8      	it	le
 800b156:	f44f 0380 	movle.w	r3, #4194304	; 0x400000
 800b15a:	f3c0 0116 	ubfx	r1, r0, #0, #23
 800b15e:	bfd8      	it	le
 800b160:	4113      	asrle	r3, r2
 800b162:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800b166:	bfcd      	iteet	gt
 800b168:	3b96      	subgt	r3, #150	; 0x96
 800b16a:	185b      	addle	r3, r3, r1
 800b16c:	f1c2 0217 	rsble	r2, r2, #23
 800b170:	fa01 f303 	lslgt.w	r3, r1, r3
 800b174:	bfd8      	it	le
 800b176:	40d3      	lsrle	r3, r2
 800b178:	435c      	muls	r4, r3
 800b17a:	e7e8      	b.n	800b14e <lroundf+0x22>
 800b17c:	f7f5 fe6c 	bl	8000e58 <__aeabi_f2iz>
 800b180:	4604      	mov	r4, r0
 800b182:	e7e4      	b.n	800b14e <lroundf+0x22>

0800b184 <_init>:
 800b184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b186:	bf00      	nop
 800b188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b18a:	bc08      	pop	{r3}
 800b18c:	469e      	mov	lr, r3
 800b18e:	4770      	bx	lr

0800b190 <_fini>:
 800b190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b192:	bf00      	nop
 800b194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b196:	bc08      	pop	{r3}
 800b198:	469e      	mov	lr, r3
 800b19a:	4770      	bx	lr
